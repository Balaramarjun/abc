// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Cmc.Engage.UIAutomation.SpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AccountFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = new string[] {
                "Account",
                "Campus"};
        
#line 1 "Account.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Account", null, ProgrammingLanguage.CSharp, new string[] {
                        "Account",
                        "Campus"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Account")))
            {
                global::Cmc.Engage.UIAutomation.SpecFlow.Features.AccountFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void _05AccountFormLocksWhenAccountTypeIsCampus(string testCaseID, string businessUnitAdministrator, string area, string subArea, string accountName, string accountType, string accountTypeCampus, string section, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Smoke",
                    "Regression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05 Account form locks when Account Type is Campus", null, @__tags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 71
 testRunner.Given(string.Format("I have logged in as a {0}", businessUnitAdministrator), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 72
  testRunner.And(string.Format("I navigate to main Area and SubArea {0}", subArea), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
  testRunner.And("I have clicked New command in View", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
  testRunner.And(string.Format("I have set {0} to name text field uniquely in the Form", accountName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
  testRunner.And(string.Format("I have set {0} to mshied_accounttype optionset field in the Form", accountType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
  testRunner.And("I press Save in the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.Then("the Entity should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
 testRunner.When(string.Format("I have set {0} to mshied_accounttype optionset field in the Form", accountTypeCampus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
  testRunner.And(string.Format("I verify in {0} section Locked External Identifier field is locked", section), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
  testRunner.And("I press Save in the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
  testRunner.And("I have clicked New command in View", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
  testRunner.And(string.Format("I verify in {0} section Locked External Identifier field is locked", section), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
 testRunner.Then("the Entity should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 121
  testRunner.And(string.Format("I verify in {0} section Locked External Identifier field is locked", section), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("05 Account form locks when Account Type is Campus: 773806")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Account")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Account")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Campus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "773806")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Case ID", "773806")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BusinessUnitAdministrator", "BusinessUnitAdministrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Area", "Constituents")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SubArea", "Accounts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountName", "YashiAccount")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountType", "High School")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountTypeCampus", "Campus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Section", "Account Information")]
        public virtual void _05AccountFormLocksWhenAccountTypeIsCampus_773806()
        {
#line 70
this._05AccountFormLocksWhenAccountTypeIsCampus("773806", "BusinessUnitAdministrator", "Constituents", "Accounts", "YashiAccount", "High School", "Campus", "Account Information", ((string[])(null)));
#line hidden
        }
        
        public virtual void _06CustomerAddressShouldCopyToAccountsNativeAddressWhenMailTypeFieldIsSetToPrimary(string testCaseID, string businessUnitAdministrator, string area, string subArea, string country, string street1, string city, string state, string zipCode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("06 Customer Address should copy to  Account\'s Native address when Mail Type Field" +
                    " is set to Primary", null, exampleTags);
#line 136
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 137
 testRunner.Given(string.Format("I have logged in as a {0}", businessUnitAdministrator), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 138
  testRunner.And(string.Format("I navigate to main Area and SubArea {0}", subArea), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
  testRunner.And("I switch the view to Active High Schools", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
  testRunner.And("I wait for 2000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
  testRunner.And("I search Account-840929 in the grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
    testRunner.When("I wait for 4000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 144
  testRunner.And("I open the first record in the grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
  testRunner.When("I wait for 3000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
        testRunner.And("I select Account(Reach - New) Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
  testRunner.When("I wait for 2000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 148
  testRunner.And("I select the sub tab Addresses of tab Related in the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 149
  testRunner.And("I wait for 3000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
  testRunner.And("I click New Address command in associated View", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
  testRunner.And("I wait for 1000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
  testRunner.And("I select Information(Reach - New) Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
 testRunner.When("I have set 2 to addresstypecode optionset field in the Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 155
  testRunner.And("I have set Primary to mshied_mailtype optionset field in the Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 160
  testRunner.And(string.Format("I select matching Address to {0} in the field search_field", street1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
  testRunner.And("I have clicked Save & Close command in View", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
  testRunner.And("I wait for 2000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
  testRunner.And("I select the tab Account Summary in the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
  testRunner.And("I select Account(Reach) Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
  testRunner.And("I wait for 1500 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
  testRunner.And("I scroll to Correspondence Details section having Address 1: Street 1 field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
    testRunner.And("I wait for 5000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
  testRunner.And(string.Format("The field address1_composite_compositionLinkControl_address1_line1 value should b" +
                            "e same as {0} in section Correspondence Details", street1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 180
 testRunner.And(string.Format("The field address1_composite_compositionLinkControl_address1_city value should be" +
                            " same as {0} in section Correspondence Details", city), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 181
  testRunner.And(string.Format("The field address1_composite_compositionLinkControl_address1_postalcode value sho" +
                            "uld be same as {0} in section Correspondence Details", zipCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 182
  testRunner.And(string.Format("The field address1_composite_compositionLinkControl_address1_country value should" +
                            " be same as {0} in section Correspondence Details", country), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("06 Customer Address should copy to  Account\'s Native address when Mail Type Field" +
            " is set to Primary: 840929")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Account")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Account")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Campus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "840929")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Case ID", "840929")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BusinessUnitAdministrator", "BusinessUnitAdministrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Area", "Constituents")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SubArea", "Accounts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Country", "United States of America")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Street 1", "7284 West Palmetto Park Road")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:City", "Boca Raton")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:State", "Florida")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Zip Code", "33433")]
        public virtual void _06CustomerAddressShouldCopyToAccountsNativeAddressWhenMailTypeFieldIsSetToPrimary_840929()
        {
#line 136
this._06CustomerAddressShouldCopyToAccountsNativeAddressWhenMailTypeFieldIsSetToPrimary("840929", "BusinessUnitAdministrator", "Constituents", "Accounts", "United States of America", "7284 West Palmetto Park Road", "Boca Raton", "Florida", "33433", ((string[])(null)));
#line hidden
        }
        
        public virtual void _07Account_FormUpdateDesign(string testCaseID, string persona, string area, string subArea, string subGridButtonName, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("07 Account_Form update design", null, exampleTags);
#line 195
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 196
                testRunner.Given(string.Format("I have logged in as a {0}", persona), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 197
                testRunner.And(string.Format("I navigate to main Area and SubArea {0}", subArea), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 198
    testRunner.When("I wait for 2000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 199
                testRunner.And("I open the first record in the grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
    testRunner.When("I wait for 1000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 201
    testRunner.And("I select the tab Account Summary in the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "sectionLabel",
                            "FieldName",
                            "FieldValue"});
                table1.AddRow(new string[] {
                            "Field",
                            "Account Information",
                            "Account Name",
                            ""});
                table1.AddRow(new string[] {
                            "Field",
                            "Account Information",
                            "Account Type",
                            ""});
                table1.AddRow(new string[] {
                            "Field",
                            "Account Information",
                            "External Identifier",
                            ""});
                table1.AddRow(new string[] {
                            "Field",
                            "Account Information",
                            "Code",
                            ""});
                table1.AddRow(new string[] {
                            "Field",
                            "Account Information",
                            "Website",
                            ""});
                table1.AddRow(new string[] {
                            "Field",
                            "Account Information",
                            "SMS Number",
                            ""});
                table1.AddRow(new string[] {
                            "Field",
                            "Account Information",
                            "Parent Account",
                            ""});
                table1.AddRow(new string[] {
                            "Field",
                            "Account Information",
                            "Industry",
                            ""});
                table1.AddRow(new string[] {
                            "Field",
                            "Account Information",
                            "# of Students",
                            ""});
                table1.AddRow(new string[] {
                            "Field",
                            "Account Information",
                            "# of Contacts",
                            ""});
#line 202
                testRunner.Then("I verify below fields", ((string)(null)), table1, "Then ");
#line hidden
#line 214
    testRunner.And("I scroll in to view of Correspondence Details section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 215
    testRunner.And("I wait for 1000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "sectionLabel",
                            "FieldName",
                            "FieldValue"});
                table2.AddRow(new string[] {
                            "Field",
                            "Correspondence Details",
                            "Main Phone",
                            ""});
                table2.AddRow(new string[] {
                            "Field",
                            "Correspondence Details",
                            "Alternate Phone Number",
                            ""});
                table2.AddRow(new string[] {
                            "Field",
                            "Correspondence Details",
                            "Primary Email Address",
                            ""});
                table2.AddRow(new string[] {
                            "Field",
                            "Correspondence Details",
                            "Alternate Email Address",
                            ""});
                table2.AddRow(new string[] {
                            "Field",
                            "Correspondence Details",
                            "Fax",
                            ""});
                table2.AddRow(new string[] {
                            "Field",
                            "Correspondence Details",
                            "Address 1: Street 1",
                            ""});
                table2.AddRow(new string[] {
                            "Field",
                            "Correspondence Details",
                            "Address 1: Street 2",
                            ""});
                table2.AddRow(new string[] {
                            "Field",
                            "Correspondence Details",
                            "Address 1: Street 3",
                            ""});
                table2.AddRow(new string[] {
                            "Field",
                            "Correspondence Details",
                            "Address 1: City",
                            ""});
#line 216
    testRunner.And("I verify below fields", ((string)(null)), table2, "And ");
#line hidden
#line 227
    testRunner.And("I scrolldown to End of Correspondence Details section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 228
    testRunner.And("I wait for 1000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "sectionLabel",
                            "FieldName",
                            "FieldValue"});
                table3.AddRow(new string[] {
                            "Field",
                            "Correspondence Details",
                            "Address 1: State/Province",
                            ""});
                table3.AddRow(new string[] {
                            "Field",
                            "Correspondence Details",
                            "Address 1: ZIP/Postal Code",
                            ""});
                table3.AddRow(new string[] {
                            "Field",
                            "Correspondence Details",
                            "Address 1: Country/Region",
                            ""});
#line 229
    testRunner.And("I verify below fields", ((string)(null)), table3, "And ");
#line hidden
#line 235
    testRunner.And("I scroll in to view of Contact Prefrences section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 236
    testRunner.And("I wait for 3000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "sectionLabel",
                            "FieldName",
                            "FieldValue"});
                table4.AddRow(new string[] {
                            "Field",
                            "Contact Prefrences",
                            "Contact Method",
                            ""});
                table4.AddRow(new string[] {
                            "Field",
                            "Contact Prefrences",
                            "Follow Email",
                            ""});
                table4.AddRow(new string[] {
                            "Field",
                            "Contact Prefrences",
                            "Phone",
                            ""});
                table4.AddRow(new string[] {
                            "Field",
                            "Contact Prefrences",
                            "Mail",
                            ""});
                table4.AddRow(new string[] {
                            "Field",
                            "Contact Prefrences",
                            "Bulk Email",
                            ""});
                table4.AddRow(new string[] {
                            "Field",
                            "Contact Prefrences",
                            "Email",
                            ""});
                table4.AddRow(new string[] {
                            "Field",
                            "Contact Prefrences",
                            "Fax",
                            ""});
#line 237
    testRunner.And("I verify below fields", ((string)(null)), table4, "And ");
#line hidden
#line 247
                testRunner.And("I select the tab Account Details in the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "sectionLabel",
                            "FieldName",
                            "FieldValue"});
                table5.AddRow(new string[] {
                            "Field",
                            "Account Description & Additional Info",
                            "Description",
                            ""});
                table5.AddRow(new string[] {
                            "Field",
                            "Account Description & Additional Info",
                            "Academic/Fiscal Year End",
                            ""});
                table5.AddRow(new string[] {
                            "Field",
                            "Account Description & Additional Info",
                            "DOM Status",
                            ""});
#line 248
                testRunner.And("I verify below fields", ((string)(null)), table5, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("07 Account_Form update design: 849563")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Account")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Account")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Campus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "849563")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Case ID", "849563")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Persona", "StudentAdvisor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Area", "Engage")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SubArea", "Accounts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:subGridButtonName", "Create a new activity, note, or custom item.")]
        public virtual void _07Account_FormUpdateDesign_849563()
        {
#line 195
this._07Account_FormUpdateDesign("849563", "StudentAdvisor", "Engage", "Accounts", "Create a new activity, note, or custom item.", ((string[])(null)));
#line hidden
        }
        
        public virtual void _08ValidateAccountFormLookupfieldsOptionSetAndTextFields(string testCaseID, string persona, string lastName, string method, string category, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("08 validate Account  form lookupfields ,Option set and text fields", null, exampleTags);
#line 265
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 268
                testRunner.Given(string.Format("I have logged in as a {0}", persona), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 269
    testRunner.And("I navigate to main Area and SubArea Accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 276
                testRunner.And("I have clicked New command in View", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 277
                testRunner.When("I select Account(Reach) Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 279
                testRunner.And("I have set TestAccountAbhi to name text field uniquely in the Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 280
                testRunner.And("I have set Account-837527 to parentaccountid lookup item in the Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 281
                testRunner.When("I have set High School to mshied_accounttype optionset field in the Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 282
                testRunner.And("I have set Brokers to industrycode optionset field in the Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 283
                testRunner.And("I have set Test to cmc_accountcode text field uniquely in the Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 284
    testRunner.And("I scroll in to view of Correspondence Details section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 285
    testRunner.And("I wait for 1000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 286
                testRunner.And("I have set 123546 to telephone1 text field in the Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 287
                testRunner.And("I capture screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 288
                testRunner.Given("I select the tab Account Details in the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 290
                testRunner.And("I have set TestDescription to description text field uniquely in the Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 291
                testRunner.When("I press Save in the form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 292
                testRunner.Then("the Entity should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 293
                testRunner.And("I wait for 2000 specific time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("08 validate Account  form lookupfields ,Option set and text fields: 837527")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Account")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Account")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Campus")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "837527")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Test Case ID", "837527")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Persona", "BusinessUnitAdministrator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LastName", "Contact-837527")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Method", "Appointment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Category", "Application")]
        public virtual void _08ValidateAccountFormLookupfieldsOptionSetAndTextFields_837527()
        {
#line 265
this._08ValidateAccountFormLookupfieldsOptionSetAndTextFields("837527", "BusinessUnitAdministrator", "Contact-837527", "Appointment", "Application", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
