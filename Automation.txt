

chaos eng
The goal is to observe, monitor, respond to, and improve your system's reliability under adverse circumstances. For example, taking dependencies offline (stopping API apps, shutting down VMs, etc.), restricting access (enabling firewall rules, changing connection strings, etc.), or forcing failover (database level, Front Door, etc.), is a good way to validate that the application is able to handle faults gracefully.


Be proactive.
Embrace failure.
Break the system.
Identify and address single points of failure early.
Install guardrails and graceful mitigation.
Minimize the blast radius.
Build immunity.

When to apply chaos
Ideally, you should apply chaos principles continuously. There's constant change in the environments in which software and hardware run, so monitoring the changes is key. By constantly applying stress or faults on components, you can help expose issues early, before small problems are compounded by a number of other factors.

Apply chaos engineering principles when you're:

Deploying new code.
Adding dependencies.
Observing changes in usage patterns.
Mitigating problems.

Shift left testing is an approach used to speed software testing and facilitate development by moving the testing process to an earlier point in the development cycle. Shifting left is a reference to moving testing to the left on a timeline.

Shift left testing is designed to be a better model for shift left (fast lane) development because traditional testing models that wait until later in the development cycle can bottleneck development.

Four types of shift left testing exist: traditional, incremental, agile/DevOps and model-based shift left testing:

Traditional shift left testing focuses on unit and integration testing through API testing and modern test tools.
Incremental shift left testing breaks complex development down into smaller pieces, allowing them to be tested in smaller segments that build upon each other. Incremental shift left testing is widely adopted.
Agile/DevOps performs testing in numerous sprints. The model is often restricted to developmental testing without operational testing. Agile/DevOps is a popular and ongoing testing type transition.
Model-based shift left testing includes executable requirements, architecture and design models to eliminate 45-65 percent of errors introduced in these early phases. The model-based approach is the newest trend in shift left testing.
By involving testers sooner, developers hope to catch problems earlier in the develop



is offscreen: it will use to identify

dynamic--


https://www.visualstudio.com/post-download-vs/?sku=ent&clcid=0x409&telem=ga#


Data source:
1.
  public TestContext Context

        {
           get
            {
              return context;
            }

            set
            {
             context = value;
            }
        }

2.
string loginName = Context.DataRow["loginName"].ToString() + i.ToString() + "@gmail.com";

3.[DeploymentItem("TestData\\603234.csv"), DataSource("Microsoft.VisualStudio.TestTools.DataSource.CSV", "|DataDirectory|\\603234.csv", "603234#csv", DataAccessMethod.Sequential), TestMethod]


{"method":"xpath","selector":".//div[@data-type="Grid"]"}
(Session info: chrome=98.0.4758.82)


_25ValidateOnSelectingPaymentGatewayOptionItsRelatedCofigurationFieldsAppear_917118

#{ReachURL}#
TestCategory =ExceedCapacity
Contactfeature
TestCategory =EnrollmentAutoCreate
Webhook Endpoint URL
https://900083-reach-qa2.crm.dynamics.com

Common


Postman /Newman tool poc and on boarded

API Automation framework(.Unti Test framework)

Jmeter
Power Automate
Running API test case via CI/CD piple lines
Running UItest case via CI/CD piple lines


--------------------------------------------------------------------------------
Create project( C# .net Project) for all DTo

Nuget--> Restsharp json (Newtonsoft_json)( v12.3)
     -->Restsharp(105.2.3)

Datatransfer obejects

Create class file( list DTO)
Take api get response and convert
json into class converter(app.Quicktype.io)

Methods:

Request:
var restclient =new RestClient("https://reqres.in");
var restRequest=new restRequest("/Api/users?page=2, method.Get)
restRequest.Addheader("Accept","application/json");
restRequest.ReuestFormat=Dataformat.json;

Response 
IRestResponse response =restClient.Execute(restRequest):
var content=response.content

var users=Jsonconvert.desiralzeobject<listofUsersDTo>(content);
return users

Create unit test framework to write test cases


Add refernce in unit test project of .Net project)

publice void verify uselist()
{
var demo=new deom()
var response=demo.getusers()

assert.Areequal(2,response.page);
Assert.arequal("Machile,response.Data[0].Firstname)
}

https://900082engage-qa1.azurewebsites.net/api/ExecuteFlow?code=ALN/nIi/fOctjYaqMzrxhap6EUL65jKAAuHXROpTM/Rqvi0y34RSxA==
https://900082engage-qa1.azurewebsites.net/api/ExecuteFlow?code=/FB5IjuevLQwaVamP5569i0TAAmeJUXNIrO8xmo6EyM1atlWZVF2yw==

1017383 1017384  9493921057

https://900082engage-qa1.azurewebsites.net/api/ExecuteFlow?code=OJmY498UAjulkxXMfm6HnV1JM8VHVtW2mfIuOCmvMfYaMj9MPOW3Dw==
https://900082engage-qa1.azurewebsites.net/api/ExecuteFlow?code=OJmY498UAjulkxXMfm6HnV1JM8VHVtW2mfIuOCmvMfYaMj9MPOW3Dw==