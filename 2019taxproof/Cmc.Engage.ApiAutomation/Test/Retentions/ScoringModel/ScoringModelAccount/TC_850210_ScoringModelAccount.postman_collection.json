{
	"info": {
		"_postman_id": "8e2fc034-5068-4dec-8c67-68d7afcbd79e",
		"name": "TC_850210_ScoringModelAccount",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "DCRM Admin",
			"item": [
				{
					"name": "GetToken_DCRM Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setGlobalVariable('gaccess_token', data.access_token);",
									"",
									"//pm.environment.set(\"Eaccess_token\", data.access_token);",
									"console.log(pm.globals.get(\"gaccess_token\"));",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{Eadmin_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{Eadmin_secret}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{Eresource}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{Eredirectid}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{Eredirectid}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "Create Account_University",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var account_id;",
									"var Accname;",
									"var numberofemployees;",
									"",
									"pm.test(\"Account record is created\", function() {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // pm.globals.set('gaccountId', jsonData.accountid);",
									"    account_id = jsonData.accountid;",
									"    Accname = jsonData.name;",
									"    console.log('Account name is: ' + Accname);",
									"    numberofemployees=jsonData.numberofemployees;",
									"   ",
									"});",
									"",
									"//1st record",
									"pm.globals.set('gaccountId', account_id);",
									"pm.globals.set('gnumberofemployees',numberofemployees);",
									"pm.globals.set('gAccname',Accname);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mshied_accounttype\": 494280003,\n    \"name\": \"Scoring {{$randomInt}} Account-University {{$randomInt}}\"\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}accounts",
							"host": [
								"{{Eresource_URL}}accounts"
							]
						},
						"description": "Create Account with new Address"
					},
					"response": []
				},
				{
					"name": "Create Account_Campus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var account_id;",
									"var Accname;",
									"var numberofemployees;",
									"",
									"pm.test(\"Account record is created\", function() {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // pm.globals.set('gaccountId', jsonData.accountid);",
									"    account_id = jsonData.accountid;",
									"    Accname = jsonData.name;",
									"    console.log('Account name is: ' + Accname);",
									"    numberofemployees=jsonData.numberofemployees;",
									"    ",
									"    ",
									"",
									"});",
									"",
									"",
									"//1st record",
									"pm.globals.set('gaccountId11', account_id);",
									"pm.globals.set('gnumberofemployees11',numberofemployees);",
									"pm.globals.set('gAccname11',Accname);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"mshied_accounttype\": 494280000,\n\t\"name\": \"Scoring {{$randomInt}} Account-Campus {{$randomInt}}\"\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}accounts",
							"host": [
								"{{Eresource_URL}}accounts"
							]
						},
						"description": "Create Account with new Address"
					},
					"response": []
				},
				{
					"name": "Create Account_College",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var account_id;",
									"var Accname;",
									"var numberofemployees;",
									"",
									"pm.test(\"Account record is created\", function() {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // pm.globals.set('gaccountId', jsonData.accountid);",
									"    account_id = jsonData.accountid;",
									"    Accname = jsonData.name;",
									"    console.log('Account name is: ' + Accname);",
									"    numberofemployees=jsonData.numberofemployees;",
									"    ",
									"",
									"});",
									"",
									"",
									"//1st record",
									"pm.globals.set('gaccountId21', account_id);",
									"pm.globals.set('gnumberofemployees21',numberofemployees);",
									"pm.globals.set('gAccname21',Accname);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"mshied_accounttype\": 494280002,\n\t\"name\": \"Scoring {{$randomInt}} Account-College {{$randomInt}}\"\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}accounts",
							"host": [
								"{{Eresource_URL}}accounts"
							]
						},
						"description": "Create Account with new Address"
					},
					"response": []
				},
				{
					"name": "Create Account_HighSchool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var account_id;",
									"var Accname;",
									"var numberofemployees;",
									"",
									"pm.test(\"Account record is created\", function() {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    // pm.globals.set('gaccountId', jsonData.accountid);",
									"    account_id = jsonData.accountid;",
									"    Accname = jsonData.name;",
									"    console.log('Account name is: ' + Accname);",
									"    numberofemployees=jsonData.numberofemployees;",
									"    ",
									"",
									"});",
									"",
									"//1st record",
									"pm.globals.set('gaccountId31', account_id);",
									"pm.globals.set('gnumberofemployees31',numberofemployees);",
									"pm.globals.set('gAccname31',Accname);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"mshied_accounttype\": 494280001,\n\t\"name\": \"Scoring {{$randomInt}} Account-HighSchool {{$randomInt}}\"\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}accounts",
							"host": [
								"{{Eresource_URL}}accounts"
							]
						},
						"description": "Create Account with new Address"
					},
					"response": []
				}
			]
		},
		{
			"name": "DCRM Student Advisor",
			"item": [
				{
					"name": "GetToken_DCRM Student Advisor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setGlobalVariable('gaccess_token', data.access_token);",
									"",
									"//pm.environment.set(\"Eaccess_token\", data.access_token);",
									"console.log(pm.globals.get(\"gaccess_token\"));",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{Estudentadvisor_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{Estudentadvisor_secret}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{Eresource}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{Eredirectid}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{Eredirectid}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Marketing List",
			"item": [
				{
					"name": "Create Marketing List_Static 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var listid;",
									"pm.test(\"Marketing List Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    listid = jsonData.listid;",
									"    ",
									" var SGName =jsonData.listname;   ",
									" var stateid = jsonData.statecode;",
									" console.log('ML name:'+SGName);",
									" ",
									" if(stateid ===0)",
									"   {  ",
									"       var  active=\"is Activated\";",
									"   console.log('SGName' +active);",
									"   } ",
									" else{ ",
									"      var deactive=\"is De-Activated\";",
									"     console.log('SGName' +deactive);",
									"     }",
									"});",
									"",
									"pm.globals.set('glistid', listid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"listname\": \"Marketing list SD {{$randomInt}}API Account {{$randomInt}} \",\r\n    \"type\": false,\r\n    \"createdfromcode\": 1,\r\n    \"cmc_marketinglisttype\": 175490000\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}lists",
							"host": [
								"{{Eresource_URL}}lists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Marketing List_Static 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var listid;",
									"pm.test(\"Marketing List Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    listid = jsonData.listid;",
									"    ",
									" var SGName =jsonData.listname;   ",
									" var stateid = jsonData.statecode;",
									" console.log('ML name:'+SGName);",
									" ",
									" if(stateid ===0)",
									"   {  ",
									"       var  active=\"is Activated\";",
									"   console.log('SGName' +active);",
									"   } ",
									" else{ ",
									"      var deactive=\"is De-Activated\";",
									"     console.log('SGName' +deactive);",
									"     }",
									"});",
									"",
									"pm.globals.set('glistid2', listid);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"listname\": \"Marketing list SD2 {{$randomInt}}API Account {{$randomInt}} \",\r\n    \"type\": false,\r\n    \"createdfromcode\": 1,\r\n    \"cmc_marketinglisttype\": 175490000\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}lists",
							"host": [
								"{{Eresource_URL}}lists"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Scoring Definition and Scoring Factor",
			"item": [
				{
					"name": "Create Scoring Factor 1 with Query1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var scoringfactor1;",
									"pm.test(\"Scoring factor is Created\", function()",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    scoringfactor1 = jsonData.cmc_scoringfactorid;",
									"    console.log('Scoring factor ID:' +scoringfactor1);",
									"    var scoringfactorname= jsonData.cmc_scoringfactorname;",
									"    console.log('Scoring factor that is created is:' +scoringfactorname);",
									"",
									"});",
									"",
									"",
									"",
									"pm.globals.set('gscoringfactorid1',scoringfactor1);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"description": " ",
								"key": "OData-Version",
								"value": "4.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_scoringfactorname\": \"SF-Account1 {{$randomInt}} Query1 {{$randomInt}}\",\r\n    \"cmc_baseentity\": \"account\",\r\n    \"cmc_points\": 60,\r\n    \"cmc_description\": \"Risk factor for Account {{$randomInt}}\",\r\n    \"cmc_conditionxml\": \"<fetch version=\\\"1.0\\\" output-format=\\\"xml-platform\\\" mapping=\\\"logical\\\" distinct=\\\"false\\\"><entity name=\\\"account\\\"><attribute name=\\\"accountid\\\"/><attribute name=\\\"createdon\\\"/><attribute name=\\\"mshied_accounttype\\\"/><attribute name=\\\"name\\\"/><attribute name=\\\"mshied_numberofcontacts\\\"/><order attribute=\\\"createdon\\\" descending=\\\"false\\\"/><filter type=\\\"and\\\"><condition attribute=\\\"mshied_accounttype\\\" operator=\\\"eq\\\" value=\\\"494280003\\\"/></filter></entity></fetch>\",\r\n   \r\n    \"cmc_baseentityname\": \"Account\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_scoringfactors",
							"host": [
								"{{Eresource_URL}}cmc_scoringfactors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Scoring Factor 2 with Query2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var scoringfactor1;",
									"pm.test(\"Scoring factor is Created\", function()",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    scoringfactor1 = jsonData.cmc_scoringfactorid;",
									"    console.log('Scoring factor ID:' +scoringfactor1);",
									"    var scoringfactorname= jsonData.cmc_scoringfactorname;",
									"    console.log('Scoring factor that is created is:' +scoringfactorname);",
									"",
									"});",
									"",
									"",
									"",
									"pm.globals.set('gscoringfactorid2',scoringfactor1);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"description": " ",
								"key": "OData-Version",
								"value": "4.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_scoringfactorname\": \"SF-Account {{$randomInt}} ExistingQuery {{$randomInt}}\",\r\n    \"cmc_baseentity\": \"account\",\r\n    \"cmc_conditionxml\": \"<fetch version=\\\"1.0\\\" output-format=\\\"xml-platform\\\" mapping=\\\"logical\\\" distinct=\\\"false\\\"><entity name=\\\"account\\\"><attribute name=\\\"name\\\" /><attribute name=\\\"address1_city\\\" /><attribute name=\\\"primarycontactid\\\" /><attribute name=\\\"telephone1\\\" /><attribute name=\\\"mshied_accounttype\\\" /><order attribute=\\\"name\\\" descending=\\\"false\\\" /><filter type=\\\"and\\\"><condition attribute=\\\"statecode\\\" operator=\\\"eq\\\" value=\\\"0\\\" /><condition attribute=\\\"mshied_accounttype\\\" operator=\\\"eq\\\" value=\\\"494280000\\\" /></filter><link-entity name=\\\"contact\\\" from=\\\"contactid\\\" to=\\\"primarycontactid\\\" visible=\\\"false\\\" link-type=\\\"outer\\\" alias=\\\"accountprimarycontactidcontactcontactid\\\"><attribute name=\\\"emailaddress1\\\" /></link-entity><attribute name=\\\"accountid\\\" /></entity></fetch>\",\r\n   \r\n    \"cmc_points\": 30,\r\n    \"cmc_description\": \"Risk factor for Account {{$randomInt}}\",\r\n    \"cmc_baseentityname\": \"Account\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_scoringfactors",
							"host": [
								"{{Eresource_URL}}cmc_scoringfactors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Scoring Factor 3 with Query3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var scoringfactor1;",
									"pm.test(\"Scoring factor is Created\", function()",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    scoringfactor1 = jsonData.cmc_scoringfactorid;",
									"    console.log('Scoring factor ID:' +scoringfactor1);",
									"    var scoringfactorname= jsonData.cmc_scoringfactorname;",
									"    console.log('Scoring factor that is created is:' +scoringfactorname);",
									"",
									"});",
									"pm.globals.set('gscoringfactorid3',scoringfactor1);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"description": " ",
								"key": "OData-Version",
								"value": "4.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_scoringfactorname\": \"SF-Account {{$randomInt}} Query3 {{$randomInt}}\",\r\n    \"cmc_baseentity\": \"account\",\r\n    \"cmc_conditionxml\": \"<fetch version=\\\"1.0\\\" output-format=\\\"xml-platform\\\" mapping=\\\"logical\\\" distinct=\\\"false\\\"><entity name=\\\"account\\\"><attribute name=\\\"accountid\\\"/><attribute name=\\\"createdon\\\"/><attribute name=\\\"mshied_accounttype\\\"/><attribute name=\\\"name\\\"/><order attribute=\\\"createdon\\\" descending=\\\"false\\\"/><filter type=\\\"and\\\"><condition attribute=\\\"createdon\\\" operator=\\\"on-or-after\\\" value=\\\"2019-01-01\\\"/><condition attribute=\\\"mshied_accounttype\\\" operator=\\\"ne\\\" value=\\\"494280001\\\"/></filter></entity></fetch>\",\r\n    \r\n    \"cmc_points\": 6,\r\n    \"cmc_description\": \"Risk factor for Account{{$randomInt}}\",\r\n    \"cmc_baseentityname\": \"Account\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_scoringfactors",
							"host": [
								"{{Eresource_URL}}cmc_scoringfactors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ScoreDefinitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var scoredefinitionid;",
									"pm.test(\"Score Definition for Account is Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    scoredefinitionid =jsonData.cmc_scoredefinitionid;",
									"    console.log('Score definition ID:' +scoredefinitionid);",
									"    var scoredefinitionname= jsonData.cmc_scoredefinitionname;",
									"    console.log('Score Definition that is created is:' +scoredefinitionname);",
									"    var scheduleinterval=jsonData.cmc_scheduleinterval;",
									"    pm.globals.set('gscheduleinterval',scheduleinterval);",
									"});",
									"",
									"pm.globals.set('gscoredefinitionid',scoredefinitionid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "OData-Version",
								"value": "4.0",
								"description": " "
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_scoredefinitionname\": \"SD-API{{$randomInt}} Account {{$randomInt}}{{$randomInt}}\",\r\n    \"cmc_scheduleinterval\": 0,\r\n    \"cmc_redscorethreshold\": 20,\r\n    \"cmc_yellowscorethreshold\": 30,\r\n    \"cmc_greenscorethreshold\": 40,\r\n    \"cmc_baseentity\": \"account\",\r\n    \"cmc_targetattributename\": \"account.numberofemployees\",\r\n    \"cmc_baseentityname\": \"Account\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_scoredefinitions",
							"host": [
								"{{Eresource_URL}}cmc_scoredefinitions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Association of ML and SF to ScoreDefinition",
			"item": [
				{
					"name": "Adding University and College Accounts to Marketing List1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Accounts Addedd to Marketing list\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204,201,202]);",
									"  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"List\": {\r\n        \"listid\": \"{{glistid}}\",\r\n        \"@odata.type\": \"Microsoft.Dynamics.CRM.list\"\r\n    },\r\n    \"Members\": [\r\n        {\r\n            \"@odata.type\": \"Microsoft.Dynamics.CRM.account\",\r\n            \"accountid\": \"{{gaccountId}}\"\r\n        },\r\n        {\r\n            \"@odata.type\": \"Microsoft.Dynamics.CRM.account\",\r\n            \"accountid\": \"{{gaccountId21}}\"\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}AddListMembersList",
							"host": [
								"{{Eresource_URL}}AddListMembersList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Campus and high school Accounts to Marketing List2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Accounts Addedd to Marketing list\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204,201,202]);",
									"  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"List\": {\r\n        \"listid\": \"{{glistid2}}\",\r\n        \"@odata.type\": \"Microsoft.Dynamics.CRM.list\"\r\n    },\r\n\"Members\":\r\n[{\"@odata.type\": \"Microsoft.Dynamics.CRM.account\", \"accountid\": \"{{gaccountId11}}\"},\r\n{\"@odata.type\": \"Microsoft.Dynamics.CRM.account\", \"accountid\": \"{{gaccountId31}}\"}\r\n\r\n\r\n]\r\n\r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}AddListMembersList",
							"host": [
								"{{Eresource_URL}}AddListMembersList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Marketing List1 ToScoreDefinition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Adding Marketing List To Score Definition\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    ",
									"    var listname = jsonData.listname;",
									"    console.log(\"Marketing list which is added to Score definition is:\"  +listname);",
									"    //pm.globals.set('gcontactownerid', ownerid);",
									"  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "OData-Version",
								"value": "4.0",
								"description": " "
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"@odata.id\": \"{{Eresource_URL}}lists({{glistid}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})/cmc_scoredefinition_list/$ref",
							"host": [
								"{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})"
							],
							"path": [
								"cmc_scoredefinition_list",
								"$ref"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Marketing List2 ToScoreDefinition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Adding Marketing List 2 To Score Definition\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    var listname = jsonData.listname;",
									"    console.log(\"Marketing list which is added to Score definition is:\" + listname);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"description": " ",
								"key": "OData-Version",
								"value": "4.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"@odata.id\": \"{{Eresource_URL}}lists({{glistid2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})/cmc_scoredefinition_list/$ref",
							"host": [
								"{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})"
							],
							"path": [
								"cmc_scoredefinition_list",
								"$ref"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding ScoringFactor 1 ToScoreDefinition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Adding Scoring Factor To Score Definition\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([204,201,202,200]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    Scoringfactorname =jsonData.cmc_scoringfactorname;",
									"    console.log('Scoring factor that is added to Score definition is:' +Scoringfactorname);",
									"    ",
									"  ",
									"});",
									"",
									"//setTimeout(function(){}, 25000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"description": " ",
								"key": "OData-Version",
								"value": "4.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"@odata.id\": \"{{Eresource_URL}}cmc_scoringfactors({{gscoringfactorid1}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})/cmc_scoredefinition_scoringfactor/$ref",
							"host": [
								"{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})"
							],
							"path": [
								"cmc_scoredefinition_scoringfactor",
								"$ref"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding ScoringFactor 2 ToScoreDefinition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Adding Scoring Factor To Score Definition\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([204,201,202,200]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    Scoringfactorname =jsonData.cmc_scoringfactorname;",
									"    console.log('Scoring factor that is added to Score definition is:' +Scoringfactorname);     ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"description": " ",
								"key": "OData-Version",
								"value": "4.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"@odata.id\": \"{{Eresource_URL}}cmc_scoringfactors({{gscoringfactorid2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})/cmc_scoredefinition_scoringfactor/$ref",
							"host": [
								"{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})"
							],
							"path": [
								"cmc_scoredefinition_scoringfactor",
								"$ref"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding ScoringFactor 3 ToScoreDefinition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Adding Scoring Factor To Score Definition\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([204,201,202,200]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    Scoringfactorname =jsonData.cmc_scoringfactorname;",
									"    console.log('Scoring factor that is added to Score definition is:' +Scoringfactorname);   ",
									"  ",
									"});",
									"",
									"setTimeout(function(){}, 130000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"description": " ",
								"key": "OData-Version",
								"value": "4.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"@odata.id\": \"{{Eresource_URL}}cmc_scoringfactors({{gscoringfactorid3}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})/cmc_scoredefinition_scoringfactor/$ref",
							"host": [
								"{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})"
							],
							"path": [
								"cmc_scoredefinition_scoringfactor",
								"$ref"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Scenario 1- Verify Score calculation",
			"item": [
				{
					"name": "Verify Target and Score history in Account records",
					"item": [
						{
							"name": "Verify target Attribute value in Account 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var currentretentionscoredate, numberofemployees;",
											"pm.test(\"Retention Score\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"    var jsonData = JSON.parse(responseBody);",
											"    numberofemployees = jsonData.numberofemployees;",
											"    currentretentionscoredate = jsonData.cmc_currentretentionscoredate;",
											"    console.log('number of employees:' + numberofemployees);",
											"    console.log('currentretentionscoredate:' + currentretentionscoredate);",
											"",
											"    pm.test(\"Scores awarded to Account 1\", function()",
											"        {",
											"            pm.expect(numberofemployees).to.equal(66);",
											"        });",
											"});",
											"",
											"pm.globals.set('gnumberofemployees1', numberofemployees);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId}})",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active ScoreHistories for Account 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var score,scoreHistoryName, retentionScoreHistoryId, targetAttribute,lastCalculatedDate, createdOn,autoname,scoreDefinition ;",
											"",
											"pm.test(\"Check the score history record for Account\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    var result=jsonData.cmc_account_retentionscorehistory_accountid;",
											"",
											"    if(result.length===1)",
											"    {",
											"        retentionScoreHistoryId= result[0].cmc_retentionscorehistoryid;",
											"        score= result[0].cmc_score;",
											"        scoreHistoryName= result[0].cmc_retentionscorehistoryname;",
											"        targetAttribute= result[0].cmc_targetattribute;",
											"        lastCalculatedDate= result[0].cmc_lastcalculateddate;",
											"        createdOn= result[0].createdon;",
											"        scoreDefinition=result[0]._cmc_scoredefinitionid_value;",
											"",
											"        var dateFromResponse = new Date(lastCalculatedDate);",
											"        var convertedLastCalculatedDate =dateFromResponse.getFullYear()+\"-\"+(\"0\" + (dateFromResponse.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dateFromResponse.getDate())).slice(-2);",
											"        ",
											"        console.log(\"Target score in Score history record is:\" +score);",
											"        console.log(\"Score history name is:\" +scoreHistoryName);",
											"        console.log(\"Target Attribute is:\" +targetAttribute);",
											"        console.log(\"Last Calculated date is:\" +lastCalculatedDate);",
											"        console.log(\"created on is:\" +createdOn);",
											"",
											"        var actualScoreDefintion=pm.globals.get('gscoredefinitionid');",
											"        var actualTargetAttribute=\"numberofemployees\";",
											"        var actualcalculatedDate=pm.environment.get('timestamp');",
											"",
											"        console.log(\"actual calculated date is: \"+actualcalculatedDate);",
											"",
											"        /*pm.test(\"Last Calculated Date check\", function()",
											"        {",
											"            pm.expect(actualcalculatedDate).to.equal(convertedLastCalculatedDate);",
											"        });  */",
											"",
											"        //Autonme Workflow check for Score History Name",
											"        nameString =scoreHistoryName.split(\"-\");",
											"        ",
											"        autoname= pm.globals.get('gAccname')+\" \"+\"-\"+\" \"+score+\" \"+\"-\"+nameString[nameString.length-1];      ",
											"        console.log(\"Score History Autoname is: \"+autoname);",
											"               ",
											"        pm.test(\"Autonme Workflow check for Score History Name\", function()",
											"        {",
											"            pm.expect(scoreHistoryName).to.equal(autoname);",
											"        });",
											"         ",
											"        pm.test(\"Score value in Score History record\", function()",
											"        {",
											"            pm.expect(score).to.equal(66);",
											"        });",
											"",
											"        pm.test(\"Score Definition check\", function()",
											"        {",
											"            pm.expect(actualScoreDefintion).to.equal(scoreDefinition);",
											"        });",
											"",
											"        pm.test(\"Target Attribute check\", function()",
											"        {",
											"            pm.expect(actualTargetAttribute).to.equal(targetAttribute);",
											"        });   ",
											"        ",
											"    }",
											"    else",
											"    {",
											"        console.log(\"Active Score history record does't exist\");",
											"        throw new Error();",
											"    }",
											"",
											"    ",
											"});",
											"",
											"pm.globals.set('gretentionScoreHistoryId1',retentionScoreHistoryId);",
											"pm.globals.set('gscore1',score);",
											"pm.globals.set('lastCalculatedDate1',lastCalculatedDate);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId}})?$expand=cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId}})"
									],
									"query": [
										{
											"key": "$expand",
											"value": "cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify target Attribute value in Account 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var currentretentionscoredate, numberofemployees;",
											"pm.test(\"Retention Score\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"     numberofemployees =jsonData.numberofemployees;",
											"     currentretentionscoredate =jsonData.cmc_currentretentionscoredate;",
											"      console.log('number of employees:'+numberofemployees);",
											"      console.log('currentretentionscoredate:'+currentretentionscoredate);",
											"      //var oldNumberOfEmployees=pm.globals.get('gnumberofemployees');",
											"      ",
											"    pm.test(\"Scores awarded to Account 1\", function()",
											"        {",
											"            pm.expect(numberofemployees).to.equal(36);",
											"        });",
											" ",
											"});",
											"pm.globals.set('gnumberofemployees2',numberofemployees);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId11}})",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId11}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active ScoreHistories for Account 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var score,scoreHistoryName, retentionScoreHistoryId, targetAttribute,lastCalculatedDate, createdOn,autoname,scoreDefinition ;",
											"",
											"pm.test(\"Check the score history record for Account\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    var result=jsonData.cmc_account_retentionscorehistory_accountid;",
											"",
											"    if(result.length===1)",
											"    {",
											"       retentionScoreHistoryId= result[0].cmc_retentionscorehistoryid;",
											"        score= result[0].cmc_score;",
											"        scoreHistoryName= result[0].cmc_retentionscorehistoryname;",
											"        targetAttribute= result[0].cmc_targetattribute;",
											"        lastCalculatedDate= result[0].cmc_lastcalculateddate;",
											"        createdOn= result[0].createdon;",
											"        scoreDefinition=result[0]._cmc_scoredefinitionid_value;",
											"",
											"        var dateFromResponse = new Date(lastCalculatedDate);",
											"        var convertedLastCalculatedDate =dateFromResponse.getFullYear()+\"-\"+(\"0\" + (dateFromResponse.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dateFromResponse.getDate())).slice(-2);",
											"        ",
											"        console.log(\"Target score in Score history record is:\" +score);",
											"        console.log(\"Score history name is:\" +scoreHistoryName);",
											"        console.log(\"Target Attribute is:\" +targetAttribute);",
											"        console.log(\"Last Calculated date is:\" +lastCalculatedDate);",
											"        console.log(\"created on is:\" +createdOn);",
											"",
											"        var actualScoreDefintion=pm.globals.get('gscoredefinitionid');",
											"        var actualTargetAttribute=\"numberofemployees\";",
											"        var actualcalculatedDate=pm.environment.get('timestamp');",
											"",
											"        console.log(\"actual calculated date is: \"+actualcalculatedDate);",
											"",
											"        /*pm.test(\"Last Calculated Date check\", function()",
											"        {",
											"            pm.expect(actualcalculatedDate).to.equal(convertedLastCalculatedDate);",
											"        });*/ ",
											"",
											"        //Autonme Workflow check for Score History Name",
											"        nameString =scoreHistoryName.split(\"-\");",
											"        ",
											"        autoname= pm.globals.get('gAccname11')+\" \"+\"-\"+\" \"+score+\" \"+\"-\"+nameString[nameString.length-1];      ",
											"        console.log(\"Score History Autoname is: \"+autoname);",
											"               ",
											"        pm.test(\"Autonme Workflow check for Score History Name\", function()",
											"        {",
											"            pm.expect(scoreHistoryName).to.equal(autoname);",
											"        });",
											"         ",
											"        pm.test(\"Score value in Score History record\", function()",
											"        {",
											"            pm.expect(score).to.equal(36);",
											"        });",
											"",
											"        pm.test(\"Score Definition check\", function()",
											"        {",
											"            pm.expect(actualScoreDefintion).to.equal(scoreDefinition);",
											"        });",
											"",
											"        pm.test(\"Target Attribute check\", function()",
											"        {",
											"            pm.expect(actualTargetAttribute).to.equal(targetAttribute);",
											"        });   ",
											"        ",
											"    }",
											"    else",
											"    {",
											"        console.log(\"Active Score history record does't exist\");",
											"        throw new Error();",
											"    }",
											"",
											"    ",
											"});",
											"",
											"pm.globals.set('gretentionScoreHistoryId2',retentionScoreHistoryId);",
											"pm.globals.set('gscore2',score);",
											"pm.globals.set('lastCalculatedDate2',lastCalculatedDate);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId11}})?$expand=cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId11}})"
									],
									"query": [
										{
											"key": "$expand",
											"value": "cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify target Attribute value in Account 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var currentretentionscoredate, numberofemployees;",
											"pm.test(\"Retention Score\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"     numberofemployees =jsonData.numberofemployees;",
											"     currentretentionscoredate =jsonData.cmc_currentretentionscoredate;",
											"      console.log('number of employees:'+numberofemployees);",
											"      console.log('currentretentionscoredate:'+currentretentionscoredate);",
											"      //var oldNumberOfEmployees=pm.globals.get('gnumberofemployees');",
											"      ",
											"    pm.test(\"Scores awarded to Account 1\", function()",
											"        {",
											"            pm.expect(numberofemployees).to.equal(6);",
											"        });",
											" ",
											"});",
											"",
											"",
											"pm.globals.set('gnumberofemployees3',numberofemployees);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId21}})",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId21}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active ScoreHistories for Account 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var score,scoreHistoryName, retentionScoreHistoryId, targetAttribute,lastCalculatedDate, createdOn,autoname,scoreDefinition ;",
											"",
											"pm.test(\"Check the score history record for Account\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    var result=jsonData.cmc_account_retentionscorehistory_accountid;",
											"",
											"    if(result.length===1)",
											"    {",
											"        retentionScoreHistoryId= result[0].cmc_retentionscorehistoryid;",
											"        score= result[0].cmc_score;",
											"        scoreHistoryName= result[0].cmc_retentionscorehistoryname;",
											"        targetAttribute= result[0].cmc_targetattribute;",
											"        lastCalculatedDate= result[0].cmc_lastcalculateddate;",
											"        createdOn= result[0].createdon;",
											"        scoreDefinition=result[0]._cmc_scoredefinitionid_value;",
											"",
											"        var dateFromResponse = new Date(lastCalculatedDate);",
											"        var convertedLastCalculatedDate =dateFromResponse.getFullYear()+\"-\"+(\"0\" + (dateFromResponse.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dateFromResponse.getDate())).slice(-2);",
											"        ",
											"        console.log(\"Target score in Score history record is:\" +score);",
											"        console.log(\"Score history name is:\" +scoreHistoryName);",
											"        console.log(\"Target Attribute is:\" +targetAttribute);",
											"        console.log(\"Last Calculated date is:\" +lastCalculatedDate);",
											"        console.log(\"created on is:\" +createdOn);",
											"",
											"        var actualScoreDefintion=pm.globals.get('gscoredefinitionid');",
											"        var actualTargetAttribute=\"numberofemployees\";",
											"        var actualcalculatedDate=pm.environment.get('timestamp');",
											"",
											"        console.log(\"actual calculated date is: \"+actualcalculatedDate);",
											"",
											"       /* pm.test(\"Last Calculated Date check\", function()",
											"        {",
											"            pm.expect(actualcalculatedDate).to.equal(convertedLastCalculatedDate);",
											"        }); */",
											"",
											"        //Autonme Workflow check for Score History Name",
											"        nameString =scoreHistoryName.split(\"-\");",
											"        ",
											"        autoname= pm.globals.get('gAccname21')+\" \"+\"-\"+\" \"+score+\" \"+\"-\"+nameString[nameString.length-1];      ",
											"        console.log(\"Score History Autoname is: \"+autoname);",
											"               ",
											"        pm.test(\"Autonme Workflow check for Score History Name\", function()",
											"        {",
											"            pm.expect(scoreHistoryName).to.equal(autoname);",
											"        });",
											"         ",
											"        pm.test(\"Score value in Score History record\", function()",
											"        {",
											"            pm.expect(score).to.equal(6);",
											"        });",
											"",
											"        pm.test(\"Score Definition check\", function()",
											"        {",
											"            pm.expect(actualScoreDefintion).to.equal(scoreDefinition);",
											"        });",
											"",
											"        pm.test(\"Target Attribute check\", function()",
											"        {",
											"            pm.expect(actualTargetAttribute).to.equal(targetAttribute);",
											"        });   ",
											"        ",
											"    }",
											"    else",
											"    {",
											"        console.log(\"Active Score history record does't exist\");",
											"        throw new Error();",
											"    }",
											"",
											"    ",
											"});",
											"",
											"pm.globals.set('gretentionScoreHistoryId3',retentionScoreHistoryId);",
											"pm.globals.set('gscore3',score);",
											"pm.globals.set('lastCalculatedDate3',lastCalculatedDate);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId21}})?$expand=cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId21}})"
									],
									"query": [
										{
											"key": "$expand",
											"value": "cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify target Attribute value in Account 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var currentretentionscoredate, numberofemployees;",
											"pm.test(\"Retention Score\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"     numberofemployees =jsonData.numberofemployees;",
											"     currentretentionscoredate =jsonData.cmc_currentretentionscoredate;",
											"      console.log('number of employees:'+numberofemployees);",
											"      console.log('currentretentionscoredate:'+currentretentionscoredate);",
											"      //var oldNumberOfEmployees=pm.globals.get('gnumberofemployees');",
											"      ",
											"    pm.test(\"Scores awarded to Account 1\", function()",
											"        {",
											"            pm.expect(numberofemployees).to.equal(null);",
											"        });",
											" ",
											"});",
											"",
											"",
											"pm.globals.set('gnumberofemployees4',numberofemployees);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId31}})",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId31}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active ScoreHistories for Account 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check the score history record for Account\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    var result=jsonData.cmc_account_retentionscorehistory_accountid;",
											"",
											"   if(result.length===1)",
											"    {",
											"        retentionScoreHistoryId= result[0].cmc_retentionscorehistoryid;",
											"        score= result[0].cmc_score;",
											"        scoreHistoryName= result[0].cmc_retentionscorehistoryname;",
											"        targetAttribute= result[0].cmc_targetattribute;",
											"        lastCalculatedDate= result[0].cmc_lastcalculateddate;",
											"        createdOn= result[0].createdon;",
											"        scoreDefinition=result[0]._cmc_scoredefinitionid_value;",
											"",
											"        var dateFromResponse = new Date(lastCalculatedDate);",
											"        var convertedLastCalculatedDate =dateFromResponse.getFullYear()+\"-\"+(\"0\" + (dateFromResponse.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dateFromResponse.getDate())).slice(-2);",
											"        ",
											"        console.log(\"Target score in Score history record is:\" +score);",
											"        console.log(\"Score history name is:\" +scoreHistoryName);",
											"        console.log(\"Target Attribute is:\" +targetAttribute);",
											"        console.log(\"Last Calculated date is:\" +lastCalculatedDate);",
											"        console.log(\"created on is:\" +createdOn);",
											"",
											"        var actualScoreDefintion=pm.globals.get('gscoredefinitionid');",
											"        var actualTargetAttribute=\"numberofemployees\";",
											"        var actualcalculatedDate=pm.environment.get('timestamp');",
											"",
											"        console.log(\"actual calculated date is: \"+actualcalculatedDate);",
											"",
											"       /* pm.test(\"Last Calculated Date check\", function()",
											"        {",
											"            pm.expect(actualcalculatedDate).to.equal(convertedLastCalculatedDate);",
											"        });*/  ",
											"",
											"        //Autonme Workflow check for Score History Name",
											"        nameString =scoreHistoryName.split(\"-\");",
											"        ",
											"        autoname= pm.globals.get('gAccname31')+\" \"+\"-\"+\" \"+\" \"+\"-\"+nameString[nameString.length-1];     ",
											"        console.log(\"Score History Autoname is: \"+autoname);",
											"               ",
											"        pm.test(\"Autonme Workflow check for Score History Name\", function()",
											"        {",
											"            pm.expect(scoreHistoryName).to.equal(autoname);",
											"        });",
											"         ",
											"        pm.test(\"Score value in Score History record\", function()",
											"        {",
											"            pm.expect(score).to.equal(null);",
											"        });",
											"",
											"        pm.test(\"Score Definition check\", function()",
											"        {",
											"            pm.expect(actualScoreDefintion).to.equal(scoreDefinition);",
											"        });",
											"",
											"        pm.test(\"Target Attribute check\", function()",
											"        {",
											"            pm.expect(actualTargetAttribute).to.equal(targetAttribute);",
											"        });   ",
											"        ",
											"    }",
											"    else",
											"    {",
											"        console.log(\"Active Score history record does't exist\");",
											"        throw new Error();",
											"    }",
											"    ",
											"",
											"    ",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId31}})?$expand=cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId31}})"
									],
									"query": [
										{
											"key": "$expand",
											"value": "cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verify 'Date Last Run' & 'last recalculation date'",
					"item": [
						{
							"name": "Verify 'Date Last Run' & 'last recalculation date' in Score Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var dateLastRun,lastRecalculationDate;",
											" ",
											"pm.test(\"Fetch Score definition Record\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    ",
											"    dateLastRun=jsonData.cmc_datelastrun;",
											"    lastRecalculationDate=jsonData.cmc_lastrecalculationdate;",
											"",
											"    var dateFromResponse = new Date(dateLastRun);",
											"    var convertedLastCalculatedDate =dateFromResponse.getFullYear()+\"-\"+(\"0\" + (dateFromResponse.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dateFromResponse.getDate())).slice(-2);",
											"",
											"    var actualcalculatedDate=pm.environment.get('timestamp');",
											"",
											"        console.log(\"actual calculated date is: \"+actualcalculatedDate);",
											"",
											"       /* pm.test(\"Last Calculated Date check\", function()",
											"        {",
											"            pm.expect(actualcalculatedDate).to.equal(convertedLastCalculatedDate);",
											"        }); */",
											"",
											"    var dateFromResponse1 = new Date(lastRecalculationDate);",
											"    var convertedLastRecalculationDate =dateFromResponse1.getFullYear()+\"-\"+(\"0\" + (dateFromResponse1.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dateFromResponse1.getDate())).slice(-2);",
											"   ",
											"       /* pm.test(\"Last reCalculated Date check\", function()",
											"        {",
											"            pm.expect(actualcalculatedDate).to.equal(convertedLastRecalculationDate);",
											"        }); */",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})",
									"host": [
										"{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Scenario 2: Recalculation along with adding a new scoring factor",
			"item": [
				{
					"name": "Update existing Scoring factor record",
					"item": [
						{
							"name": "Update Scoring Factor 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var scoringfactor1;",
											"pm.test(\"Scoring factor is Updated\", function()",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"    var jsonData = JSON.parse(responseBody);",
											"    scoringfactor1 = jsonData.cmc_scoringfactorid;",
											"    console.log('Scoring factor ID:' +scoringfactor1);",
											"    var scoringfactorname= jsonData.cmc_scoringfactorname;",
											"    console.log('Scoring factor that is created is:' +scoringfactorname);",
											"    ",
											"",
											"});",
											"pm.globals.set('gscoringfactorid1',scoringfactor1);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"description": " ",
										"key": "OData-Version",
										"value": "4.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cmc_points\": 15,\r\n    \"cmc_conditionxml\": \"<fetch version=\\\"1.0\\\" output-format=\\\"xml-platform\\\" mapping=\\\"logical\\\" distinct=\\\"false\\\"><entity name=\\\"account\\\"><attribute name=\\\"accountid\\\"/><attribute name=\\\"createdon\\\"/><attribute name=\\\"mshied_accounttype\\\"/><attribute name=\\\"name\\\"/><attribute name=\\\"mshied_numberofcontacts\\\"/><order attribute=\\\"createdon\\\" descending=\\\"false\\\"/><filter type=\\\"and\\\"><condition attribute=\\\"mshied_accounttype\\\" operator=\\\"ne\\\" value=\\\"494280001\\\"/></filter></entity></fetch>\"\r\n    \r\n}"
								},
								"url": {
									"raw": "{{Eresource_URL}}cmc_scoringfactors({{gscoringfactorid1}})",
									"host": [
										"{{Eresource_URL}}cmc_scoringfactors({{gscoringfactorid1}})"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update score definition record",
					"item": [
						{
							"name": "Update ScoreDefinition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var scoredefinitionid,targetAttribute;",
											"pm.test(\"Score Definition updated\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    scoredefinitionid =jsonData.cmc_scoredefinitionid;",
											"    console.log('Score definition ID:' +scoredefinitionid);",
											"    var scoredefinitionname= jsonData.cmc_scoredefinitionname;",
											"    console.log('Score Definition that is created is:' +scoredefinitionname);",
											"    var scheduleinterval=jsonData.cmc_scheduleinterval;",
											"    pm.globals.set('gscheduleinterval',scheduleinterval);",
											"",
											"    targetAttribute=jsonData.cmc_targetattributename;",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var dt = new Date();\r",
											"        dt.setDate( dt.getDate() - 1 );\r",
											"\r",
											"         console.log(\"date: \"+dt);\r",
											"\r",
											"    var convertedLastCalculatedDate =dt.getFullYear()+\"-\"+(\"0\" + (dt.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dt.getDate())).slice(-2);\r",
											"     console.log(\"date: \"+convertedLastCalculatedDate);\r",
											"\r",
											"     var concatenatetime=convertedLastCalculatedDate+\"T18:30:00.000Z\";\r",
											"     console.log(\"datetime: \"+concatenatetime);\r",
											"\r",
											"     pm.environment.set('LastCalculatedDate',concatenatetime);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									},
									{
										"key": "OData-MaxVersion",
										"value": "4.0"
									},
									{
										"description": " ",
										"key": "OData-Version",
										"value": "4.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cmc_recalculaterecords\": true,\r\n    \"cmc_recalculationinterval\": 1,\r\n    \"cmc_datelastrun\":\"{{LastCalculatedDate}}\",\r\n    \"cmc_lastrecalculationdate\":\"{{LastCalculatedDate}}\"\r\n}"
								},
								"url": {
									"raw": "{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})",
									"host": [
										"{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update the last calculated date in Score history records for 1,2 and 3",
					"item": [
						{
							"name": "GetToken_DCRM Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"postman.setGlobalVariable('gaccess_token', data.access_token);",
											"",
											"console.log(pm.globals.get(\"gaccess_token\"));",
											"",
											"",
											"",
											"//Genarate global session value",
											"",
											"var number = Math.floor(Math.random() * 1000);",
											"pm.globals.set('globalsessionvalue',number)",
											"",
											"console.log(pm.globals.get(\"globalsessionvalue\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{Eadmin_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{Eadmin_secret}}",
											"type": "text"
										},
										{
											"key": "resource",
											"value": "{{Eresource}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://login.microsoftonline.com/{{Eredirectid}}/oauth2/token",
									"protocol": "https",
									"host": [
										"login",
										"microsoftonline",
										"com"
									],
									"path": [
										"{{Eredirectid}}",
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active ScoreHistories for Account 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var score,scoreHistoryName, retentionScoreHistoryId, targetAttribute,lastCalculatedDate, createdOn,autoname,scoreDefinition ;",
											"",
											"pm.test(\"Check the score history record for Account\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    var result=jsonData.cmc_account_retentionscorehistory_accountid;",
											"",
											"    if(result.length===1)",
											"    {",
											"        retentionScoreHistoryId= result[0].cmc_retentionscorehistoryid;",
											"        score= result[0].cmc_score;",
											"        scoreHistoryName= result[0].cmc_retentionscorehistoryname;",
											"        targetAttribute= result[0].cmc_targetattribute;",
											"        lastCalculatedDate= result[0].cmc_lastcalculateddate;",
											"        createdOn= result[0].createdon;",
											"        scoreDefinition=result[0]._cmc_scoredefinitionid_value;",
											"        ",
											"        console.log(\"Target score in Score history record is:\" +score);",
											"        console.log(\"Score history name is:\" +scoreHistoryName);",
											"        console.log(\"Target Attribute is:\" +targetAttribute);",
											"        console.log(\"Last Calculated date is:\" +lastCalculatedDate);",
											"        console.log(\"created on is:\" +createdOn);",
											"",
											"    }",
											"    else",
											"    {",
											"        console.log(\"Active Score history record does't exist\");",
											"        throw new Error();",
											"    }",
											"",
											"    ",
											"});",
											"",
											"pm.globals.set('gretentionScoreHistoryId1a',retentionScoreHistoryId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId}})?$expand=cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId}})"
									],
									"query": [
										{
											"key": "$expand",
											"value": "cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update score history of Account 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update the last calculated date for score history record in Account\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    ",
											"    var scoreHistoryName=jsonData.cmc_retentionscorehistoryname;",
											"    console.log(\"Score history name is:\" +scoreHistoryName);",
											"",
											"    var lastCaluclatedDate=jsonData.cmc_lastcalculateddate;",
											"    console.log(\"Last calculated date is: \"+lastCaluclatedDate);",
											"    ",
											"",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var dt = new Date();\r",
											"        dt.setDate( dt.getDate() - 3 );\r",
											"\r",
											"         console.log(\"date: \"+dt);\r",
											"\r",
											"    var convertedLastCalculatedDate =dt.getFullYear()+\"-\"+(\"0\" + (dt.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dt.getDate())).slice(-2);\r",
											"     console.log(\"date: \"+convertedLastCalculatedDate);\r",
											"\r",
											"     var concatenatetime=convertedLastCalculatedDate;\r",
											"     console.log(\"datetime: \"+concatenatetime);\r",
											"\r",
											"     pm.environment.set('LastCalculatedDate',concatenatetime);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cmc_lastcalculateddate\": \"{{LastCalculatedDate}}\"\r\n}"
								},
								"url": {
									"raw": "{{Eresource_URL}}cmc_retentionscorehistories({{gretentionScoreHistoryId1a}})",
									"host": [
										"{{Eresource_URL}}cmc_retentionscorehistories({{gretentionScoreHistoryId1a}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active ScoreHistories for Account 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var score,scoreHistoryName, retentionScoreHistoryId, targetAttribute,lastCalculatedDate, createdOn,autoname,scoreDefinition ;",
											"",
											"pm.test(\"Check the score history record for Account\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    var result=jsonData.cmc_account_retentionscorehistory_accountid;",
											"",
											"    if(result.length===1)",
											"    {",
											"        retentionScoreHistoryId= result[0].cmc_retentionscorehistoryid;",
											"        score= result[0].cmc_score;",
											"        scoreHistoryName= result[0].cmc_retentionscorehistoryname;",
											"        targetAttribute= result[0].cmc_targetattribute;",
											"        lastCalculatedDate= result[0].cmc_lastcalculateddate;",
											"        createdOn= result[0].createdon;",
											"        scoreDefinition=result[0]._cmc_scoredefinitionid_value;",
											"        ",
											"        console.log(\"Target score in Score history record is:\" +score);",
											"        console.log(\"Score history name is:\" +scoreHistoryName);",
											"        console.log(\"Target Attribute is:\" +targetAttribute);",
											"        console.log(\"Last Calculated date is:\" +lastCalculatedDate);",
											"        console.log(\"created on is:\" +createdOn);",
											"        ",
											"    }",
											"    else",
											"    {",
											"        console.log(\"Active Score history record does't exist\");",
											"        throw new Error();",
											"    }",
											"",
											"    ",
											"});",
											"pm.globals.set('gretentionScoreHistoryId1b',retentionScoreHistoryId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId11}})?$expand=cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId11}})"
									],
									"query": [
										{
											"key": "$expand",
											"value": "cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update score history of Account  2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update the last calculated date for score history record in Account\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    ",
											"    var scoreHistoryName=jsonData.cmc_retentionscorehistoryname;",
											"    console.log(\"Score history name is:\" +scoreHistoryName);",
											"",
											"    var lastCaluclatedDate=jsonData.cmc_lastcalculateddate;",
											"    console.log(\"Last calculated date is: \"+lastCaluclatedDate);",
											"    ",
											"",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var dt = new Date();\r",
											"        dt.setDate( dt.getDate() - 3 );\r",
											"\r",
											"         console.log(\"date: \"+dt);\r",
											"\r",
											"    var convertedLastCalculatedDate =dt.getFullYear()+\"-\"+(\"0\" + (dt.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dt.getDate())).slice(-2);\r",
											"     console.log(\"date: \"+convertedLastCalculatedDate);\r",
											"\r",
											"     var concatenatetime=convertedLastCalculatedDate;\r",
											"     console.log(\"datetime: \"+concatenatetime);\r",
											"\r",
											"     pm.environment.set('LastCalculatedDate',concatenatetime);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cmc_lastcalculateddate\": \"{{LastCalculatedDate}}\"\r\n}"
								},
								"url": {
									"raw": "{{Eresource_URL}}cmc_retentionscorehistories({{gretentionScoreHistoryId1b}})",
									"host": [
										"{{Eresource_URL}}cmc_retentionscorehistories({{gretentionScoreHistoryId1b}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active ScoreHistories for Account 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var score,scoreHistoryName, retentionScoreHistoryId, targetAttribute,lastCalculatedDate, createdOn,autoname,scoreDefinition ;",
											"",
											"pm.test(\"Check the score history record for Account\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    var result=jsonData.cmc_account_retentionscorehistory_accountid;",
											"",
											"    if(result.length===1)",
											"    {",
											"        retentionScoreHistoryId= result[0].cmc_retentionscorehistoryid;",
											"        score= result[0].cmc_score;",
											"        scoreHistoryName= result[0].cmc_retentionscorehistoryname;",
											"        targetAttribute= result[0].cmc_targetattribute;",
											"        lastCalculatedDate= result[0].cmc_lastcalculateddate;",
											"        createdOn= result[0].createdon;",
											"        scoreDefinition=result[0]._cmc_scoredefinitionid_value;",
											"        ",
											"        console.log(\"Target score in Score history record is:\" +score);",
											"        console.log(\"Score history name is:\" +scoreHistoryName);",
											"        console.log(\"Target Attribute is:\" +targetAttribute);",
											"        console.log(\"Last Calculated date is:\" +lastCalculatedDate);",
											"        console.log(\"created on is:\" +createdOn);",
											"",
											"        ",
											"    }",
											"    else",
											"    {",
											"        console.log(\"Active Score history record does't exist\");",
											"        throw new Error();",
											"    }",
											"",
											"    ",
											"});",
											"pm.globals.set('gretentionScoreHistoryId1c',retentionScoreHistoryId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId21}})?$expand=cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId21}})"
									],
									"query": [
										{
											"key": "$expand",
											"value": "cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update score history of Account  3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update the last calculated date for score history record in Account\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    ",
											"    var scoreHistoryName=jsonData.cmc_retentionscorehistoryname;",
											"    console.log(\"Score history name is:\" +scoreHistoryName);",
											"",
											"    var lastCaluclatedDate=jsonData.cmc_lastcalculateddate;",
											"    console.log(\"Last calculated date is: \"+lastCaluclatedDate);",
											"    ",
											"",
											"    ",
											"});",
											"setTimeout(function(){}, 130000); ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var dt = new Date();\r",
											"        dt.setDate( dt.getDate() - 3 );\r",
											"\r",
											"         console.log(\"date: \"+dt);\r",
											"\r",
											"    var convertedLastCalculatedDate =dt.getFullYear()+\"-\"+(\"0\" + (dt.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dt.getDate())).slice(-2);\r",
											"     console.log(\"date: \"+convertedLastCalculatedDate);\r",
											"\r",
											"     var concatenatetime=convertedLastCalculatedDate;\r",
											"     console.log(\"datetime: \"+concatenatetime);\r",
											"\r",
											"     pm.environment.set('LastCalculatedDate',concatenatetime);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cmc_lastcalculateddate\": \"{{LastCalculatedDate}}\"\r\n}"
								},
								"url": {
									"raw": "{{Eresource_URL}}cmc_retentionscorehistories({{gretentionScoreHistoryId1c}})",
									"host": [
										"{{Eresource_URL}}cmc_retentionscorehistories({{gretentionScoreHistoryId1c}})"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verify Target and Score history in Account records",
					"item": [
						{
							"name": "Verify target Attribute value in Account 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var currentretentionscoredate, numberofemployees;",
											"pm.test(\"Retention Score\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"    var jsonData = JSON.parse(responseBody);",
											"    numberofemployees = jsonData.numberofemployees;",
											"    currentretentionscoredate = jsonData.cmc_currentretentionscoredate;",
											"    console.log('number of employees:' + numberofemployees);",
											"    console.log('currentretentionscoredate:' + currentretentionscoredate);",
											"",
											"    pm.test(\"Scores awarded to Account 1\", function()",
											"        {",
											"            pm.expect(numberofemployees).to.equal(21);",
											"        });",
											"});",
											"",
											"pm.globals.set('gnumberofemployees1', numberofemployees);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId}})",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active ScoreHistories for Account 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var score,scoreHistoryName, retentionScoreHistoryId, targetAttribute,lastCalculatedDate, createdOn,autoname,scoreDefinition ;",
											"",
											"pm.test(\"Check the score history record for Account\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    var result=jsonData.cmc_account_retentionscorehistory_accountid;",
											"",
											"    if(result.length===1)",
											"    {",
											"        retentionScoreHistoryId= result[0].cmc_retentionscorehistoryid;",
											"        score= result[0].cmc_score;",
											"        scoreHistoryName= result[0].cmc_retentionscorehistoryname;",
											"        targetAttribute= result[0].cmc_targetattribute;",
											"        lastCalculatedDate= result[0].cmc_lastcalculateddate;",
											"        createdOn= result[0].createdon;",
											"        scoreDefinition=result[0]._cmc_scoredefinitionid_value;",
											"",
											"        var dateFromResponse = new Date(lastCalculatedDate);",
											"        var convertedLastCalculatedDate =dateFromResponse.getFullYear()+\"-\"+(\"0\" + (dateFromResponse.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dateFromResponse.getDate())).slice(-2);",
											"        ",
											"        console.log(\"Target score in Score history record is:\" +score);",
											"        console.log(\"Score history name is:\" +scoreHistoryName);",
											"        console.log(\"Target Attribute is:\" +targetAttribute);",
											"        console.log(\"Last Calculated date is:\" +lastCalculatedDate);",
											"        console.log(\"created on is:\" +createdOn);",
											"",
											"        var actualScoreDefintion=pm.globals.get('gscoredefinitionid');",
											"        var actualTargetAttribute=\"numberofemployees\";",
											"        var actualcalculatedDate=pm.environment.get('timestamp');",
											"",
											"        console.log(\"actual calculated date is: \"+actualcalculatedDate);",
											"",
											"        pm.test(\"Last Calculated Date check\", function()",
											"        {",
											"            pm.expect(actualcalculatedDate).to.equal(convertedLastCalculatedDate);",
											"        });  ",
											"",
											"        //Autonme Workflow check for Score History Name",
											"        nameString =scoreHistoryName.split(\"-\");",
											"        ",
											"        autoname= pm.globals.get('gAccname')+\" \"+\"-\"+\" \"+score+\" \"+\"-\"+nameString[nameString.length-1];      ",
											"        console.log(\"Score History Autoname is: \"+autoname);",
											"               ",
											"        pm.test(\"Autonme Workflow check for Score History Name\", function()",
											"        {",
											"            pm.expect(scoreHistoryName).to.equal(autoname);",
											"        });",
											"         ",
											"        pm.test(\"Score value in Score History record\", function()",
											"        {",
											"            pm.expect(score).to.equal(21);",
											"        });",
											"",
											"        pm.test(\"Score Definition check\", function()",
											"        {",
											"            pm.expect(actualScoreDefintion).to.equal(scoreDefinition);",
											"        });",
											"",
											"        pm.test(\"Target Attribute check\", function()",
											"        {",
											"            pm.expect(actualTargetAttribute).to.equal(targetAttribute);",
											"        });   ",
											"        ",
											"    }",
											"    else",
											"    {",
											"        console.log(\"Active Score history record does't exist\");",
											"        throw new Error();",
											"    }",
											"",
											"    ",
											"});",
											"",
											"pm.globals.set('gretentionScoreHistoryId1',retentionScoreHistoryId);",
											"pm.globals.set('gscore1',score);",
											"pm.globals.set('lastCalculatedDate1',lastCalculatedDate);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId}})?$expand=cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId}})"
									],
									"query": [
										{
											"key": "$expand",
											"value": "cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify target Attribute value in Account 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var currentretentionscoredate, numberofemployees;",
											"pm.test(\"Retention Score\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"     numberofemployees =jsonData.numberofemployees;",
											"     currentretentionscoredate =jsonData.cmc_currentretentionscoredate;",
											"      console.log('number of employees:'+numberofemployees);",
											"      console.log('currentretentionscoredate:'+currentretentionscoredate);",
											"      //var oldNumberOfEmployees=pm.globals.get('gnumberofemployees');",
											"      ",
											"    pm.test(\"Scores awarded to Account 1\", function()",
											"        {",
											"            pm.expect(numberofemployees).to.equal(51);",
											"        });",
											" ",
											"});",
											"pm.globals.set('gnumberofemployees2',numberofemployees);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId11}})",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId11}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active ScoreHistories for Account 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var score,scoreHistoryName, retentionScoreHistoryId, targetAttribute,lastCalculatedDate, createdOn,autoname,scoreDefinition ;",
											"",
											"pm.test(\"Check the score history record for Account\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    var result=jsonData.cmc_account_retentionscorehistory_accountid;",
											"",
											"    if(result.length===1)",
											"    {",
											"       retentionScoreHistoryId= result[0].cmc_retentionscorehistoryid;",
											"        score= result[0].cmc_score;",
											"        scoreHistoryName= result[0].cmc_retentionscorehistoryname;",
											"        targetAttribute= result[0].cmc_targetattribute;",
											"        lastCalculatedDate= result[0].cmc_lastcalculateddate;",
											"        createdOn= result[0].createdon;",
											"        scoreDefinition=result[0]._cmc_scoredefinitionid_value;",
											"",
											"        var dateFromResponse = new Date(lastCalculatedDate);",
											"        var convertedLastCalculatedDate =dateFromResponse.getFullYear()+\"-\"+(\"0\" + (dateFromResponse.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dateFromResponse.getDate())).slice(-2);",
											"        ",
											"        console.log(\"Target score in Score history record is:\" +score);",
											"        console.log(\"Score history name is:\" +scoreHistoryName);",
											"        console.log(\"Target Attribute is:\" +targetAttribute);",
											"        console.log(\"Last Calculated date is:\" +lastCalculatedDate);",
											"        console.log(\"created on is:\" +createdOn);",
											"",
											"        var actualScoreDefintion=pm.globals.get('gscoredefinitionid');",
											"        var actualTargetAttribute=\"numberofemployees\";",
											"        var actualcalculatedDate=pm.environment.get('timestamp');",
											"",
											"        console.log(\"actual calculated date is: \"+actualcalculatedDate);",
											"",
											"        pm.test(\"Last Calculated Date check\", function()",
											"        {",
											"            pm.expect(actualcalculatedDate).to.equal(convertedLastCalculatedDate);",
											"        }); ",
											"",
											"        //Autonme Workflow check for Score History Name",
											"        nameString =scoreHistoryName.split(\"-\");",
											"        ",
											"        autoname= pm.globals.get('gAccname11')+\" \"+\"-\"+\" \"+score+\" \"+\"-\"+nameString[nameString.length-1];      ",
											"        console.log(\"Score History Autoname is: \"+autoname);",
											"               ",
											"        pm.test(\"Autonme Workflow check for Score History Name\", function()",
											"        {",
											"            pm.expect(scoreHistoryName).to.equal(autoname);",
											"        });",
											"         ",
											"        pm.test(\"Score value in Score History record\", function()",
											"        {",
											"            pm.expect(score).to.equal(51);",
											"        });",
											"",
											"        pm.test(\"Score Definition check\", function()",
											"        {",
											"            pm.expect(actualScoreDefintion).to.equal(scoreDefinition);",
											"        });",
											"",
											"        pm.test(\"Target Attribute check\", function()",
											"        {",
											"            pm.expect(actualTargetAttribute).to.equal(targetAttribute);",
											"        });   ",
											"        ",
											"    }",
											"    else",
											"    {",
											"        console.log(\"Active Score history record does't exist\");",
											"        throw new Error();",
											"    }",
											"",
											"    ",
											"});",
											"",
											"pm.globals.set('gretentionScoreHistoryId2',retentionScoreHistoryId);",
											"pm.globals.set('gscore2',score);",
											"pm.globals.set('lastCalculatedDate2',lastCalculatedDate);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId11}})?$expand=cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId11}})"
									],
									"query": [
										{
											"key": "$expand",
											"value": "cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify target Attribute value in Account 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var currentretentionscoredate, numberofemployees;",
											"pm.test(\"Retention Score\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"     numberofemployees =jsonData.numberofemployees;",
											"     currentretentionscoredate =jsonData.cmc_currentretentionscoredate;",
											"      console.log('number of employees:'+numberofemployees);",
											"      console.log('currentretentionscoredate:'+currentretentionscoredate);",
											"      //var oldNumberOfEmployees=pm.globals.get('gnumberofemployees');",
											"      ",
											"    pm.test(\"Scores awarded to Account 1\", function()",
											"        {",
											"            pm.expect(numberofemployees).to.equal(21);",
											"        });",
											" ",
											"});",
											"",
											"",
											"pm.globals.set('gnumberofemployees3',numberofemployees);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId21}})",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId21}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active ScoreHistories for Account 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var score,scoreHistoryName, retentionScoreHistoryId, targetAttribute,lastCalculatedDate, createdOn,autoname,scoreDefinition ;",
											"",
											"pm.test(\"Check the score history record for Account\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    var result=jsonData.cmc_account_retentionscorehistory_accountid;",
											"",
											"    if(result.length===1)",
											"    {",
											"        retentionScoreHistoryId= result[0].cmc_retentionscorehistoryid;",
											"        score= result[0].cmc_score;",
											"        scoreHistoryName= result[0].cmc_retentionscorehistoryname;",
											"        targetAttribute= result[0].cmc_targetattribute;",
											"        lastCalculatedDate= result[0].cmc_lastcalculateddate;",
											"        createdOn= result[0].createdon;",
											"        scoreDefinition=result[0]._cmc_scoredefinitionid_value;",
											"",
											"        var dateFromResponse = new Date(lastCalculatedDate);",
											"        var convertedLastCalculatedDate =dateFromResponse.getFullYear()+\"-\"+(\"0\" + (dateFromResponse.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dateFromResponse.getDate())).slice(-2);",
											"        ",
											"        console.log(\"Target score in Score history record is:\" +score);",
											"        console.log(\"Score history name is:\" +scoreHistoryName);",
											"        console.log(\"Target Attribute is:\" +targetAttribute);",
											"        console.log(\"Last Calculated date is:\" +lastCalculatedDate);",
											"        console.log(\"created on is:\" +createdOn);",
											"",
											"        var actualScoreDefintion=pm.globals.get('gscoredefinitionid');",
											"        var actualTargetAttribute=\"numberofemployees\";",
											"        var actualcalculatedDate=pm.environment.get('timestamp');",
											"",
											"        console.log(\"actual calculated date is: \"+actualcalculatedDate);",
											"",
											"        pm.test(\"Last Calculated Date check\", function()",
											"        {",
											"            pm.expect(actualcalculatedDate).to.equal(convertedLastCalculatedDate);",
											"        }); ",
											"",
											"        //Autonme Workflow check for Score History Name",
											"        nameString =scoreHistoryName.split(\"-\");",
											"        ",
											"        autoname= pm.globals.get('gAccname21')+\" \"+\"-\"+\" \"+score+\" \"+\"-\"+nameString[nameString.length-1];      ",
											"        console.log(\"Score History Autoname is: \"+autoname);",
											"               ",
											"        pm.test(\"Autonme Workflow check for Score History Name\", function()",
											"        {",
											"            pm.expect(scoreHistoryName).to.equal(autoname);",
											"        });",
											"         ",
											"        pm.test(\"Score value in Score History record\", function()",
											"        {",
											"            pm.expect(score).to.equal(21);",
											"        });",
											"",
											"        pm.test(\"Score Definition check\", function()",
											"        {",
											"            pm.expect(actualScoreDefintion).to.equal(scoreDefinition);",
											"        });",
											"",
											"        pm.test(\"Target Attribute check\", function()",
											"        {",
											"            pm.expect(actualTargetAttribute).to.equal(targetAttribute);",
											"        });   ",
											"        ",
											"    }",
											"    else",
											"    {",
											"        console.log(\"Active Score history record does't exist\");",
											"        throw new Error();",
											"    }",
											"",
											"    ",
											"});",
											"",
											"pm.globals.set('gretentionScoreHistoryId3',retentionScoreHistoryId);",
											"pm.globals.set('gscore3',score);",
											"pm.globals.set('lastCalculatedDate3',lastCalculatedDate);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId21}})?$expand=cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId21}})"
									],
									"query": [
										{
											"key": "$expand",
											"value": "cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify target Attribute value in Account 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var currentretentionscoredate, numberofemployees;",
											"pm.test(\"Retention Score\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"     numberofemployees =jsonData.numberofemployees;",
											"     currentretentionscoredate =jsonData.cmc_currentretentionscoredate;",
											"      console.log('number of employees:'+numberofemployees);",
											"      console.log('currentretentionscoredate:'+currentretentionscoredate);",
											"      //var oldNumberOfEmployees=pm.globals.get('gnumberofemployees');",
											"      ",
											"    pm.test(\"Scores awarded to Account 1\", function()",
											"        {",
											"            pm.expect(numberofemployees).to.equal(null);",
											"        });",
											" ",
											"});",
											"",
											"",
											"pm.globals.set('gnumberofemployees4',numberofemployees);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId31}})",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId31}})"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active ScoreHistories for Account 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check the score history record for Account\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    var result=jsonData.cmc_account_retentionscorehistory_accountid;",
											"",
											"   if(result.length===1)",
											"    {",
											"        retentionScoreHistoryId= result[0].cmc_retentionscorehistoryid;",
											"        score= result[0].cmc_score;",
											"        scoreHistoryName= result[0].cmc_retentionscorehistoryname;",
											"        targetAttribute= result[0].cmc_targetattribute;",
											"        lastCalculatedDate= result[0].cmc_lastcalculateddate;",
											"        createdOn= result[0].createdon;",
											"        scoreDefinition=result[0]._cmc_scoredefinitionid_value;",
											"",
											"        var dateFromResponse = new Date(lastCalculatedDate);",
											"        var convertedLastCalculatedDate =dateFromResponse.getFullYear()+\"-\"+(\"0\" + (dateFromResponse.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dateFromResponse.getDate())).slice(-2);",
											"        ",
											"        console.log(\"Target score in Score history record is:\" +score);",
											"        console.log(\"Score history name is:\" +scoreHistoryName);",
											"        console.log(\"Target Attribute is:\" +targetAttribute);",
											"        console.log(\"Last Calculated date is:\" +lastCalculatedDate);",
											"        console.log(\"created on is:\" +createdOn);",
											"",
											"        var actualScoreDefintion=pm.globals.get('gscoredefinitionid');",
											"        var actualTargetAttribute=\"numberofemployees\";",
											"        var actualcalculatedDate=pm.environment.get('timestamp');",
											"",
											"        console.log(\"actual calculated date is: \"+actualcalculatedDate);",
											"",
											"        pm.test(\"Last Calculated Date check\", function()",
											"        {",
											"            pm.expect(actualcalculatedDate).to.equal(convertedLastCalculatedDate);",
											"        });  ",
											"",
											"        //Autonme Workflow check for Score History Name",
											"        nameString =scoreHistoryName.split(\"-\");",
											"        ",
											"        autoname= pm.globals.get('gAccname31')+\" \"+\"-\"+\" \"+\" \"+\"-\"+nameString[nameString.length-1];      ",
											"         ",
											"        console.log(\"Score History Autoname is: \"+autoname);",
											"               ",
											"        pm.test(\"Autonme Workflow check for Score History Name\", function()",
											"        {",
											"            pm.expect(scoreHistoryName).to.equal(autoname);",
											"        });",
											"         ",
											"        pm.test(\"Score value in Score History record\", function()",
											"        {",
											"            pm.expect(score).to.equal(null);",
											"        });",
											"",
											"        pm.test(\"Score Definition check\", function()",
											"        {",
											"            pm.expect(actualScoreDefintion).to.equal(scoreDefinition);",
											"        });",
											"",
											"        pm.test(\"Target Attribute check\", function()",
											"        {",
											"            pm.expect(actualTargetAttribute).to.equal(targetAttribute);",
											"        });   ",
											"        ",
											"    }",
											"    else",
											"    {",
											"        console.log(\"Active Score history record does't exist\");",
											"        throw new Error();",
											"    }",
											"    ",
											"",
											"    ",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Eresource_URL}}accounts({{gaccountId31}})?$expand=cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)",
									"host": [
										"{{Eresource_URL}}accounts({{gaccountId31}})"
									],
									"query": [
										{
											"key": "$expand",
											"value": "cmc_account_retentionscorehistory_accountid($filter=statecode eq 0)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verify 'Date Last Run' & 'last recalculation date'",
					"item": [
						{
							"name": "Verify 'Date Last Run' & 'last recalculation date' in Score Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var dateLastRun,lastRecalculationDate;",
											" ",
											"pm.test(\"Fetch Score definition Record\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    ",
											"    dateLastRun=jsonData.cmc_datelastrun;",
											"    lastRecalculationDate=jsonData.cmc_lastrecalculationdate;",
											"",
											"    var dateFromResponse = new Date(dateLastRun);",
											"    var convertedLastCalculatedDate =dateFromResponse.getFullYear()+\"-\"+(\"0\" + (dateFromResponse.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dateFromResponse.getDate())).slice(-2);",
											"",
											"    var actualcalculatedDate=pm.environment.get('timestamp');",
											"",
											"        console.log(\"actual calculated date is: \"+actualcalculatedDate);",
											"",
											"        pm.test(\"Last Calculated Date check\", function()",
											"        {",
											"            pm.expect(actualcalculatedDate).to.equal(convertedLastCalculatedDate);",
											"        }); ",
											"",
											"    var dateFromResponse1 = new Date(lastRecalculationDate);",
											"    var convertedLastRecalculationDate =dateFromResponse1.getFullYear()+\"-\"+(\"0\" + (dateFromResponse1.getMonth() + 1)).slice(-2)+\"-\"+(\"0\" + (dateFromResponse1.getDate())).slice(-2);",
											"   ",
											"        pm.test(\"Last reCalculated Date check\", function()",
											"        {",
											"            pm.expect(actualcalculatedDate).to.equal(convertedLastRecalculationDate);",
											"        }); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})",
									"host": [
										"{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Deactivate ScoreDefinition record",
			"item": [
				{
					"name": "Deactivate ScoreDefinition record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var scoredefinitionid;",
									"pm.test(\"Deactivate Score Definition\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    scoredefinitionid =jsonData.cmc_scoredefinitionid;",
									"    console.log('Score definition ID:' +scoredefinitionid);",
									"    var scoredefinitionname= jsonData.cmc_scoredefinitionname;",
									"    console.log('Score Definition that is created is:' +scoredefinitionname);",
									"    var scheduleinterval=jsonData.cmc_scheduleinterval;",
									"    pm.globals.set('gscheduleinterval',scheduleinterval);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"description": " ",
								"key": "OData-Version",
								"value": "4.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"statecode\": 1,\r\n    \"statuscode\": 2\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})",
							"host": [
								"{{Eresource_URL}}cmc_scoredefinitions({{gscoredefinitionid}})"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}