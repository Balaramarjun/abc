{
	"info": {
		"_postman_id": "91b18645-fbed-43a3-b582-a946ea3a064a",
		"name": "TC_764851_CampusSurvey",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-requisite",
			"item": [
				{
					"name": "GetToken_DCRM Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setGlobalVariable('gaccess_token', data.access_token);",
									"",
									"//pm.environment.set(\"Eaccess_token\", data.access_token);",
									"console.log(pm.globals.get(\"gaccess_token\"));",
									"",
									"//Genarate global session value",
									"",
									"var number = Math.floor(Math.random() * 1000);",
									"pm.globals.set('globalsessionvalue',number)",
									"",
									"console.log(pm.globals.get(\"globalsessionvalue\"));",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{Eadmin_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{Eadmin_secret}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{Eresource}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{Eredirectid}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{Eredirectid}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Contact of type Faculty",
			"item": [
				{
					"name": "Create Contact 1 of type faculty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contactid;",
									"var contactName;",
									"pm.test(\"Contact 1 Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    contactid = jsonData.contactid;",
									"    contactName = jsonData.fullname;",
									"});",
									" ",
									"pm.globals.set('gcontactid1',contactid);",
									"console.log(\"Contact ID is: \"+contactid);",
									"console.log(\"Contact Name is: \"+contactName);",
									"pm.globals.set('contactName1',contactName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastname\": \"Faculty-1-{{$randomLastName}}\",\r\n    \"firstname\": \"CampusSurvey\",\r\n    \"mshied_contacttype\": \"494280003\",\r\n    \"emailaddress1\": \"1{{$randomEmail}}\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}contacts",
							"host": [
								"{{Eresource_URL}}contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contact 2 of type faculty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contactid;",
									"var contactName;",
									"pm.test(\"Contact 2 Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    contactid = jsonData.contactid;",
									"    contactName = jsonData.fullname;",
									"});",
									" ",
									"pm.globals.set('gcontactid2',contactid);",
									"console.log(\"Contact ID is: \"+contactid);",
									"console.log(\"Contact Name is: \"+contactName);",
									"pm.globals.set('contactName2',contactName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastname\": \"Faculty-2-{{$randomLastName}}\",\r\n    \"firstname\": \"CampusSurvey\",\r\n    \"mshied_contacttype\": \"494280003\",\r\n    \"emailaddress1\": \"2 {{$randomEmail}}\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}contacts",
							"host": [
								"{{Eresource_URL}}contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contact 3 of type faculty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contactid;",
									"var contactName;",
									"pm.test(\"Contact 3 Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    contactid = jsonData.contactid;",
									"    contactName = jsonData.fullname;",
									"});",
									" ",
									"pm.globals.set('gcontactid3',contactid);",
									"console.log(\"Contact ID is: \"+contactid);",
									"console.log(\"Contact Name is: \"+contactName);",
									"pm.globals.set('contactName3',contactName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastname\": \"Faculty-3-{{$randomLastName}}\",\r\n    \"firstname\": \"CampusSurvey\",\r\n    \"mshied_contacttype\": \"494280003\",\r\n    \"emailaddress1\": \"3 {{$randomEmail}}\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}contacts",
							"host": [
								"{{Eresource_URL}}contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contact 4 of type faculty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contactid;",
									"var contactName;",
									"pm.test(\"Contact 4 Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    contactid = jsonData.contactid;",
									"    contactName = jsonData.fullname;",
									"});",
									" ",
									"pm.globals.set('gcontactid4',contactid);",
									"console.log(\"Contact ID is: \"+contactid);",
									"console.log(\"Contact Name is: \"+contactName);",
									"pm.globals.set('contactName4',contactName);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastname\": \"Faculty-4-{{$randomLastName}}\",\r\n    \"firstname\": \"CampusSurvey\",\r\n    \"mshied_contacttype\": \"494280003\",\r\n    \"emailaddress1\": \"4 {{$randomEmail}}\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}contacts",
							"host": [
								"{{Eresource_URL}}contacts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Contact of type Student",
			"item": [
				{
					"name": "Get SourceCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var sourceCategoryid;",
									"",
									"pm.test(\"Source category record Fetched\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    sourceCategoryid = jsonData.value[0].cmc_sourcecategoryid;",
									"    var sourceCategoryName = jsonData.value[0].cmc_sourcecategoryname;",
									"    console.log('SourceCategory Name is: ' + sourceCategoryName);",
									"",
									"});",
									"",
									"pm.globals.set('gsourceCategoryid1', sourceCategoryid);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}cmc_sourcecategories",
							"host": [
								"{{Eresource_URL}}cmc_sourcecategories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SourceMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var sourceMethodid;",
									"",
									"pm.test(\"Source Method record Fetched\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    sourceMethodid = jsonData.value[0].cmc_sourcemethodid;",
									"    var sourceMethodName = jsonData.value[0].cmc_sourcemethodname;",
									"    console.log('SourceMethod Name is: ' + sourceMethodName);",
									"",
									"});",
									"",
									"pm.globals.set('gsourceMethodid1', sourceMethodid);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}cmc_sourcemethods",
							"host": [
								"{{Eresource_URL}}cmc_sourcemethods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var programid;",
									"",
									"pm.test(\"Program record Fetched\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    programid = jsonData.value[0].mshied_programid;",
									"    var programName = jsonData.value[0].mshied_name;",
									"",
									"    console.log('Program Name is: ' + programName);",
									"",
									"});",
									"",
									"pm.globals.set('gprogramid1', programid);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}mshied_programs",
							"host": [
								"{{Eresource_URL}}mshied_programs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contact of type Student 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contactid;",
									"pm.test(\"Contact Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    contactid = jsonData.contactid;",
									"    var contactName = jsonData.fullname;",
									"    console.log(\"Contact name is: \" + contactName);",
									"",
									"    var lmslaastaccess=jsonData.cmc_lmslastaccess;",
									"    var genderidentity=jsonData.cmc_genderidentity;",
									"    var genderidentityother= jsonData.cmc_genderidentityother;",
									"    var preferredpronouns=jsonData.cmc_preferredpronouns;",
									"    var preferredpronounsother=jsonData.cmc_preferredpronounsother;",
									"",
									"    console.log(\"lmslaastaccess: \"+lmslaastaccess+\", genderidentity: \"+genderidentity+\", genderidentityother: \"+genderidentityother+\", preferredpronouns: \"+preferredpronouns+\", preferredpronounsother: \"+preferredpronounsother);",
									"",
									"",
									"   ",
									"});",
									" pm.globals.set('gcontactidStudent', contactid);",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"lastname\": \"Student-1-{{$randomLastName}}\",\r\n\t\"firstname\": \"Campus Survey\",\r\n\t\"mshied_contacttype\": \"494280011\",\r\n\t\"cmc_sourcecategoryid@odata.bind\": \"/cmc_sourcecategories({{gsourceCategoryid1}})\",\r\n\t\"cmc_sourcemethodid@odata.bind\": \"/cmc_sourcemethods({{gsourceMethodid1}})\",\r\n\t\"emailaddress1\": \"5 {{$randomEmail}}\",\r\n    \"cmc_lmslastaccess\": null,\r\n    \"cmc_genderidentity\": null,\r\n    \"cmc_genderidentityother\":\"GenderOther {{$randomInt}}\",\r\n    \"cmc_preferredpronouns\": null,\r\n    \"cmc_preferredpronounsother\": \"pronounOther {{$randomInt}}\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}contacts",
							"host": [
								"{{Eresource_URL}}contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Academic period 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var academicperiodid,academicPeriodname;",
									"",
									"pm.test(\"Academicperiodid Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    academicperiodid = jsonData.mshied_academicperiodid;",
									"    academicPeriodname=jsonData.mshied_name;",
									"",
									"    console.log(\"Academic Period Name: \"+academicPeriodname);",
									" ",
									"});",
									"",
									"pm.globals.set('gacademicperiodid',academicperiodid);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var moment = require('moment');\r",
									"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"pm.environment.set(\"timestampEndDate\", moment().add(100, 'days').format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"mshied_code\": \"{{$randomInt}}-{{$randomInt}}-{{$randomInt}}-A1\",\r\n    \"mshied_enddate\": \"{{timestampEndDate}}\",\r\n    \"mshied_name\": \"API-{{$randomInt}}- CampusSurvey-{{$randomInt}}\",\r\n    \"mshied_startdate\": \"{{timestamp}}\"\r\n \r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_academicperiods",
							"host": [
								"{{Eresource_URL}}mshied_academicperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Academic Period Details to Contact 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var academicPeriodDetailid,academicPeriodDetailname;",
									"pm.test(\"Academic Period Details Created for a Student record\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    academicPeriodDetailid = jsonData.mshied_academicperioddetailsid;",
									"    academicPeriodDetailname = jsonData.mshied_name;",
									"    console.log(\"Academic Period Detail name is: \" + academicPeriodDetailname);",
									"",
									"    var lmsnotermactivity=jsonData.cmc_lmsnotermactivity;",
									"    var lmsnotermassignment=jsonData.cmc_lmsnotermassignment;",
									"",
									"    console.log(\"lmsnotermactivity: \"+lmsnotermactivity+\", lmsnotermassignment: \"+lmsnotermassignment);  ",
									"    ",
									"});",
									"",
									"pm.globals.set('gacademicPeriodDetailid1', academicPeriodDetailid);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"cmc_residence\": 1,\r\n\t\"cmc_scholarshipcodes\": \"1\",\r\n\t\"mshied_AcademicPeriodID@odata.bind\": \"/mshied_academicperiods({{gacademicperiodid}})\",\r\n\t\"mshied_ProgramId@odata.bind\": \"/mshied_programs({{gprogramid1}})\",\r\n\t\"mshied_StudentId@odata.bind\": \"/contacts({{gcontactidStudent}})\",\r\n    \"cmc_lmsnotermactivity\": 175490000,\r\n    \"cmc_lmsnotermassignment\": 175490001\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_academicperioddetailses",
							"host": [
								"{{Eresource_URL}}mshied_academicperioddetailses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contact of type Student 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Contact Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    var contactid = jsonData.contactid;",
									"    var contactName = jsonData.fullname;",
									"    console.log(\"Contact name is: \" + contactName);",
									"",
									"",
									"",
									"    pm.globals.set('gcontactidStudent2', contactid);",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"lastname\": \"Student-2-{{$randomLastName}}\",\r\n\t\"firstname\": \"Campus Survey\",\r\n\t\"mshied_contacttype\": \"494280011\",\r\n\t\"cmc_sourcecategoryid@odata.bind\": \"/cmc_sourcecategories({{gsourceCategoryid1}})\",\r\n\t\"cmc_sourcemethodid@odata.bind\": \"/cmc_sourcemethods({{gsourceMethodid1}})\",\r\n\t\"emailaddress1\": \"6 {{$randomEmail}}\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}contacts",
							"host": [
								"{{Eresource_URL}}contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Academic period 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var academicperiodid,academicPeriodname;",
									"",
									"pm.test(\"Academicperiodid Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    academicperiodid = jsonData.mshied_academicperiodid;",
									"    academicPeriodname=jsonData.mshied_name;",
									"",
									"    console.log(\"Academic Period Name: \"+academicPeriodname);",
									" ",
									"});",
									"",
									"pm.globals.set('gacademicperiodid2',academicperiodid);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var moment = require('moment');\r",
									"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"pm.environment.set(\"timestampEndDate\", moment().add(100, 'days').format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"mshied_code\": \"{{$randomInt}}-{{$randomInt}}-{{$randomInt}}-A2\",\r\n    \"mshied_enddate\": \"{{timestampEndDate}}\",\r\n    \"mshied_name\": \"API-{{$randomInt}}- CampusSurvey-{{$randomInt}}\",\r\n    \"mshied_startdate\": \"{{timestamp}}\"\r\n \r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_academicperiods",
							"host": [
								"{{Eresource_URL}}mshied_academicperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Academic Period Details to Contact 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var academicPeriodDetailid,academicPeriodDetailname;",
									"pm.test(\"Academic Period Details Created for a Student record\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    academicPeriodDetailid = jsonData.mshied_academicperioddetailsid;",
									"    academicPeriodDetailname = jsonData.mshied_name;",
									"    console.log(\"Academic Period Detail name is: \" + academicPeriodDetailname);",
									"",
									"    ",
									"});",
									"",
									"pm.globals.set('gacademicPeriodDetailid2', academicPeriodDetailid);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"cmc_residence\": 1,\r\n\t\"cmc_scholarshipcodes\": \"1\",\r\n\t\"mshied_AcademicPeriodID@odata.bind\": \"/mshied_academicperiods({{gacademicperiodid2}})\",\r\n\t\"mshied_ProgramId@odata.bind\": \"/mshied_programs({{gprogramid1}})\",\r\n\t\"mshied_StudentId@odata.bind\": \"/contacts({{gcontactidStudent2}})\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_academicperioddetailses",
							"host": [
								"{{Eresource_URL}}mshied_academicperioddetailses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contact of type Student 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Contact Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    var contactid = jsonData.contactid;",
									"    var contactName = jsonData.fullname;",
									"    console.log(\"Contact name is: \" + contactName);",
									"",
									"",
									"",
									"    pm.globals.set('gcontactidStudent3', contactid);",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"lastname\": \"Student-3-{{$randomLastName}}\",\r\n\t\"firstname\": \"CS-DML-{{globalsessionvalue}}\",\r\n\t\"mshied_contacttype\": \"494280011\",\r\n\t\"cmc_sourcecategoryid@odata.bind\": \"/cmc_sourcecategories({{gsourceCategoryid1}})\",\r\n\t\"cmc_sourcemethodid@odata.bind\": \"/cmc_sourcemethods({{gsourceMethodid1}})\",\r\n\t\"emailaddress1\": \"7 {{$randomEmail}}\",\r\n    \"cmc_recentsat\":30\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}contacts",
							"host": [
								"{{Eresource_URL}}contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Academic period 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var academicperiodid,academicPeriodname;",
									"",
									"pm.test(\"Academicperiodid Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    academicperiodid = jsonData.mshied_academicperiodid;",
									"    academicPeriodname=jsonData.mshied_name;",
									"",
									"    console.log(\"Academic Period Name: \"+academicPeriodname);",
									" ",
									"});",
									"",
									"pm.globals.set('gacademicperiodid3',academicperiodid);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var moment = require('moment');\r",
									"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"pm.environment.set(\"timestampEndDate\", moment().add(100, 'days').format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"mshied_code\": \"{{$randomInt}}-{{$randomInt}}-{{$randomInt}}-A3\",\r\n    \"mshied_enddate\": \"{{timestampEndDate}}\",\r\n    \"mshied_name\": \"API-{{$randomInt}}- CampusSurvey-{{$randomInt}}\",\r\n    \"mshied_startdate\": \"{{timestamp}}\"\r\n \r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_academicperiods",
							"host": [
								"{{Eresource_URL}}mshied_academicperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Academic Period Details to Contact 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var academicPeriodDetailid,academicPeriodDetailname;",
									"pm.test(\"Academic Period Details Created for a Student record\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    academicPeriodDetailid = jsonData.mshied_academicperioddetailsid;",
									"    academicPeriodDetailname = jsonData.mshied_name;",
									"    console.log(\"Academic Period Detail name is: \" + academicPeriodDetailname);",
									"",
									"    ",
									"});",
									"",
									"pm.globals.set('gacademicPeriodDetailid3', academicPeriodDetailid);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"cmc_residence\": 1,\r\n\t\"cmc_scholarshipcodes\": \"1\",\r\n\t\"mshied_AcademicPeriodID@odata.bind\": \"/mshied_academicperiods({{gacademicperiodid3}})\",\r\n\t\"mshied_ProgramId@odata.bind\": \"/mshied_programs({{gprogramid1}})\",\r\n\t\"mshied_StudentId@odata.bind\": \"/contacts({{gcontactidStudent3}})\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_academicperioddetailses",
							"host": [
								"{{Eresource_URL}}mshied_academicperioddetailses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contact of type Student 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Contact Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    var contactid = jsonData.contactid;",
									"    var contactName = jsonData.fullname;",
									"    console.log(\"Contact name is: \" + contactName);",
									"",
									"",
									"",
									"    pm.globals.set('gcontactidStudent4', contactid);",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"lastname\": \"Student-4-{{$randomLastName}}\",\r\n\t\"firstname\": \"CS-DML-{{globalsessionvalue}}\",\r\n\t\"mshied_contacttype\": \"494280011\",\r\n\t\"cmc_sourcecategoryid@odata.bind\": \"/cmc_sourcecategories({{gsourceCategoryid1}})\",\r\n\t\"cmc_sourcemethodid@odata.bind\": \"/cmc_sourcemethods({{gsourceMethodid1}})\",\r\n\t\"emailaddress1\": \"8 {{$randomEmail}}\",\r\n    \"cmc_recentsat\":40\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}contacts",
							"host": [
								"{{Eresource_URL}}contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Academic period 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var academicperiodid,academicPeriodname;",
									"",
									"pm.test(\"Academicperiodid Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    academicperiodid = jsonData.mshied_academicperiodid;",
									"    academicPeriodname=jsonData.mshied_name;",
									"",
									"    console.log(\"Academic Period Name: \"+academicPeriodname);",
									" ",
									"});",
									"",
									"pm.globals.set('gacademicperiodid4',academicperiodid);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var moment = require('moment');\r",
									"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"pm.environment.set(\"timestampEndDate\", moment().add(100, 'days').format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"mshied_code\": \"{{$randomInt}}-{{$randomInt}}-{{$randomInt}}-A4\",\r\n    \"mshied_enddate\": \"{{timestampEndDate}}\",\r\n    \"mshied_name\": \"API-{{$randomInt}}- CampusSurvey-{{$randomInt}}\",\r\n    \"mshied_startdate\": \"{{timestamp}}\"\r\n \r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_academicperiods",
							"host": [
								"{{Eresource_URL}}mshied_academicperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Academic Period Details to Contact 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var academicPeriodDetailid,academicPeriodDetailname;",
									"pm.test(\"Academic Period Details Created for a Student record\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    academicPeriodDetailid = jsonData.mshied_academicperioddetailsid;",
									"    academicPeriodDetailname = jsonData.mshied_name;",
									"    console.log(\"Academic Period Detail name is: \" + academicPeriodDetailname);",
									"",
									"    ",
									"});",
									"",
									"pm.globals.set('gacademicPeriodDetailid4', academicPeriodDetailid);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"cmc_residence\": 1,\r\n\t\"cmc_scholarshipcodes\": \"1\",\r\n\t\"mshied_AcademicPeriodID@odata.bind\": \"/mshied_academicperiods({{gacademicperiodid4}})\",\r\n\t\"mshied_ProgramId@odata.bind\": \"/mshied_programs({{gprogramid1}})\",\r\n\t\"mshied_StudentId@odata.bind\": \"/contacts({{gcontactidStudent4}})\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_academicperioddetailses",
							"host": [
								"{{Eresource_URL}}mshied_academicperioddetailses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contact of type Student 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Contact Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    var contactid = jsonData.contactid;",
									"    var contactName = jsonData.fullname;",
									"    console.log(\"Contact name is: \" + contactName);",
									"",
									"",
									"",
									"    pm.globals.set('gcontactidStudent5', contactid);",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"lastname\": \"Student-5-{{$randomLastName}}\",\r\n\t\"firstname\": \"CS-DML-{{globalsessionvalue}}\",\r\n\t\"mshied_contacttype\": \"494280011\",\r\n\t\"cmc_sourcecategoryid@odata.bind\": \"/cmc_sourcecategories({{gsourceCategoryid1}})\",\r\n\t\"cmc_sourcemethodid@odata.bind\": \"/cmc_sourcemethods({{gsourceMethodid1}})\",\r\n\t\"emailaddress1\": \"9 {{$randomEmail}}\",\r\n    \"cmc_recentsat\":50\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}contacts",
							"host": [
								"{{Eresource_URL}}contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Academic period 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var academicperiodid,academicPeriodname;",
									"",
									"pm.test(\"Academicperiodid Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    academicperiodid = jsonData.mshied_academicperiodid;",
									"    academicPeriodname=jsonData.mshied_name;",
									"",
									"    console.log(\"Academic Period Name: \"+academicPeriodname);",
									" ",
									"});",
									"",
									"pm.globals.set('gacademicperiodid5',academicperiodid);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var moment = require('moment');\r",
									"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"pm.environment.set(\"timestampEndDate\", moment().add(100, 'days').format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"mshied_code\": \"{{$randomInt}}-{{$randomInt}}-{{$randomInt}}-A5\",\r\n    \"mshied_enddate\": \"{{timestampEndDate}}\",\r\n    \"mshied_name\": \"API-{{$randomInt}}- CampusSurvey-{{$randomInt}}\",\r\n    \"mshied_startdate\": \"{{timestamp}}\"\r\n \r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_academicperiods",
							"host": [
								"{{Eresource_URL}}mshied_academicperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Academic Period Details to Contact 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var academicPeriodDetailid,academicPeriodDetailname;",
									"pm.test(\"Academic Period Details Created for a Student record\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    academicPeriodDetailid = jsonData.mshied_academicperioddetailsid;",
									"    academicPeriodDetailname = jsonData.mshied_name;",
									"    console.log(\"Academic Period Detail name is: \" + academicPeriodDetailname);",
									"",
									"    ",
									"});",
									"",
									"pm.globals.set('gacademicPeriodDetailid5', academicPeriodDetailid);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"cmc_residence\": 1,\r\n\t\"cmc_scholarshipcodes\": \"1\",\r\n\t\"mshied_AcademicPeriodID@odata.bind\": \"/mshied_academicperiods({{gacademicperiodid5}})\",\r\n\t\"mshied_ProgramId@odata.bind\": \"/mshied_programs({{gprogramid1}})\",\r\n\t\"mshied_StudentId@odata.bind\": \"/contacts({{gcontactidStudent5}})\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_academicperioddetailses",
							"host": [
								"{{Eresource_URL}}mshied_academicperioddetailses"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Static Marketing List and associate Contact records",
			"item": [
				{
					"name": "Create Static Student Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var listid;",
									"pm.test(\"Marketing List Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    listid = jsonData.listid;",
									"    ",
									"    var SGName =jsonData.listname;   ",
									"    var stateid = jsonData.statecode;",
									"    console.log('ML name:'+SGName);",
									" ",
									"",
									"});",
									"",
									"pm.globals.set('glistid', listid);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"listname\": \"Static CampusSurvey{{$randomFullName}}\",\r\n    \"type\": false,\r\n    \"createdfromcode\": 2,\r\n    \"cmc_marketinglisttype\": 175490000\r\n   \r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}lists",
							"host": [
								"{{Eresource_URL}}lists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Contacts 1 & 2 to Marketing List1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Contacts Addedd to Marketing list\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 201, 202]);",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"List\": {\r\n        \"listid\": \"{{glistid}}\",\r\n        \"@odata.type\": \"Microsoft.Dynamics.CRM.list\"\r\n    },\r\n    \"Members\": [\r\n        {\r\n            \"@odata.type\": \"Microsoft.Dynamics.CRM.contact\",\r\n            \"contactid\": \"{{gcontactidStudent}}\"\r\n        },\r\n        {\r\n            \"@odata.type\": \"Microsoft.Dynamics.CRM.contact\",\r\n            \"contactid\": \"{{gcontactidStudent2}}\"\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}AddListMembersList",
							"host": [
								"{{Eresource_URL}}AddListMembersList"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Dynamic Marketing List and associate Contact records",
			"item": [
				{
					"name": "Create Dynamic Student Group for adding contacts 3,4 &5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var listid,SGName,expirationdate,membercount;",
									"pm.test(\"Student Group Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    listid = jsonData.listid;",
									"    membercount =jsonData.membercount;     ",
									"    SGName =jsonData.listname;   ",
									" ",
									"});",
									"",
									"pm.globals.set('glistid1', listid);",
									"console.log(\"SGName: \" +SGName);",
									"console.log(\"listid: \" +listid);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"listname\":\"Dynamic CampusSurvey{{$randomFullName}}\",\r\n\"description\": \"{{$randomAbbreviation}}\",\r\n\"createdfromcode\":2,\r\n\"type\": true,\r\n\"query\": \"<fetch version=\\\"1.0\\\" output-format=\\\"xml-platform\\\" mapping=\\\"logical\\\" distinct=\\\"true\\\">\\n    <entity name=\\\"contact\\\">\\n        <attribute name=\\\"fullname\\\"/>\\n        <attribute name=\\\"telephone1\\\"/>\\n        <attribute name=\\\"contactid\\\"/>\\n        <order attribute=\\\"fullname\\\" descending=\\\"false\\\"/>\\n        <filter type=\\\"and\\\">\\n            <condition attribute=\\\"firstname\\\" operator=\\\"like\\\" value=\\\"%{{globalsessionvalue}}\\\"/>\\n            <condition attribute=\\\"cmc_recentsat\\\" operator=\\\"lt\\\" value=\\\"60\\\"/>\\n        </filter>\\n    </entity>\\n</fetch>\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}lists",
							"host": [
								"{{Eresource_URL}}lists"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Course Section 1 And Course History",
			"item": [
				{
					"name": "Get Registration Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var registrationStatusId,registrationStatusName;",
									"",
									"pm.test(\"Registration Status record Fetched\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    registrationStatusId = jsonData.mshied_registrationstatusid;",
									"    registrationStatusName = jsonData.mshied_name;",
									"",
									"    console.log('Registration Status Name is: ' + registrationStatusName);",
									"",
									"});",
									"",
									"pm.globals.set('gregistrationStatusId1', registrationStatusId);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_code\": \"{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\r\n    \"mshied_name\": \"RegStatus{{$randomInt}}\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_registrationstatuses",
							"host": [
								"{{Eresource_URL}}mshied_registrationstatuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Role 'Primary Advisor'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var titleID,titleName;",
									"pm.test(\"Fetch Title\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    titleID = jsonData.value[0].cmc_titleid;",
									"    titleName=jsonData.value[0].cmc_titlename;",
									"",
									"    ",
									"});",
									"pm.globals.set('gtitleID1',titleID);",
									"",
									"console.log(\"Title ID is: \"+titleID);",
									"console.log(\"Title Name is: \"+titleName);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}cmc_titles?$filter=cmc_titlename eq 'Primary Advisor'",
							"host": [
								"{{Eresource_URL}}cmc_titles"
							],
							"query": [
								{
									"key": "$filter",
									"value": "cmc_titlename eq 'Primary Advisor'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Role 'Mentor'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var titleID,titleName;",
									"pm.test(\"Fetch Title\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    titleID = jsonData.value[0].cmc_titleid;",
									"    titleName=jsonData.value[0].cmc_titlename;",
									"",
									"    ",
									"});",
									"pm.globals.set('gtitleID2',titleID);",
									"",
									"console.log(\"Title ID is: \"+titleID);",
									"console.log(\"Title Name is: \"+titleName);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}cmc_titles?$filter=cmc_titlename eq 'Mentor'",
							"host": [
								"{{Eresource_URL}}cmc_titles"
							],
							"query": [
								{
									"key": "$filter",
									"value": "cmc_titlename eq 'Mentor'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseid;",
									"var  coursecode, coursename;",
									"",
									"pm.test(\"Course Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    ",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseid = jsonData.mshied_courseid;",
									"    coursecode=jsonData.mshied_coursenumber;",
									"    coursename=jsonData.mshied_name;",
									"",
									"    ",
									"    console.log(\"coursecode :\"+coursecode);",
									"",
									"});",
									"",
									"pm.globals.set('gcourseid', courseid);",
									"console.log('courseid::'+courseid);",
									"pm.globals.set('gcoursename1', coursename);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_coursenumber\": \"{{$randomInt}}API-C1{{$randomInt}}{{$randomInt}}\",\r\n    \"mshied_name\": \"API-CampusSurvey-{{$randomInt}}\"\r\n}       \r\n\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_courses",
							"host": [
								"{{Eresource_URL}}mshied_courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses Section 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseSectionid,coursesectionName,courseID,location,coursedaytime;",
									"pm.test(\"Course Section  Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseSectionid = jsonData.mshied_coursesectionid;",
									"    coursesectionName = jsonData.mshied_name;",
									"    courseID=jsonData._mshied_courseid_value;",
									"    location=jsonData.mshied_location;",
									"    coursedaytime=jsonData.mshied_coursedaytime;",
									"  ",
									" var courseid=pm.globals.get(\"gcourseid\");",
									"    ",
									"     pm.test(\"course associated to course section\", function()",
									"        {",
									"            pm.expect(courseid).to.equal(courseID);",
									"        });",
									"    ",
									"    //verify the course section autoname",
									"    var coursename=pm.globals.get('gcoursename1');",
									"    var concatenatedname=coursename+' '+'-'+' '+location+' '+'-'+' '+coursedaytime;",
									"    console.log(\"concatenatedname: \"+concatenatedname);",
									"  ",
									"        pm.test(\"course section autoname workflow is matching\", function()",
									"        {",
									"            pm.expect(coursesectionName).to.equal(concatenatedname);",
									"        });",
									"    ",
									"",
									"});",
									"",
									"pm.globals.set('gcourseSectionid', courseSectionid);",
									"console.log('Course Section ID'+courseSectionid);",
									"pm.globals.set('coursesectionName',coursesectionName);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_AcademicPeriodId@odata.bind\": \"/mshied_academicperiods({{gacademicperiodid}})\",\r\n    \"mshied_CourseId@odata.bind\": \"/mshied_courses({{gcourseid}})\",\r\n    \"mshied_location\": \"{{$randomInt}}\",\r\n    \"mshied_coursedaytime\": \"{{$randomDateFuture}}\"\r\n\r\n \r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_coursesections",
							"host": [
								"{{Eresource_URL}}mshied_coursesections"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 1 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid\");",
									"    var mainContactID=pm.globals.get('gcontactid1');",
									"    ",
									"  pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID1a', courseInstructorID);",
									"console.log('Course Instructor ID 1a'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid1}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID1}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 2 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid\");",
									"    var mainContactID=pm.globals.get('gcontactid2');",
									"    ",
									"  pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID1b', courseInstructorID);",
									"console.log('Course Instructor ID 1b'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid2}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 3 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid\");",
									"    var mainContactID=pm.globals.get('gcontactid3');",
									"  pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID1c', courseInstructorID);",
									"console.log('Course Instructor ID 1c'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid3}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 4 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid\");",
									"    var mainContactID=pm.globals.get('gcontactid4');",
									"    ",
									"  pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID1d', courseInstructorID);",
									"console.log('Course Instructor ID 1d'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid4}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dup check-Add Course Instructor 1 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Course Instructor Dup check\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([412]);",
									"    var jsonData =JSON.parse(responseBody);",
									"});",
									"",
									"pm.test(\"Duplicate check\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"A record was not created or updated because a duplicate of the current record already exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "MSCRM.SuppressDuplicateDetection",
								"type": "text",
								"value": "false"
							},
							{
								"key": "If-None-Match",
								"type": "text",
								"value": "null"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid1}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID1}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses History for student 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"pm.environment.set(\"timestamp\", moment().add(1, 'days'));\r",
									"\r",
									"pm.environment.set(\"timestampEndDate\", moment().add(100, 'days'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var coursehistoryid,coursehistoryName,courseSectionID;",
									"pm.test(\"CourseHistory Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    coursehistoryid = jsonData.mshied_coursehistoryid;",
									"    coursehistoryName=jsonData.mshied_name;",
									"",
									"    courseSectionID=jsonData._mshied_coursesectionid_value;",
									"",
									"    console.log(\"Course History Name: \"+coursehistoryName);",
									"",
									"    var lmscourselastaccess=jsonData.cmc_lmscourselastaccess;",
									"    var lmscourselastsubmission=jsonData.cmc_lmscourselastsubmission;",
									"",
									"    console.log(\"lmscourselastaccess: \"+lmscourselastaccess+\", lmscourselastsubmission: \"+lmscourselastsubmission);  ",
									"",
									"});",
									"",
									"",
									"pm.globals.set('gcoursehistoryid1a', coursehistoryid);",
									"console.log('gcoursehistoryid:'+coursehistoryid);",
									"",
									"var mainCoursesectionID=pm.globals.get('gcourseSectionid');",
									"",
									"pm.test(\"Validate Course history record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCoursesectionID).to.equal(courseSectionID);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_AcademicPeriodDetailsId@odata.bind\": \"/mshied_academicperioddetailses({{gacademicPeriodDetailid1}})\",\r\n    \"mshied_CourseId@odata.bind\": \"/mshied_courses({{gcourseid}})\",\r\n    \"mshied_CourseSectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid}})\",\r\n    \"mshied_RegistrationStatusId@odata.bind\": \"/mshied_registrationstatuses({{gregistrationStatusId1}})\",\r\n    \"mshied_StudentId@odata.bind\": \"/contacts({{gcontactidStudent}})\",\r\n    \"mshied_continuingeducation\": 494280000,\r\n    \"mshied_creditsattempted\": 2,\r\n    \"mshied_creditsearrned\": 1,\r\n    \"mshied_gradepoints\": 100,\r\n    \"mshied_lettergrade\": \"5\",\r\n    \"mshied_midtermlettergrade\": \"10\",\r\n    \"mshied_midtermnumericgrade\": 50,\r\n    \"cmc_lmscourselastaccess\": \"{{timestamp}}\",\r\n    \"cmc_lmscourselastsubmission\": \"{{timestampEndDate}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_coursehistories",
							"host": [
								"{{Eresource_URL}}mshied_coursehistories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses History for student 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var coursehistoryid,coursehistoryName,courseSectionID;",
									"pm.test(\"CourseHistory Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    coursehistoryid = jsonData.mshied_coursehistoryid;",
									"    coursehistoryName=jsonData.mshied_name;",
									"",
									"    courseSectionID=jsonData._mshied_coursesectionid_value;",
									"",
									"    console.log(\"Course History Name: \"+coursehistoryName);",
									"",
									"});",
									"",
									"",
									"pm.globals.set('gcoursehistoryid1b', coursehistoryid);",
									"console.log('gcoursehistoryid:'+coursehistoryid);",
									"",
									"var mainCoursesectionID=pm.globals.get('gcourseSectionid');",
									"",
									"pm.test(\"Validate Course history record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCoursesectionID).to.equal(courseSectionID);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_AcademicPeriodDetailsId@odata.bind\": \"/mshied_academicperioddetailses({{gacademicPeriodDetailid2}})\",\r\n    \"mshied_CourseId@odata.bind\": \"/mshied_courses({{gcourseid}})\",\r\n    \"mshied_CourseSectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid}})\",\r\n    \"mshied_RegistrationStatusId@odata.bind\": \"/mshied_registrationstatuses({{gregistrationStatusId1}})\",\r\n    \"mshied_StudentId@odata.bind\": \"/contacts({{gcontactidStudent2}})\",\r\n    \"mshied_continuingeducation\": 494280000,\r\n    \"mshied_creditsattempted\": 2,\r\n    \"mshied_creditsearrned\": 1,\r\n    \"mshied_gradepoints\": 100,\r\n    \"mshied_lettergrade\": \"5\",\r\n    \"mshied_midtermlettergrade\": \"10\",\r\n    \"mshied_midtermnumericgrade\": 50\r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_coursehistories",
							"host": [
								"{{Eresource_URL}}mshied_coursehistories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses History for student 3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var coursehistoryid,coursehistoryName,courseSectionID;",
									"pm.test(\"CourseHistory Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    coursehistoryid = jsonData.mshied_coursehistoryid;",
									"    coursehistoryName=jsonData.mshied_name;",
									"",
									"    courseSectionID=jsonData._mshied_coursesectionid_value;",
									"",
									"    console.log(\"Course History Name: \"+coursehistoryName);",
									"",
									"});",
									"",
									"",
									"pm.globals.set('gcoursehistoryid1c', coursehistoryid);",
									"console.log('gcoursehistoryid:'+coursehistoryid);",
									"",
									"var mainCoursesectionID=pm.globals.get('gcourseSectionid');",
									"",
									"pm.test(\"Validate Course history record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCoursesectionID).to.equal(courseSectionID);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_AcademicPeriodDetailsId@odata.bind\": \"/mshied_academicperioddetailses({{gacademicPeriodDetailid3}})\",\r\n    \"mshied_CourseId@odata.bind\": \"/mshied_courses({{gcourseid}})\",\r\n    \"mshied_CourseSectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid}})\",\r\n    \"mshied_RegistrationStatusId@odata.bind\": \"/mshied_registrationstatuses({{gregistrationStatusId1}})\",\r\n    \"mshied_StudentId@odata.bind\": \"/contacts({{gcontactidStudent3}})\",\r\n    \"mshied_continuingeducation\": 494280000,\r\n    \"mshied_creditsattempted\": 2,\r\n    \"mshied_creditsearrned\": 1,\r\n    \"mshied_gradepoints\": 100,\r\n    \"mshied_lettergrade\": \"5\",\r\n    \"mshied_midtermlettergrade\": \"10\",\r\n    \"mshied_midtermnumericgrade\": 50\r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_coursehistories",
							"host": [
								"{{Eresource_URL}}mshied_coursehistories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Course Section 2 without Course History",
			"item": [
				{
					"name": "Create Courses 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseid;",
									"var  coursecode, coursename;",
									"",
									"pm.test(\"Course Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    ",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseid = jsonData.mshied_courseid;",
									"    coursecode=jsonData.mshied_coursenumber;",
									"    coursename=jsonData.mshied_name;",
									"",
									"    ",
									"    console.log(\"coursecode :\"+coursecode);",
									"",
									"});",
									"",
									"pm.globals.set('gcourseid2', courseid);",
									"console.log('gcourseid::'+courseid);",
									"pm.globals.set('gcoursename2', coursename);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_coursenumber\": \"{{$randomInt}}API-C2{{$randomInt}}{{$randomInt}}\",\r\n    \"mshied_name\": \"API-CampusSurvey-{{$randomInt}}\"\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_courses",
							"host": [
								"{{Eresource_URL}}mshied_courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses Section 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseSectionid,coursesectionName,courseID,location,coursedaytime;",
									"pm.test(\"Course Section  Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseSectionid = jsonData.mshied_coursesectionid;",
									"    coursesectionName = jsonData.mshied_name;",
									"    courseID=jsonData._mshied_courseid_value;",
									"    location=jsonData.mshied_location;",
									"    coursedaytime=jsonData.mshied_coursedaytime;",
									"  ",
									" var courseid=pm.globals.get(\"gcourseid2\");",
									"    ",
									"       pm.test(\"course associated to course section\", function()",
									"        {",
									"            pm.expect(courseid).to.equal(courseID);",
									"        });",
									"    ",
									"    //verify the course section autoname",
									"    var coursename=pm.globals.get('gcoursename2');",
									"    var concatenatedname=coursename+' '+'-'+' '+location+' '+'-'+' '+coursedaytime;",
									"    console.log(\"concatenatedname: \"+concatenatedname);",
									"  ",
									"        pm.test(\"course section autoname workflow is matching\", function()",
									"        {",
									"            pm.expect(coursesectionName).to.equal(concatenatedname);",
									"        });",
									"    ",
									"});",
									"",
									"",
									"",
									"",
									"pm.globals.set('gcourseSectionid2', courseSectionid);",
									"console.log('Course Section ID'+courseSectionid);",
									"pm.globals.set('coursesectionName2',coursesectionName);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_AcademicPeriodId@odata.bind\": \"/mshied_academicperiods({{gacademicperiodid2}})\",\r\n    \"mshied_CourseId@odata.bind\": \"/mshied_courses({{gcourseid2}})\",\r\n    \"mshied_location\": \"{{$randomInt}}\",\r\n    \"mshied_coursedaytime\": \"{{$randomDateFuture}}\"\r\n\r\n \r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_coursesections",
							"host": [
								"{{Eresource_URL}}mshied_coursesections"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 1 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid2\");",
									"    var mainContactID=pm.globals.get('gcontactid1');",
									"    ",
									"    pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID2a', courseInstructorID);",
									"console.log('Course Instructor ID 2a'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid2}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid1}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID1}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 2 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid2\");",
									"    var mainContactID=pm.globals.get('gcontactid2');",
									"    ",
									"    pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID2b', courseInstructorID);",
									"console.log('Course Instructor ID 2b'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid2}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid2}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 3 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid2\");",
									"    var mainContactID=pm.globals.get('gcontactid3');",
									"    ",
									"    pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID2c', courseInstructorID);",
									"console.log('Course Instructor ID 2c'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid2}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid3}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 4 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid2\");",
									"    var mainContactID=pm.globals.get('gcontactid4');",
									"    ",
									"  ",
									"    pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID2d', courseInstructorID);",
									"console.log('Course Instructor ID 2d'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid2}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid4}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Course Section 3 with Course History",
			"item": [
				{
					"name": "Create Course 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseid;",
									"var  coursecode, coursename;",
									"",
									"pm.test(\"Course Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    ",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseid = jsonData.mshied_courseid;",
									"    coursecode=jsonData.mshied_coursenumber;",
									"    coursename=jsonData.mshied_name;",
									"",
									"    ",
									"    console.log(\"coursecode :\"+coursecode);",
									"",
									"});",
									"",
									"pm.globals.set('gcourseid3', courseid);",
									"console.log('gcourseid::'+courseid);",
									"pm.globals.set('gcoursename3', coursename);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_coursenumber\": \"{{$randomInt}}API-C3{{$randomInt}}{{$randomInt}}\",\r\n    \"mshied_name\": \"API-CampusSurvey-{{$randomInt}}\"\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_courses",
							"host": [
								"{{Eresource_URL}}mshied_courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses Section 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseSectionid,coursesectionName,courseID,location,coursedaytime;",
									"pm.test(\"Course Section  Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseSectionid = jsonData.mshied_coursesectionid;",
									"    coursesectionName = jsonData.mshied_name;",
									"    courseID=jsonData._mshied_courseid_value;",
									"    location=jsonData.mshied_location;",
									"    coursedaytime=jsonData.mshied_coursedaytime;",
									"  ",
									" var courseid=pm.globals.get(\"gcourseid3\");",
									"    ",
									"       pm.test(\"course associated to course section\", function()",
									"        {",
									"            pm.expect(courseid).to.equal(courseID);",
									"        });",
									"    ",
									"    //verify the course section autoname",
									"    var coursename=pm.globals.get('gcoursename3');",
									"    var concatenatedname=coursename+' '+'-'+' '+location+' '+'-'+' '+coursedaytime;",
									"    console.log(\"concatenatedname: \"+concatenatedname);",
									"  ",
									"        pm.test(\"course section autoname workflow is matching\", function()",
									"        {",
									"            pm.expect(coursesectionName).to.equal(concatenatedname);",
									"        });",
									"    ",
									"});",
									"",
									"",
									"",
									"",
									"pm.globals.set('gcourseSectionid3', courseSectionid);",
									"console.log('Course Section ID'+courseSectionid);",
									"pm.globals.set('coursesectionName3',coursesectionName);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_AcademicPeriodId@odata.bind\": \"/mshied_academicperiods({{gacademicperiodid3}})\",\r\n    \"mshied_CourseId@odata.bind\": \"/mshied_courses({{gcourseid3}})\",\r\n    \"mshied_location\": \"{{$randomInt}}\",\r\n    \"mshied_coursedaytime\": \"{{$randomDateFuture}}\"\r\n\r\n \r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_coursesections",
							"host": [
								"{{Eresource_URL}}mshied_coursesections"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 1 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid3\");",
									"    var mainContactID=pm.globals.get('gcontactid1');",
									"    ",
									"    pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID3a', courseInstructorID);",
									"console.log('Course Instructor ID 3a'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid3}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid1}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID1}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 2 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid3\");",
									"    var mainContactID=pm.globals.get('gcontactid2');",
									"    ",
									"    pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID3b', courseInstructorID);",
									"console.log('Course Instructor ID 3b'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid3}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid2}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 3 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid3\");",
									"    var mainContactID=pm.globals.get('gcontactid3');",
									"    ",
									"    pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID3c', courseInstructorID);",
									"console.log('Course Instructor ID 3c'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid3}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid3}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 4 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid3\");",
									"    var mainContactID=pm.globals.get('gcontactid4');",
									"    ",
									"  ",
									"    pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID3d', courseInstructorID);",
									"console.log('Course Instructor ID 3d'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid3}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid4}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses History for student 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var coursehistoryid,coursehistoryName,courseSectionID;",
									"pm.test(\"CourseHistory Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    coursehistoryid = jsonData.mshied_coursehistoryid;",
									"    coursehistoryName=jsonData.mshied_name;",
									"",
									"    courseSectionID=jsonData._mshied_coursesectionid_value;",
									"",
									"    console.log(\"Course History Name: \"+coursehistoryName);",
									"",
									"});",
									"",
									"",
									"pm.globals.set('gcoursehistoryid3a', coursehistoryid);",
									"console.log('gcoursehistoryid:'+coursehistoryid);",
									"",
									"var mainCoursesectionID=pm.globals.get('gcourseSectionid3');",
									"",
									"pm.test(\"Validate Course history record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCoursesectionID).to.equal(courseSectionID);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_AcademicPeriodDetailsId@odata.bind\": \"/mshied_academicperioddetailses({{gacademicPeriodDetailid1}})\",\r\n    \"mshied_CourseId@odata.bind\": \"/mshied_courses({{gcourseid3}})\",\r\n    \"mshied_CourseSectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid3}})\",\r\n    \"mshied_RegistrationStatusId@odata.bind\": \"/mshied_registrationstatuses({{gregistrationStatusId1}})\",\r\n    \"mshied_StudentId@odata.bind\": \"/contacts({{gcontactidStudent}})\",\r\n    \"mshied_continuingeducation\": 494280000,\r\n    \"mshied_creditsattempted\": 2,\r\n    \"mshied_creditsearrned\": 1,\r\n    \"mshied_gradepoints\": 100,\r\n    \"mshied_lettergrade\": \"5\",\r\n    \"mshied_midtermlettergrade\": \"10\",\r\n    \"mshied_midtermnumericgrade\": 50\r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_coursehistories",
							"host": [
								"{{Eresource_URL}}mshied_coursehistories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses History for student 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var coursehistoryid,coursehistoryName,courseSectionID;",
									"pm.test(\"CourseHistory Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    coursehistoryid = jsonData.mshied_coursehistoryid;",
									"    coursehistoryName=jsonData.mshied_name;",
									"",
									"    courseSectionID=jsonData._mshied_coursesectionid_value;",
									"",
									"    console.log(\"Course History Name: \"+coursehistoryName);",
									"",
									"});",
									"",
									"",
									"pm.globals.set('gcoursehistoryid3b', coursehistoryid);",
									"console.log('gcoursehistoryid:'+coursehistoryid);",
									"",
									"var mainCoursesectionID=pm.globals.get('gcourseSectionid3');",
									"",
									"pm.test(\"Validate Course history record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCoursesectionID).to.equal(courseSectionID);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_AcademicPeriodDetailsId@odata.bind\": \"/mshied_academicperioddetailses({{gacademicPeriodDetailid2}})\",\r\n    \"mshied_CourseId@odata.bind\": \"/mshied_courses({{gcourseid3}})\",\r\n    \"mshied_CourseSectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid3}})\",\r\n    \"mshied_RegistrationStatusId@odata.bind\": \"/mshied_registrationstatuses({{gregistrationStatusId1}})\",\r\n    \"mshied_StudentId@odata.bind\": \"/contacts({{gcontactidStudent2}})\",\r\n    \"mshied_continuingeducation\": 494280000,\r\n    \"mshied_creditsattempted\": 2,\r\n    \"mshied_creditsearrned\": 1,\r\n    \"mshied_gradepoints\": 100,\r\n    \"mshied_lettergrade\": \"5\",\r\n    \"mshied_midtermlettergrade\": \"10\",\r\n    \"mshied_midtermnumericgrade\": 50\r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_coursehistories",
							"host": [
								"{{Eresource_URL}}mshied_coursehistories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses History for student 4",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var coursehistoryid,coursehistoryName,courseSectionID;",
									"pm.test(\"CourseHistory Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    coursehistoryid = jsonData.mshied_coursehistoryid;",
									"    coursehistoryName=jsonData.mshied_name;",
									"",
									"    courseSectionID=jsonData._mshied_coursesectionid_value;",
									"",
									"    console.log(\"Course History Name: \"+coursehistoryName);",
									"",
									"});",
									"",
									"",
									"pm.globals.set('gcoursehistoryid3c', coursehistoryid);",
									"console.log('gcoursehistoryid:'+coursehistoryid);",
									"",
									"var mainCoursesectionID=pm.globals.get('gcourseSectionid3');",
									"",
									"pm.test(\"Validate Course history record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCoursesectionID).to.equal(courseSectionID);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_AcademicPeriodDetailsId@odata.bind\": \"/mshied_academicperioddetailses({{gacademicPeriodDetailid4}})\",\r\n    \"mshied_CourseId@odata.bind\": \"/mshied_courses({{gcourseid3}})\",\r\n    \"mshied_CourseSectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid3}})\",\r\n    \"mshied_RegistrationStatusId@odata.bind\": \"/mshied_registrationstatuses({{gregistrationStatusId1}})\",\r\n    \"mshied_StudentId@odata.bind\": \"/contacts({{gcontactidStudent4}})\",\r\n    \"mshied_continuingeducation\": 494280000,\r\n    \"mshied_creditsattempted\": 2,\r\n    \"mshied_creditsearrned\": 1,\r\n    \"mshied_gradepoints\": 100,\r\n    \"mshied_lettergrade\": \"5\",\r\n    \"mshied_midtermlettergrade\": \"10\",\r\n    \"mshied_midtermnumericgrade\": 50\r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_coursehistories",
							"host": [
								"{{Eresource_URL}}mshied_coursehistories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Course Section 4 with Course History",
			"item": [
				{
					"name": "Create Course 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseid;",
									"var  coursecode, coursename;",
									"",
									"pm.test(\"Course Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    ",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseid = jsonData.mshied_courseid;",
									"    coursecode=jsonData.mshied_coursenumber;",
									"    coursename=jsonData.mshied_name;",
									"",
									"    ",
									"    console.log(\"coursecode :\"+coursecode);",
									"",
									"});",
									"",
									"pm.globals.set('gcourseid4', courseid);",
									"console.log('gcourseid::'+courseid);",
									"pm.globals.set('gcoursename4', coursename);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_coursenumber\": \"{{$randomInt}}API-C4{{$randomInt}}{{$randomInt}}\",\r\n    \"mshied_name\": \"API-CampusSurvey-{{$randomInt}}\"\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_courses",
							"host": [
								"{{Eresource_URL}}mshied_courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses Section 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseSectionid,coursesectionName,courseID,location,coursedaytime;",
									"pm.test(\"Course Section  Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseSectionid = jsonData.mshied_coursesectionid;",
									"    coursesectionName = jsonData.mshied_name;",
									"    courseID=jsonData._mshied_courseid_value;",
									"    location=jsonData.mshied_location;",
									"    coursedaytime=jsonData.mshied_coursedaytime;",
									"  ",
									" var courseid=pm.globals.get(\"gcourseid4\");",
									"    ",
									"       pm.test(\"course associated to course section\", function()",
									"        {",
									"            pm.expect(courseid).to.equal(courseID);",
									"        });",
									"    ",
									"    //verify the course section autoname",
									"    var coursename=pm.globals.get('gcoursename4');",
									"    var concatenatedname=coursename+' '+'-'+' '+location+' '+'-'+' '+coursedaytime;",
									"    console.log(\"concatenatedname: \"+concatenatedname);",
									"  ",
									"        pm.test(\"course section autoname workflow is matching\", function()",
									"        {",
									"            pm.expect(coursesectionName).to.equal(concatenatedname);",
									"        });",
									"    ",
									"});",
									"",
									"",
									"",
									"",
									"pm.globals.set('gcourseSectionid4', courseSectionid);",
									"console.log('Course Section ID'+courseSectionid);",
									"pm.globals.set('coursesectionName4',coursesectionName);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_AcademicPeriodId@odata.bind\": \"/mshied_academicperiods({{gacademicperiodid4}})\",\r\n    \"mshied_CourseId@odata.bind\": \"/mshied_courses({{gcourseid4}})\",\r\n    \"mshied_location\": \"{{$randomInt}}\",\r\n    \"mshied_coursedaytime\": \"{{$randomDateFuture}}\"\r\n\r\n \r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_coursesections",
							"host": [
								"{{Eresource_URL}}mshied_coursesections"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 1 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid4\");",
									"    var mainContactID=pm.globals.get('gcontactid1');",
									"    ",
									"    pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID4a', courseInstructorID);",
									"console.log('Course Instructor ID 4a'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid4}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid1}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID1}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 2 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid4\");",
									"    var mainContactID=pm.globals.get('gcontactid2');",
									"    ",
									"    pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID4b', courseInstructorID);",
									"console.log('Course Instructor ID 4b'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid4}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid2}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 3 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid4\");",
									"    var mainContactID=pm.globals.get('gcontactid3');",
									"    ",
									"    pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID4c', courseInstructorID);",
									"console.log('Course Instructor ID 4c'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid4}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid3}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Courses Instructor 4 to Course Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid4\");",
									"    var mainContactID=pm.globals.get('gcontactid4');",
									"    ",
									"  ",
									"    pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID4d', courseInstructorID);",
									"console.log('Course Instructor ID 4d'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid4}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid4}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses History for student 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var coursehistoryid,coursehistoryName,courseSectionID;",
									"pm.test(\"CourseHistory Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    coursehistoryid = jsonData.mshied_coursehistoryid;",
									"    coursehistoryName=jsonData.mshied_name;",
									"",
									"    courseSectionID=jsonData._mshied_coursesectionid_value;",
									"",
									"    console.log(\"Course History Name: \"+coursehistoryName);",
									"",
									"});",
									"",
									"",
									"pm.globals.set('gcoursehistoryid4a', coursehistoryid);",
									"console.log('gcoursehistoryid:'+coursehistoryid);",
									"",
									"var mainCoursesectionID=pm.globals.get('gcourseSectionid4');",
									"",
									"pm.test(\"Validate Course history record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCoursesectionID).to.equal(courseSectionID);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_AcademicPeriodDetailsId@odata.bind\": \"/mshied_academicperioddetailses({{gacademicPeriodDetailid2}})\",\r\n    \"mshied_CourseId@odata.bind\": \"/mshied_courses({{gcourseid4}})\",\r\n    \"mshied_CourseSectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid4}})\",\r\n    \"mshied_RegistrationStatusId@odata.bind\": \"/mshied_registrationstatuses({{gregistrationStatusId1}})\",\r\n    \"mshied_StudentId@odata.bind\": \"/contacts({{gcontactidStudent2}})\",\r\n    \"mshied_continuingeducation\": 494280000,\r\n    \"mshied_creditsattempted\": 2,\r\n    \"mshied_creditsearrned\": 1,\r\n    \"mshied_gradepoints\": 100,\r\n    \"mshied_lettergrade\": \"5\",\r\n    \"mshied_midtermlettergrade\": \"10\",\r\n    \"mshied_midtermnumericgrade\": 50\r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_coursehistories",
							"host": [
								"{{Eresource_URL}}mshied_coursehistories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses History for student 4",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var coursehistoryid,coursehistoryName,courseSectionID;",
									"pm.test(\"CourseHistory Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    coursehistoryid = jsonData.mshied_coursehistoryid;",
									"    coursehistoryName=jsonData.mshied_name;",
									"",
									"    courseSectionID=jsonData._mshied_coursesectionid_value;",
									"",
									"    console.log(\"Course History Name: \"+coursehistoryName);",
									"",
									"});",
									"",
									"",
									"pm.globals.set('gcoursehistoryid4b', coursehistoryid);",
									"console.log('gcoursehistoryid:'+coursehistoryid);",
									"",
									"var mainCoursesectionID=pm.globals.get('gcourseSectionid4');",
									"",
									"pm.test(\"Validate Course history record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCoursesectionID).to.equal(courseSectionID);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_AcademicPeriodDetailsId@odata.bind\": \"/mshied_academicperioddetailses({{gacademicPeriodDetailid4}})\",\r\n    \"mshied_CourseId@odata.bind\": \"/mshied_courses({{gcourseid4}})\",\r\n    \"mshied_CourseSectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid4}})\",\r\n    \"mshied_RegistrationStatusId@odata.bind\": \"/mshied_registrationstatuses({{gregistrationStatusId1}})\",\r\n    \"mshied_StudentId@odata.bind\": \"/contacts({{gcontactidStudent4}})\",\r\n    \"mshied_continuingeducation\": 494280000,\r\n    \"mshied_creditsattempted\": 2,\r\n    \"mshied_creditsearrned\": 1,\r\n    \"mshied_gradepoints\": 100,\r\n    \"mshied_lettergrade\": \"5\",\r\n    \"mshied_midtermlettergrade\": \"10\",\r\n    \"mshied_midtermnumericgrade\": 50\r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_coursehistories",
							"host": [
								"{{Eresource_URL}}mshied_coursehistories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses History for student 5",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var coursehistoryid,coursehistoryName,courseSectionID;",
									"pm.test(\"CourseHistory Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    coursehistoryid = jsonData.mshied_coursehistoryid;",
									"    coursehistoryName=jsonData.mshied_name;",
									"",
									"    courseSectionID=jsonData._mshied_coursesectionid_value;",
									"",
									"    console.log(\"Course History Name: \"+coursehistoryName);",
									"",
									"});",
									"",
									"",
									"pm.globals.set('gcoursehistoryid4c', coursehistoryid);",
									"console.log('gcoursehistoryid:'+coursehistoryid);",
									"",
									"var mainCoursesectionID=pm.globals.get('gcourseSectionid4');",
									"",
									"pm.test(\"Validate Course history record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCoursesectionID).to.equal(courseSectionID);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_AcademicPeriodDetailsId@odata.bind\": \"/mshied_academicperioddetailses({{gacademicPeriodDetailid5}})\",\r\n    \"mshied_CourseId@odata.bind\": \"/mshied_courses({{gcourseid4}})\",\r\n    \"mshied_CourseSectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid4}})\",\r\n    \"mshied_RegistrationStatusId@odata.bind\": \"/mshied_registrationstatuses({{gregistrationStatusId1}})\",\r\n    \"mshied_StudentId@odata.bind\": \"/contacts({{gcontactidStudent5}})\",\r\n    \"mshied_continuingeducation\": 494280000,\r\n    \"mshied_creditsattempted\": 2,\r\n    \"mshied_creditsearrned\": 1,\r\n    \"mshied_gradepoints\": 100,\r\n    \"mshied_lettergrade\": \"5\",\r\n    \"mshied_midtermlettergrade\": \"10\",\r\n    \"mshied_midtermnumericgrade\": 50\r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_coursehistories",
							"host": [
								"{{Eresource_URL}}mshied_coursehistories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Campus Survey Template",
			"item": [
				{
					"name": "Create CampusSurveyTemplate- Static",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveytemplateid;",
									"var campussurveytemplatename1;",
									"pm.test(\"Campus survey template -static Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    campussurveytemplateid = jsonData.cmc_staffsurveytemplateid;",
									"    campussurveytemplatename1 = jsonData.cmc_staffsurveytemplatename;",
									"    ",
									"});",
									"",
									"pm.globals.set('gcampussurveytemplateid1', campussurveytemplateid);",
									"console.log('campussurveytemplateid 1:'+campussurveytemplateid);",
									"console.log('campussurveytemplatename 1:'+campussurveytemplatename1);",
									"pm.globals.set('campussurveytemplatename1',campussurveytemplatename1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var moment = require('moment');",
									"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));",
									"",
									"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_description\": \"Description {{$randomAlphaNumeric}}\",\r\n    \"cmc_duedatecalculationtype\": 175490000,\r\n    \"cmc_staffsurveytemplatename\": \"CST-Static{{$randomInt}} {{$randomInt}}\",\r\n    \"cmc_startdatecalculationtype\": 175490000,\r\n    \"cmc_staticduedate\": \"{{timestampEndDate}}\",\r\n    \"cmc_staticstartdate\": \"{{timestamp}}\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CST- Calculated-Before Assignment Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveytemplateid;",
									"var campussurveytemplatename;",
									"pm.test(\"Campus survey template -Before Assignment Date Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    campussurveytemplateid = jsonData.cmc_staffsurveytemplateid;",
									"    campussurveytemplatename = jsonData.cmc_staffsurveytemplatename;",
									"    ",
									"});",
									"",
									"pm.globals.set('gcampussurveytemplateid2', campussurveytemplateid);",
									"console.log('campussurveytemplateid 2:'+campussurveytemplateid);",
									"console.log('campussurveytemplatename 2:'+campussurveytemplatename);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_duedatecalculationfield\": 175490000,\r\n    \"cmc_duedatecalculationtype\": 175490001,\r\n    \"cmc_duedatedaysdirection\": 175490001,\r\n    \"cmc_duedatenumberofdays\": 2,\r\n\r\n    \"cmc_staffsurveytemplatename\": \"CST-Before Assignment {{$randomFirstName}}\",\r\n    \"cmc_startdatecalculationfield\": 175490000,\r\n    \"cmc_startdatecalculationtype\": 175490001,\r\n    \"cmc_startdatedaysdirection\": 175490001,\r\n    \"cmc_startdatenumberofdays\": 1\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CST- Calculated-After Assignment Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveytemplateid;",
									"var campussurveytemplatename;",
									"pm.test(\"Campus survey template -After Assignment Date Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    campussurveytemplateid = jsonData.cmc_staffsurveytemplateid;",
									"    campussurveytemplatename = jsonData.cmc_staffsurveytemplatename;",
									"    ",
									"});",
									"",
									"pm.globals.set('gcampussurveytemplateid3', campussurveytemplateid);",
									"console.log('campussurveytemplateid 3:'+campussurveytemplateid);",
									"console.log('campussurveytemplatename 3:'+campussurveytemplatename);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_duedatecalculationfield\": 175490000,\r\n    \"cmc_duedatecalculationtype\": 175490001,\r\n    \"cmc_duedatedaysdirection\": 175490000,\r\n    \"cmc_duedatenumberofdays\": 2,\r\n\r\n    \"cmc_staffsurveytemplatename\": \"CST-After Assignment {{$randomFirstName}}\",\r\n    \"cmc_startdatecalculationfield\": 175490000,\r\n    \"cmc_startdatecalculationtype\": 175490001,\r\n    \"cmc_startdatedaysdirection\": 175490000,\r\n    \"cmc_startdatenumberofdays\": 1\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CST- Calculated-Before StartDateOfAcademicPeriod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveytemplateid;",
									"var campussurveytemplatename;",
									"pm.test(\"Campus survey template -Before StartDateOfAcademicPeriod\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    campussurveytemplateid = jsonData.cmc_staffsurveytemplateid;",
									"    campussurveytemplatename = jsonData.cmc_staffsurveytemplatename;",
									"    ",
									"});",
									"",
									"pm.globals.set('gcampussurveytemplateid4', campussurveytemplateid);",
									"console.log('campussurveytemplateid 4:'+campussurveytemplateid);",
									"console.log('campussurveytemplatename 4:'+campussurveytemplatename);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_duedatecalculationfield\": 175490003,\r\n    \"cmc_duedatecalculationtype\": 175490001,\r\n    \"cmc_duedatedaysdirection\": 175490001,\r\n    \"cmc_duedatenumberofdays\": 2,\r\n\r\n    \"cmc_staffsurveytemplatename\": \"CST-Before StartDateAca {{$randomFirstName}}\",\r\n    \"cmc_startdatecalculationfield\": 175490004,\r\n    \"cmc_startdatecalculationtype\": 175490001,\r\n    \"cmc_startdatedaysdirection\": 175490001,\r\n    \"cmc_startdatenumberofdays\": 1\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CST- Calculated-After StartDateOfAcademicPeriod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveytemplateid;",
									"var campussurveytemplatename;",
									"pm.test(\"Campus survey template -After StartDateOfAcademicPeriod\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    campussurveytemplateid = jsonData.cmc_staffsurveytemplateid;",
									"    campussurveytemplatename = jsonData.cmc_staffsurveytemplatename;",
									"    ",
									"});",
									"",
									"pm.globals.set('gcampussurveytemplateid5', campussurveytemplateid);",
									"console.log('campussurveytemplateid 5:'+campussurveytemplateid);",
									"console.log('campussurveytemplatename 5:'+campussurveytemplatename);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_duedatecalculationfield\": 175490003,\r\n    \"cmc_duedatecalculationtype\": 175490001,\r\n    \"cmc_duedatedaysdirection\": 175490000,\r\n    \"cmc_duedatenumberofdays\": 2,\r\n\r\n    \"cmc_staffsurveytemplatename\": \"CST-After StartDateAca {{$randomFirstName}}\",\r\n    \"cmc_startdatecalculationfield\": 175490004,\r\n    \"cmc_startdatecalculationtype\": 175490001,\r\n    \"cmc_startdatedaysdirection\": 175490000,\r\n    \"cmc_startdatenumberofdays\": 1\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CST- Calculated-Before EndDateOfAcademicPeriod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveytemplateid;",
									"var campussurveytemplatename;",
									"pm.test(\"Campus survey template -Before EndDateOfAcademicPeriod\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    campussurveytemplateid = jsonData.cmc_staffsurveytemplateid;",
									"    campussurveytemplatename = jsonData.cmc_staffsurveytemplatename;",
									"    ",
									"});",
									"",
									"pm.globals.set('gcampussurveytemplateid5', campussurveytemplateid);",
									"console.log('campussurveytemplateid 5:'+campussurveytemplateid);",
									"console.log('campussurveytemplatename 5:'+campussurveytemplatename);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_duedatecalculationfield\": 175490004,\r\n    \"cmc_duedatecalculationtype\": 175490001,\r\n    \"cmc_duedatedaysdirection\": 175490001,\r\n    \"cmc_duedatenumberofdays\": 2,\r\n\r\n    \"cmc_staffsurveytemplatename\": \"CST-Before EndDateAca {{$randomFirstName}}\",\r\n    \"cmc_startdatecalculationfield\": 175490003,\r\n    \"cmc_startdatecalculationtype\": 175490001,\r\n    \"cmc_startdatedaysdirection\": 175490001,\r\n    \"cmc_startdatenumberofdays\": 1\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CST- Calculated-After EndDateOfAcademicPeriod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveytemplateid;",
									"var campussurveytemplatename,startdatecalculationfield,startdatecalculationtype,startdatedaysdirection,startdatenumberofdays,duedatecalculationfield,duedatecalculationtype,duedatedaysdirection,duedatenumberofdays;",
									"pm.test(\"Campus survey template -After EndDateOfAcademicPeriod\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    campussurveytemplateid = jsonData.cmc_staffsurveytemplateid;",
									"    campussurveytemplatename = jsonData.cmc_staffsurveytemplatename;",
									"",
									"    startdatecalculationfield=jsonData.cmc_startdatecalculationfield;",
									"    startdatecalculationtype=jsonData.cmc_startdatecalculationtype;",
									"    startdatedaysdirection=jsonData.cmc_startdatedaysdirection;",
									"    startdatenumberofdays=jsonData.cmc_startdatenumberofdays;",
									"    duedatecalculationfield=jsonData.cmc_duedatecalculationfield;",
									"    duedatecalculationtype=jsonData.cmc_duedatecalculationtype;",
									"    duedatedaysdirection=jsonData.cmc_duedatedaysdirection;",
									"    duedatenumberofdays=jsonData.cmc_duedatenumberofdays;",
									"    ",
									"});",
									"",
									"pm.globals.set('gcampussurveytemplateid6', campussurveytemplateid);",
									"pm.globals.set('gcampussurveytemplatename6',campussurveytemplatename);",
									"console.log('campussurveytemplateid 6:'+campussurveytemplateid);",
									"console.log('campussurveytemplatename 6:'+campussurveytemplatename);",
									"",
									"pm.globals.set('gstartdatecalculationfield6',startdatecalculationfield);",
									"pm.globals.set('gstartdatecalculationtype6',startdatecalculationtype);",
									"pm.globals.set('gstartdatedaysdirection6',startdatedaysdirection);",
									"pm.globals.set('gstartdatenumberofdays6',startdatenumberofdays);",
									"pm.globals.set('gduedatecalculationfield6',duedatecalculationfield);",
									"pm.globals.set('gduedatecalculationtype6',duedatecalculationtype);",
									"pm.globals.set('gduedatedaysdirection6',duedatedaysdirection);",
									"pm.globals.set('gduedatenumberofdays6',duedatenumberofdays);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_duedatecalculationfield\": 175490004,\r\n    \"cmc_duedatecalculationtype\": 175490001,\r\n    \"cmc_duedatedaysdirection\": 175490000,\r\n    \"cmc_duedatenumberofdays\": 2,\r\n\r\n    \"cmc_staffsurveytemplatename\": \"CST-After EndDateAcademic Period {{$randomFirstName}}\",\r\n    \"cmc_startdatecalculationfield\": 175490003,\r\n    \"cmc_startdatecalculationtype\": 175490001,\r\n    \"cmc_startdatedaysdirection\": 175490000,\r\n    \"cmc_startdatenumberofdays\": 1\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CampusSurveyTemplate- Static 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveytemplateid;",
									"var campussurveytemplatename1;",
									"pm.test(\"Campus survey template -static Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    campussurveytemplateid = jsonData.cmc_staffsurveytemplateid;",
									"    campussurveytemplatename1 = jsonData.cmc_staffsurveytemplatename;",
									"    ",
									"});",
									"",
									"pm.globals.set('gcampussurveytemplateid11', campussurveytemplateid);",
									"console.log('campussurveytemplateid 11:'+campussurveytemplateid);",
									"console.log('campussurveytemplatename 11:'+campussurveytemplatename1);",
									"",
									"pm.globals.set('gcampussurveytemplatename11',campussurveytemplatename1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var moment = require('moment');",
									"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));",
									"",
									"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_description\": \"Description {{$randomAlphaNumeric}}\",\r\n    \"cmc_duedatecalculationtype\": 175490000,\r\n    \"cmc_staffsurveytemplatename\": \"CST-Static {{$randomInt}}\",\r\n    \"cmc_startdatecalculationtype\": 175490000,\r\n    \"cmc_staticduedate\": \"{{timestampEndDate}}\",\r\n    \"cmc_staticstartdate\": \"{{timestamp}}\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Duplicate rule check - Campus survey Template",
			"item": [
				{
					"name": "Duplicate check CST- Calculated-After EndDateOfAcademicPeriod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Campus Survey Dup check\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([412]);",
									"    var jsonData =JSON.parse(responseBody);",
									"});",
									"",
									"pm.test(\"Duplicate check\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"A record was not created or updated because a duplicate of the current record already exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "MSCRM.SuppressDuplicateDetection",
								"type": "text",
								"value": "false"
							},
							{
								"key": "If-None-Match",
								"type": "text",
								"value": "null"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_duedatecalculationfield\": 175490004,\r\n    \"cmc_duedatecalculationtype\": 175490001,\r\n    \"cmc_duedatedaysdirection\": 175490000,\r\n    \"cmc_duedatenumberofdays\": 2,\r\n\r\n    \"cmc_staffsurveytemplatename\": \"{{gcampussurveytemplatename6}}\",\r\n    \"cmc_startdatecalculationfield\": 175490003,\r\n    \"cmc_startdatecalculationtype\": 175490001,\r\n    \"cmc_startdatedaysdirection\": 175490000,\r\n    \"cmc_startdatenumberofdays\": 1\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Verify Copy of Campus Survey Template",
			"item": [
				{
					"name": "Copy of Campus Survey Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var copysurveyTemplateResponse;",
									"",
									"pm.test(\"Campus Survey Copy Functionality\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    copysurveyTemplateResponse=jsonData.copysurveyTemplateResponse;",
									"",
									"    console.log(\"Copy record ID: \" +copysurveyTemplateResponse);",
									"",
									"});",
									"pm.globals.set('gcopysurveyTemplateResponse',copysurveyTemplateResponse)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates({{gcampussurveytemplateid6}})/Microsoft.Dynamics.CRM.cmc_CopyStaffSurveyTemplate",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates({{gcampussurveytemplateid6}})",
								"Microsoft.Dynamics.CRM.cmc_CopyStaffSurveyTemplate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify the values after Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var copysurveyTemplateName,copyrecordID,copystartdatecalculationfield,copystartdatecalculationtype,copystartdatedaysdirection,copystartdatenumberofdays,copyduedatecalculationfield,copyduedatecalculationtype,copyduedatedaysdirection,copyduedatenumberofdays;",
									"",
									"pm.test(\"Verify the record that was copied\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    copyrecordID=jsonData.cmc_staffsurveytemplateid;",
									"    copysurveyTemplateName=jsonData.cmc_staffsurveytemplatename;",
									"",
									"    console.log(\"Copy record Name: \" +copysurveyTemplateName);",
									"",
									"    copystartdatecalculationfield=jsonData.cmc_startdatecalculationfield;",
									"    copystartdatecalculationtype=jsonData.cmc_startdatecalculationtype;",
									"    copystartdatedaysdirection=jsonData.cmc_startdatedaysdirection;",
									"    copystartdatenumberofdays=jsonData.cmc_startdatenumberofdays;",
									"    copyduedatecalculationfield=jsonData.cmc_duedatecalculationfield;",
									"    copyduedatecalculationtype=jsonData.cmc_duedatecalculationtype;",
									"    copyduedatedaysdirection=jsonData.cmc_duedatedaysdirection;",
									"    copyduedatenumberofdays=jsonData.cmc_duedatenumberofdays;",
									"});",
									"pm.globals.set('gcopyrecordID',copyrecordID)",
									"",
									"var actualstartdatecalculationfield=pm.globals.get('gstartdatecalculationfield6');",
									"var actualstartdatecalculationtype=pm.globals.get('gstartdatecalculationtype6');",
									"var actualstartdatedaysdirection=pm.globals.get('gstartdatedaysdirection6');",
									"var actualstartdatenumberofdays=pm.globals.get('gstartdatenumberofdays6');",
									"var actualduedatecalculationfield=pm.globals.get('gduedatecalculationfield6');",
									"var actualduedatecalculationtype=pm.globals.get('gduedatecalculationtype6');",
									"var actualduedatedaysdirection=pm.globals.get('gduedatedaysdirection6');",
									"var actualduedatenumberofdays=pm.globals.get('gduedatenumberofdays6');",
									"",
									" pm.test(\"Validate start date calculation field\", function()",
									"        {",
									"            pm.expect(actualstartdatecalculationfield).to.equal(copystartdatecalculationfield);",
									"        });",
									"",
									" pm.test(\"Validate start date calculation type\", function()",
									"        {",
									"            pm.expect(actualstartdatecalculationtype).to.equal(copystartdatecalculationtype);",
									"        });",
									"",
									" pm.test(\"Validate start date days direction\", function()",
									"        {",
									"            pm.expect(actualstartdatedaysdirection).to.equal(copystartdatedaysdirection);",
									"        });",
									"",
									" pm.test(\"Validate start date numberofdays\", function()",
									"        {",
									"            pm.expect(actualstartdatenumberofdays).to.equal(copystartdatenumberofdays);",
									"        });",
									"",
									" pm.test(\"Validate due date calculation field\", function()",
									"        {",
									"            pm.expect(actualduedatecalculationfield).to.equal(copyduedatecalculationfield);",
									"        });",
									"",
									" pm.test(\"Validate due date calculation type\", function()",
									"        {",
									"            pm.expect(actualduedatecalculationtype).to.equal(copyduedatecalculationtype);",
									"        });",
									"",
									" pm.test(\"Validate due date days direction\", function()",
									"        {",
									"            pm.expect(actualduedatedaysdirection).to.equal(copyduedatedaysdirection);",
									"        });",
									"",
									" pm.test(\"Validate due date numberofdays\", function()",
									"        {",
									"            pm.expect(actualduedatenumberofdays).to.equal(copyduedatenumberofdays);",
									"        });",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates({{gcopysurveyTemplateResponse}})",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates({{gcopysurveyTemplateResponse}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Assigning Deactivated Survey Template",
			"item": [
				{
					"name": "Deactivate CampusSurveyTemplate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var staffsurveytemplateid;",
									"var staffsurveytemplatename1;",
									"var statecode;",
									"pm.test(\"StaffSurveyTemplate deactivated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    staffsurveytemplateid = jsonData.cmc_staffsurveytemplateid;",
									"    staffsurveytemplatename1 = jsonData.cmc_staffsurveytemplatename;",
									"    statecode = jsonData.statecode;",
									"});",
									"",
									"console.log('Staffsurveytemplateid:'+staffsurveytemplateid);",
									"console.log('Staffsurveytemplatename:'+staffsurveytemplatename1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var moment = require('moment');",
									"pm.globals.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"statecode\":1\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates({{gcampussurveytemplateid5}})",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates({{gcampussurveytemplateid5}})"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Deactivated  campus survey template to course section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var staffSurveyResponse;",
									"pm.test(\"StaffCourse Assigned to SurveyTemplate\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"    ",
									"    var jsonData =JSON.parse(responseBody);",
									"    staffSurveyResponse = jsonData.staffSurveyResponse;",
									"    var staffSurveyResponse1 = staffSurveyResponse;",
									"    ",
									"    var result=(JSON.parse(staffSurveyResponse).failedStaffCourses.length);",
									"    ",
									"    if (result > 0)",
									"    {",
									"        console.log('Deactivated campus survey template cannot be assigned to Course section');",
									"             ",
									"    }",
									"    else",
									"    {",
									"        throw new Error(\"Campus survey template got Assigned. Which is incorrect\");",
									"    }",
									"    ",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"CourseSections\":\n\t[{\"@odata.type\":\"Microsoft.Dynamics.CRM.mshied_coursesection\",\"mshied_coursesectionid\":\"{{gcourseSectionid}}\"}],\n\t\n\t\"CreateSurveyForAllInstructors\": true,\n\t\"Roles\": null,\n    \"StudentGroup\": null\n}\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates({{gcampussurveytemplateid5}})/Microsoft.Dynamics.CRM.cmc_CreateStaffSurveyFromStaffSurveyTemplate",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates({{gcampussurveytemplateid5}})",
								"Microsoft.Dynamics.CRM.cmc_CreateStaffSurveyFromStaffSurveyTemplate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add questions to Campus Survey template",
			"item": [
				{
					"name": "Create Questions for static-SurveyTemplate 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Questions Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([204,201,202,200]);",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"Questions\":[{\"@odata.type\":\"Microsoft.Dynamics.CRM.cmc_staffsurveyquestion\",\r\n\"cmc_questionorder\":1,\r\n\"cmc_questiontype\":1,\r\n\"cmc_staffsurveyquestionid\":\"00000000-0000-0000-0000-000000000000\",\r\n\"cmc_staffsurveyquestionname\":\"Course Details\"},\r\n\r\n{\"@odata.type\":\"Microsoft.Dynamics.CRM.cmc_staffsurveyquestion\",\r\n\"cmc_choice\":\"[{\\\"id\\\":1,\\\"title\\\":\\\"True\\\"},{\\\"id\\\":2,\\\"title\\\":\\\"False\\\"}]\",\r\n\"cmc_questionorder\":2,\r\n\"cmc_questiontype\":2,\r\n\"cmc_staffsurveyquestionid\":\"00000000-0000-0000-0000-000000000000\",\r\n\"cmc_staffsurveyquestionname\":\"Regular Student- Checkbox\"},\r\n\r\n{\"@odata.type\":\"Microsoft.Dynamics.CRM.cmc_staffsurveyquestion\",\r\n\"cmc_choice\":\"[{\\\"id\\\":1,\\\"title\\\":\\\"MCA\\\"},{\\\"id\\\":2,\\\"title\\\":\\\"MBA\\\"}]\",\r\n\"cmc_questionorder\":3,\r\n\"cmc_questiontype\":3,\r\n\"cmc_staffsurveyquestionid\":\"00000000-0000-0000-0000-000000000000\",\r\n\"cmc_staffsurveyquestionname\":\"Course-Dropdown\"},\r\n\r\n{\"@odata.type\":\"Microsoft.Dynamics.CRM.cmc_staffsurveyquestion\",\r\n\"cmc_choice\":\"[{\\\"id\\\":1,\\\"title\\\":\\\"Male\\\"},{\\\"id\\\":2,\\\"title\\\":\\\"Female\\\"}]\",\r\n\"cmc_questionorder\":4,\r\n\"cmc_questiontype\":4,\r\n\"cmc_staffsurveyquestionid\":\"00000000-0000-0000-0000-000000000000\",\r\n\"cmc_staffsurveyquestionname\":\"Gender\"}]\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates({{gcampussurveytemplateid1}})/Microsoft.Dynamics.CRM.cmc_SurveyTemplateCreateQuestions",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates({{gcampussurveytemplateid1}})",
								"Microsoft.Dynamics.CRM.cmc_SurveyTemplateCreateQuestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Questions for static-SurveyTemplate 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Questions Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([204,201,202,200]);",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"Questions\":[{\"@odata.type\":\"Microsoft.Dynamics.CRM.cmc_staffsurveyquestion\",\r\n\"cmc_questionorder\":1,\r\n\"cmc_questiontype\":1,\r\n\"cmc_staffsurveyquestionid\":\"00000000-0000-0000-0000-000000000000\",\r\n\"cmc_staffsurveyquestionname\":\"Course Details\"},\r\n\r\n{\"@odata.type\":\"Microsoft.Dynamics.CRM.cmc_staffsurveyquestion\",\r\n\"cmc_choice\":\"[{\\\"id\\\":1,\\\"title\\\":\\\"MCA\\\"},{\\\"id\\\":2,\\\"title\\\":\\\"MBA\\\"}]\",\r\n\"cmc_questionorder\":3,\r\n\"cmc_questiontype\":3,\r\n\"cmc_staffsurveyquestionid\":\"00000000-0000-0000-0000-000000000000\",\r\n\"cmc_staffsurveyquestionname\":\"Course-Dropdown\"},\r\n\r\n{\"@odata.type\":\"Microsoft.Dynamics.CRM.cmc_staffsurveyquestion\",\r\n\"cmc_choice\":\"[{\\\"id\\\":1,\\\"title\\\":\\\"Male\\\"},{\\\"id\\\":2,\\\"title\\\":\\\"Female\\\"}]\",\r\n\"cmc_questionorder\":4,\r\n\"cmc_questiontype\":4,\r\n\"cmc_staffsurveyquestionid\":\"00000000-0000-0000-0000-000000000000\",\r\n\"cmc_staffsurveyquestionname\":\"Gender\"}]\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates({{gcampussurveytemplateid11}})/Microsoft.Dynamics.CRM.cmc_SurveyTemplateCreateQuestions",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates({{gcampussurveytemplateid11}})",
								"Microsoft.Dynamics.CRM.cmc_SurveyTemplateCreateQuestions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Assign template to Course section 1 with  only Course history",
			"item": [
				{
					"name": "Assign CST to Course Section 1 with role type Mentor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var staffSurveyResponse;",
									"pm.test(\"Campus Survey Template assigned to Course Section\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([204,201,202,200]);",
									"    ",
									"    var jsonData =JSON.parse(responseBody);",
									"    staffSurveyResponse = jsonData.staffSurveyResponse;",
									"    var staffSurveyResponse1 = staffSurveyResponse;",
									"    ",
									"    var result=(JSON.parse(staffSurveyResponse).failedStaffCourses.length);",
									"    ",
									"    if (result > 0)",
									"    {",
									"",
									"        throw new Error(\"Problem in Assgining Campus survey template to Course section\");",
									"             ",
									"    }",
									"    else",
									"    {",
									"        console.log('Campus survey template is Assigned Successfully');",
									"    }",
									"    ",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"CourseSections\":\n\t[{\"@odata.type\":\"Microsoft.Dynamics.CRM.mshied_coursesection\",\"mshied_coursesectionid\":\"{{gcourseSectionid}}\"}],\n\t\"CreateSurveyForAllInstructors\": false,\n\t\"Roles\":\n\t[{\"@odata.type\": \"Microsoft.Dynamics.CRM.cmc_title\", \"cmc_titleid\": \"{{gtitleID2}}\"}],\n    \"StudentGroup\": null\n\n\t\n\t\n\t\n}\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates({{gcampussurveytemplateid1}})/Microsoft.Dynamics.CRM.cmc_CreateStaffSurveyFromStaffSurveyTemplate",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates({{gcampussurveytemplateid1}})",
								"Microsoft.Dynamics.CRM.cmc_CreateStaffSurveyFromStaffSurveyTemplate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Assign template to Course section 2 with only Student Group",
			"item": [
				{
					"name": "Assign CST to Course Section 2 with All Instructors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var staffSurveyResponse;",
									"pm.test(\"Campus Survey Template assigned to Course Section\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([204,201,202,200]);",
									"    ",
									"    var jsonData =JSON.parse(responseBody);",
									"    staffSurveyResponse = jsonData.staffSurveyResponse;",
									"    var staffSurveyResponse1 = staffSurveyResponse;",
									"     ",
									"    var result=(JSON.parse(staffSurveyResponse).failedStaffCourses.length);",
									"",
									"    ",
									"    if (result > 0)",
									"    {",
									"        throw new Error(\"Problem in Assgining Campus survey template to Course section\");",
									"             ",
									"    }",
									"    else",
									"    {",
									"        console.log('Campus survey template is Assigned Successfully');",
									"    }",
									"    ",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"CourseSections\":\n\t[{\"@odata.type\":\"Microsoft.Dynamics.CRM.mshied_coursesection\",\"mshied_coursesectionid\":\"{{gcourseSectionid2}}\"}],\n\t\"CreateSurveyForAllInstructors\": true,\n\t\"Roles\": null,\n    \"StudentGroup\": \n    {\"@odata.type\": \"Microsoft.Dynamics.CRM.list\", \"listid\": \"{{glistid}}\"}\n\n\n\t\n\t\n\t\n}\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates({{gcampussurveytemplateid11}})/Microsoft.Dynamics.CRM.cmc_CreateStaffSurveyFromStaffSurveyTemplate",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates({{gcampussurveytemplateid11}})",
								"Microsoft.Dynamics.CRM.cmc_CreateStaffSurveyFromStaffSurveyTemplate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Assign template to Course section 3 with Static Student Group",
			"item": [
				{
					"name": "Assign CST to Course Section 3 with All Instructors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var staffSurveyResponse;",
									"pm.test(\"Campus Survey Template assigned to Course Section\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([204,201,202,200]);",
									"    ",
									"    var jsonData =JSON.parse(responseBody);",
									"    staffSurveyResponse = jsonData.staffSurveyResponse;",
									"    var staffSurveyResponse1 = staffSurveyResponse;",
									"     ",
									"    var result=(JSON.parse(staffSurveyResponse).failedStaffCourses.length);",
									"",
									"    ",
									"    if (result > 0)",
									"    {",
									"        throw new Error(\"Problem in Assgining Campus survey template to Course section\");",
									"             ",
									"    }",
									"    else",
									"    {",
									"        console.log('Campus survey template is Assigned Successfully');",
									"    }",
									"    ",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"CourseSections\":\n\t[{\"@odata.type\":\"Microsoft.Dynamics.CRM.mshied_coursesection\",\"mshied_coursesectionid\":\"{{gcourseSectionid3}}\"}],\n\t\"CreateSurveyForAllInstructors\": true,\n\t\"Roles\": null,\n    \"StudentGroup\": \n    {\"@odata.type\": \"Microsoft.Dynamics.CRM.list\", \"listid\": \"{{glistid}}\"}\n\t\n}\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates({{gcampussurveytemplateid11}})/Microsoft.Dynamics.CRM.cmc_CreateStaffSurveyFromStaffSurveyTemplate",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates({{gcampussurveytemplateid11}})",
								"Microsoft.Dynamics.CRM.cmc_CreateStaffSurveyFromStaffSurveyTemplate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Assign template to Course section 4 with Dynamic Student Group",
			"item": [
				{
					"name": "Assign CST to Course Section 4 with All Instructors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var staffSurveyResponse;",
									"pm.test(\"Campus Survey Template assigned to Course Section\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([204,201,202,200]);",
									"    ",
									"    var jsonData =JSON.parse(responseBody);",
									"    staffSurveyResponse = jsonData.staffSurveyResponse;",
									"    var staffSurveyResponse1 = staffSurveyResponse;",
									"     ",
									"    var result=(JSON.parse(staffSurveyResponse).failedStaffCourses.length);",
									"",
									"    ",
									"    if (result > 0)",
									"    {",
									"        throw new Error(\"Problem in Assgining Campus survey template to Course section\");",
									"             ",
									"    }",
									"    else",
									"    {",
									"        console.log('Campus survey template is Assigned Successfully');",
									"    }",
									"    ",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"CourseSections\":\n\t[{\"@odata.type\":\"Microsoft.Dynamics.CRM.mshied_coursesection\",\"mshied_coursesectionid\":\"{{gcourseSectionid4}}\"}],\n\n\"CreateSurveyForAllInstructors\": true,\n\"Roles\": null,\n\"StudentGroup\": \n{\"@odata.type\": \"Microsoft.Dynamics.CRM.list\", \"listid\": \"{{glistid1}}\"}\n\n}\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates({{gcampussurveytemplateid11}})/Microsoft.Dynamics.CRM.cmc_CreateStaffSurveyFromStaffSurveyTemplate",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates({{gcampussurveytemplateid11}})",
								"Microsoft.Dynamics.CRM.cmc_CreateStaffSurveyFromStaffSurveyTemplate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Verify Campus Survey after assignment",
			"item": [
				{
					"name": "Verify Campus Survey for Course Section 1",
					"item": [
						{
							"name": "GetToken_DCRM Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"postman.setGlobalVariable('gaccess_token', data.access_token);",
											"",
											"//pm.environment.set(\"Eaccess_token\", data.access_token);",
											"console.log(pm.globals.get(\"gaccess_token\"));",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{Eadmin_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{Eadmin_secret}}",
											"type": "text"
										},
										{
											"key": "resource",
											"value": "{{Eresource}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://login.microsoftonline.com/{{Eredirectid}}/oauth2/token",
									"protocol": "https",
									"host": [
										"login",
										"microsoftonline",
										"com"
									],
									"path": [
										"{{Eredirectid}}",
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Instructor 1 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"    var result=jsonData.value;",
											"    ",
											"    if(result.length===0)",
											"    {",
											"        console.log(\"Campus survey record is not created for Instructor 1 which is correct\");",
											"    }",
											"     else",
											"        {",
											"            throw new Error(\"Campus survey record is created for this Instructor, which is Incorrect\");",
											"        }",
											"    ",
											"",
											"     ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid}}' and _cmc_instructorid_value eq '{{gcontactid1}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid}}' and _cmc_instructorid_value eq '{{gcontactid1}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Instructor 2 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid1',campussurveyid);",
											"pm.globals.set('gcampussurveyname1',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid1');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid2');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('campussurveytemplatename1');",
											"    var contactName=pm.globals.get('contactName2');",
											"    var coursesectionname=pm.globals.get('coursesectionName');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid}}' and _cmc_instructorid_value eq '{{gcontactid2}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid}}' and _cmc_instructorid_value eq '{{gcontactid2}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Instructor 3 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid2',campussurveyid);",
											"pm.globals.set('gcampussurveyname2',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid1');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid3');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('campussurveytemplatename1');",
											"    var contactName=pm.globals.get('contactName3');",
											"    var coursesectionname=pm.globals.get('coursesectionName');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid}}' and _cmc_instructorid_value eq '{{gcontactid3}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid}}' and _cmc_instructorid_value eq '{{gcontactid3}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Instructor 4 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid3',campussurveyid);",
											"pm.globals.set('gcampussurveyname3',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid1');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid4');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('campussurveytemplatename1');",
											"    var contactName=pm.globals.get('contactName4');",
											"    var coursesectionname=pm.globals.get('coursesectionName');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid}}' and _cmc_instructorid_value eq '{{gcontactid4}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid}}' and _cmc_instructorid_value eq '{{gcontactid4}}'"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verify Campus Survey for Course Section 2",
					"item": [
						{
							"name": "Get Instructor 1 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid4',campussurveyid);",
											"pm.globals.set('gcampussurveyname4',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid11');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid1');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('gcampussurveytemplatename11');",
											"    var contactName=pm.globals.get('contactName1');",
											"    var coursesectionname=pm.globals.get('coursesectionName2');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid2}}' and _cmc_instructorid_value eq '{{gcontactid1}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid2}}' and _cmc_instructorid_value eq '{{gcontactid1}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Instructor 2 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid5',campussurveyid);",
											"pm.globals.set('gcampussurveyname5',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid11');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid2');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('gcampussurveytemplatename11');",
											"    var contactName=pm.globals.get('contactName2');",
											"    var coursesectionname=pm.globals.get('coursesectionName2');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid2}}' and _cmc_instructorid_value eq '{{gcontactid2}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid2}}' and _cmc_instructorid_value eq '{{gcontactid2}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Instructor 3 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid6',campussurveyid);",
											"pm.globals.set('gcampussurveyname6',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid11');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid3');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('gcampussurveytemplatename11');",
											"    var contactName=pm.globals.get('contactName3');",
											"    var coursesectionname=pm.globals.get('coursesectionName2');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid2}}' and _cmc_instructorid_value eq '{{gcontactid3}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid2}}' and _cmc_instructorid_value eq '{{gcontactid3}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Instructor 4 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid7',campussurveyid);",
											"pm.globals.set('gcampussurveyname7',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid11');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid4');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('gcampussurveytemplatename11');",
											"    var contactName=pm.globals.get('contactName4');",
											"    var coursesectionname=pm.globals.get('coursesectionName2');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid2}}' and _cmc_instructorid_value eq '{{gcontactid4}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid2}}' and _cmc_instructorid_value eq '{{gcontactid4}}'"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verify Campus Survey for Course Section 3",
					"item": [
						{
							"name": "Get Instructor 1 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid8',campussurveyid);",
											"pm.globals.set('gcampussurveyname8',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid11');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid1');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('gcampussurveytemplatename11');",
											"    var contactName=pm.globals.get('contactName1');",
											"    var coursesectionname=pm.globals.get('coursesectionName3');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid3}}' and _cmc_instructorid_value eq '{{gcontactid1}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid3}}' and _cmc_instructorid_value eq '{{gcontactid1}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Instructor 2 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid9',campussurveyid);",
											"pm.globals.set('gcampussurveyname9',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid11');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid2');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('gcampussurveytemplatename11');",
											"    var contactName=pm.globals.get('contactName2');",
											"    var coursesectionname=pm.globals.get('coursesectionName3');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid3}}' and _cmc_instructorid_value eq '{{gcontactid2}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid3}}' and _cmc_instructorid_value eq '{{gcontactid2}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Instructor 3 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid10',campussurveyid);",
											"pm.globals.set('gcampussurveyname10',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid11');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid3');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('gcampussurveytemplatename11');",
											"    var contactName=pm.globals.get('contactName3');",
											"    var coursesectionname=pm.globals.get('coursesectionName3');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid3}}' and _cmc_instructorid_value eq '{{gcontactid3}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid3}}' and _cmc_instructorid_value eq '{{gcontactid3}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Instructor 4 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid11',campussurveyid);",
											"pm.globals.set('gcampussurveyname11',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid11');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid4');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('gcampussurveytemplatename11');",
											"    var contactName=pm.globals.get('contactName4');",
											"    var coursesectionname=pm.globals.get('coursesectionName3');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid3}}' and _cmc_instructorid_value eq '{{gcontactid4}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid3}}' and _cmc_instructorid_value eq '{{gcontactid4}}'"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verify Campus Survey for Course Section 4",
					"item": [
						{
							"name": "Get Instructor 1 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid12',campussurveyid);",
											"pm.globals.set('gcampussurveyname12',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid11');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid1');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('gcampussurveytemplatename11');",
											"    var contactName=pm.globals.get('contactName1');",
											"    var coursesectionname=pm.globals.get('coursesectionName4');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid4}}' and _cmc_instructorid_value eq '{{gcontactid1}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid4}}' and _cmc_instructorid_value eq '{{gcontactid1}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Instructor 2 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid13',campussurveyid);",
											"pm.globals.set('gcampussurveyname13',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid11');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid2');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('gcampussurveytemplatename11');",
											"    var contactName=pm.globals.get('contactName2');",
											"    var coursesectionname=pm.globals.get('coursesectionName4');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid4}}' and _cmc_instructorid_value eq '{{gcontactid2}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid4}}' and _cmc_instructorid_value eq '{{gcontactid2}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Instructor 3 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid14',campussurveyid);",
											"pm.globals.set('gcampussurveyname14',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid11');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid3');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('gcampussurveytemplatename11');",
											"    var contactName=pm.globals.get('contactName3');",
											"    var coursesectionname=pm.globals.get('coursesectionName4');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid4}}' and _cmc_instructorid_value eq '{{gcontactid3}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid4}}' and _cmc_instructorid_value eq '{{gcontactid3}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Instructor 4 campus survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var campussurveyid;",
											"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
											"",
											"pm.test(\"Campus survey record after assignment\", function() ",
											"{",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
											"    var jsonData =JSON.parse(responseBody);",
											"",
											"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
											"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
											"",
											"    console.log(\"Campus Survey ID: \"+campussurveyid);",
											"    console.log(\"Campus Survey Name: \" +campussurveyname);",
											"",
											"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
											"    startdate=jsonData.value[0].cmc_startdate;",
											"    duedate=jsonData.value[0].cmc_duedate;",
											"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
											"    issubmitted=jsonData.value[0].cmc_issubmit;",
											"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
											"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
											"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
											"",
											"     ",
											"});",
											"",
											"pm.globals.set('gcampussurveyid15',campussurveyid);",
											"pm.globals.set('gcampussurveyname15',campussurveyname);",
											"",
											"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid11');",
											"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
											"console.log(\"dateFromResponse\"+dateFromResponse);",
											"",
											"var actualcancellationcomment= null;",
											"var actualissubmitted=false;",
											"var actualInstructorID=pm.globals.get('gcontactid4');",
											"var actaulcompletedorcancelleddate=null;",
											"",
											"",
											"//verify the Campus survey autoname",
											"    var campussurveyTemplateName=pm.globals.get('gcampussurveytemplatename11');",
											"    var contactName=pm.globals.get('contactName4');",
											"    var coursesectionname=pm.globals.get('coursesectionName4');",
											"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
											"    console.log(\"concatenatedname: \"+concatenatedname);",
											"  ",
											"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
											"        {",
											"            pm.expect(campussurveyname).to.equal(concatenatedname);",
											"        });",
											"",
											"pm.test(\"Validate campus survey template field\", function()",
											"        {",
											"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
											"        });",
											"",
											"",
											"pm.test(\"Validate cancellation comment field\", function()",
											"        {",
											"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
											"        });",
											"",
											"pm.test(\"Validate is submitted field\", function()",
											"        {",
											"            pm.expect(actualissubmitted).to.equal(issubmitted);",
											"        });",
											"",
											"pm.test(\"Validate Instructor ID field\", function()",
											"        {",
											"            pm.expect(actualInstructorID).to.equal(instructorID);",
											"        });",
											"",
											"pm.test(\"Validate is Completed or cancelled date field\", function()",
											"        {",
											"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
											"        });",
											"",
											"",
											"setTimeout(function () { }, 120000); ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{gaccess_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Prefer",
										"value": "return=representation"
									}
								],
								"url": {
									"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid4}}' and _cmc_instructorid_value eq '{{gcontactid4}}'",
									"host": [
										"{{Eresource}}api"
									],
									"path": [
										"data",
										"{{Eversion}}",
										"cmc_staffsurveies"
									],
									"query": [
										{
											"key": "$filter",
											"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid4}}' and _cmc_instructorid_value eq '{{gcontactid4}}'"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Verify Survey responses in all 4 course sections",
			"item": [
				{
					"name": "GetSurveyResponses for Course section 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var staffsurveyresponseid;",
									"",
									"pm.test(\"Check the survey responses for Course section 1\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var length=jsonData.value.length;",
									"    var contact1=pm.globals.get('gcontactidStudent');",
									"    var contact2=pm.globals.get('gcontactidStudent2');",
									"    var contact3=pm.globals.get('gcontactidStudent3');",
									"",
									"    if(length === 3)",
									"    {",
									"        for(var i=0;i<length ;i++)",
									"        {",
									"            if(jsonData.value[i]._cmc_contactid_value===contact1)",
									"            {",
									"             console.log(\"Student record 1 is present as expected\");",
									"            }",
									"            if(jsonData.value[i]._cmc_contactid_value===contact2)",
									"            {",
									"             console.log(\"Student record 2 is present as expected\");",
									"            }",
									"            if(jsonData.value[i]._cmc_contactid_value===contact3)",
									"            {",
									"             console.log(\"Student record 3 is present as expected\");",
									"            }",
									"       ",
									"        }     ",
									"          ",
									"    }",
									"   ",
									"    else",
									"    {",
									"            throw new Error(\"No record found\");",
									"    }",
									" ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveyresponses?$filter=_cmc_staffsurveyid_value eq {{gcampussurveyid1}}",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveyresponses"
							],
							"query": [
								{
									"key": "$filter",
									"value": "_cmc_staffsurveyid_value eq {{gcampussurveyid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSurveyResponses for Course section 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the survey responses for Course section 2\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var length=jsonData.value.length;",
									"   ",
									"    if(length === 0)",
									"    {",
									"       ",
									"        console.log(\"No student records are present as expected\");   ",
									"          ",
									"    }",
									"   ",
									"    else",
									"    {",
									"            throw new Error(\"Student records are present which is wrong\");",
									"    }",
									" ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveyresponses?$filter=_cmc_staffsurveyid_value eq {{gcampussurveyid4}}",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveyresponses"
							],
							"query": [
								{
									"key": "$filter",
									"value": "_cmc_staffsurveyid_value eq {{gcampussurveyid4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSurveyResponses for Course section 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Check the survey responses for Course section 3\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var length=jsonData.value.length;",
									"    var contact1=pm.globals.get('gcontactidStudent');",
									"    var contact2=pm.globals.get('gcontactidStudent2');",
									"",
									"    if(length === 2)",
									"    {",
									"        for(var i=0;i<length ;i++)",
									"        {",
									"            if(jsonData.value[i]._cmc_contactid_value===contact1)",
									"            {",
									"             console.log(\"Student record 1 is present as expected\");",
									"            }",
									"            if(jsonData.value[i]._cmc_contactid_value===contact2)",
									"            {",
									"             console.log(\"Student record 2 is present as expected\");",
									"            }",
									"        }     ",
									"          ",
									"    }",
									"   ",
									"    else",
									"    {",
									"            throw new Error(\"No record found\");",
									"    }",
									" ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveyresponses?$filter=_cmc_staffsurveyid_value eq {{gcampussurveyid8}}",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveyresponses"
							],
							"query": [
								{
									"key": "$filter",
									"value": "_cmc_staffsurveyid_value eq {{gcampussurveyid8}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSurveyResponses for Course section 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Check the survey responses for Course section 4\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var length=jsonData.value.length;",
									"    var contact4=pm.globals.get('gcontactidStudent4');",
									"    var contact5=pm.globals.get('gcontactidStudent5');",
									"",
									"    if(length === 2)",
									"    {",
									"        for(var i=0;i<length ;i++)",
									"        {",
									"            if(jsonData.value[i]._cmc_contactid_value===contact4)",
									"            {",
									"             console.log(\"Student record 4 is present as expected\");",
									"            }",
									"            if(jsonData.value[i]._cmc_contactid_value===contact5)",
									"            {",
									"             console.log(\"Student record 5 is present as expected\");",
									"            }",
									"        }     ",
									"          ",
									"    }",
									"   ",
									"    else",
									"    {",
									"            throw new Error(\"No record found\");",
									"    }",
									" ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveyresponses?$filter=_cmc_staffsurveyid_value eq {{gcampussurveyid12}}",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveyresponses"
							],
							"query": [
								{
									"key": "$filter",
									"value": "_cmc_staffsurveyid_value eq {{gcampussurveyid12}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Submit the Survey and verify Status Reason",
			"item": [
				{
					"name": "GetSurveyResponsesID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var staffsurveyresponseid;",
									"",
									"pm.test(\"staffsurveyresponseid\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    staffsurveyresponseid = jsonData.value[0].cmc_staffsurveyresponseid;",
									" ",
									"});",
									"",
									"pm.globals.set('gstaffsurveyresponseid',staffsurveyresponseid);",
									"",
									"console.log('gstaffsurveyresponseid:'+staffsurveyresponseid);",
									"",
									"console.log(pm.globals.get(\"gstaffsurveyresponseid\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveyresponses?$select=cmc_staffsurveyresponseid&$filter=_cmc_staffsurveyid_value eq {{gcampussurveyid1}}",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveyresponses"
							],
							"query": [
								{
									"key": "$select",
									"value": "cmc_staffsurveyresponseid"
								},
								{
									"key": "$filter",
									"value": "_cmc_staffsurveyid_value eq {{gcampussurveyid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetQuestionIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var Questions = [];",
									"",
									"pm.test(\"QuestionsIDs fetched\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    data = jsonData.cmc_staffsurvey_cmc_staffsurveyquestion_campussurvey;",
									"    ",
									"    for(var i=0;i<data.length;i++)",
									"    {",
									"       Questions.push(data[i].cmc_staffsurveyquestionid);",
									"    }",
									"});",
									"",
									"pm.globals.set('gstaffsurveyquestionid', Questions); ",
									"console.log(pm.globals.get('gstaffsurveyquestionid'));",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies({{gcampussurveyid1}})?$expand=cmc_staffsurvey_cmc_staffsurveyquestion_campussurvey",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveies({{gcampussurveyid1}})"
							],
							"query": [
								{
									"key": "$expand",
									"value": "cmc_staffsurvey_cmc_staffsurveyquestion_campussurvey"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AnswerforQuestions and submit the survey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Answered for all Questions\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									" ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var questionId = pm.globals.get('gstaffsurveyquestionid');",
									"",
									"for(var i=0;i<questionId.length;i++){",
									"    pm.globals.set('gstaffsurveyquestionid'+i,questionId[i]);",
									"    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"isSubmitted\":1,\r\n\"surveyData\":\r\n[{\"@odata.type\":\"Microsoft.Dynamics.CRM.cmc_staffsurveyquestionresponse\",\r\n\"cmc_response\":\"Computer Science\",\r\n\"cmc_staffsurveyquestionid@odata.bind\":\"/cmc_staffsurveyquestions({{gstaffsurveyquestionid0}})\",\r\n\"cmc_staffsurveyquestionresponseid\":\"00000000-0000-0000-0000-000000000000\",\r\n\"cmc_staffsurveyresponseid@odata.bind\":\"/cmc_staffsurveyresponses({{gstaffsurveyresponseid}})\"\r\n},\r\n\r\n{\"@odata.type\":\"Microsoft.Dynamics.CRM.cmc_staffsurveyquestionresponse\",\r\n\"cmc_response\":\"[{\\\"id\\\":1,\\\"title\\\":\\\"True\\\",\\\"checked\\\":true},{\\\"id\\\":2,\\\"title\\\":\\\"False\\\",\\\"checked\\\":false}]\",\r\n\"cmc_staffsurveyquestionid@odata.bind\":\"/cmc_staffsurveyquestions({{gstaffsurveyquestionid1}})\",\r\n\"cmc_staffsurveyquestionresponseid\":\"00000000-0000-0000-0000-000000000000\",\r\n\"cmc_staffsurveyresponseid@odata.bind\":\"/cmc_staffsurveyresponses({{gstaffsurveyresponseid}})\"},\r\n\r\n{\"@odata.type\":\"Microsoft.Dynamics.CRM.cmc_staffsurveyquestionresponse\",\r\n\"cmc_response\":\"1\",\r\n\"cmc_staffsurveyquestionid@odata.bind\":\"/cmc_staffsurveyquestions({{gstaffsurveyquestionid2}})\",\r\n\"cmc_staffsurveyquestionresponseid\":\"00000000-0000-0000-0000-000000000000\",\r\n\"cmc_staffsurveyresponseid@odata.bind\":\"/cmc_staffsurveyresponses({{gstaffsurveyresponseid}})\"\r\n},\r\n\r\n{\"@odata.type\": \"Microsoft.Dynamics.CRM.cmc_staffsurveyquestionresponse\",\r\n\"cmc_response\":\"1\",\r\n\"cmc_staffsurveyquestionid@odata.bind\":\"/cmc_staffsurveyquestions({{gstaffsurveyquestionid3}})\",\r\n\"cmc_staffsurveyquestionresponseid\":\"00000000-0000-0000-0000-000000000000\",\r\n\"cmc_staffsurveyresponseid@odata.bind\":\"/cmc_staffsurveyresponses({{gstaffsurveyresponseid}})\"}]\r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies({{gcampussurveyid1}})/Microsoft.Dynamics.CRM.cmc_CreateUpdateStaffSurveyQuestionResponses",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveies({{gcampussurveyid1}})",
								"Microsoft.Dynamics.CRM.cmc_CreateUpdateStaffSurveyQuestionResponses"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Verify contact's feedback after survey submission",
			"item": [
				{
					"name": "Verify feedback of student After survey submission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Verifying Instructor's feedback\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"     ",
									"    var result =jsonData.cmc_contact_cmc_staffsurveyresponse;",
									"",
									"    var recordlength=result.length;",
									"",
									"    if(recordlength===0)",
									"    {",
									"        throw new Error(\"Instructor's feedback record is not created even after the feedback is submitted\");",
									"    }",
									"    else",
									"    {",
									"        var actualsurveyresponseID=pm.globals.get('gstaffsurveyresponseid');",
									"        var actualcampussurveyID=pm.globals.get('gcampussurveyid1');",
									"        for(var i=0;i<recordlength ;i++)",
									"        {",
									"            if(result[i]._cmc_staffsurveyid_value===actualcampussurveyID)",
									"            {",
									"             var campussurveyresponseID=result[i].cmc_staffsurveyresponseid;",
									"             var campussurveyID=result[i]._cmc_staffsurveyid_value;",
									"             var campussurveyResponseName=result[i].cmc_staffsurveyresponsename;",
									"             console.log(\"Instructor has provided feedback to Student 1\");",
									"             ",
									"             pm.test(\"Validate Campus Survey field\", function()",
									"             {",
									"                pm.expect(actualcampussurveyID).to.equal(campussurveyID);",
									"             });",
									"            ",
									"            console.log(\"Campus survey response name is : \"+campussurveyResponseName);",
									"",
									"            }",
									"        }",
									"    }",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}contacts({{gcontactidStudent}})?$expand=cmc_contact_cmc_staffsurveyresponse",
							"host": [
								"{{Eresource_URL}}contacts({{gcontactidStudent}})"
							],
							"query": [
								{
									"key": "$expand",
									"value": "cmc_contact_cmc_staffsurveyresponse"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Activate the Completed Survey with 'New' status",
			"item": [
				{
					"name": "Get Deactivated(Completed) Campus Survey record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveyid;",
									"var campussurveyname,campussurveyTemplateID,statecode,statuscode,cacellationcomment,issubmitted,instructorID,completedorcancelleddate;",
									"",
									"pm.test(\"Campus survey record after assignment\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"",
									"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
									"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
									"    console.log(\"Campus Survey ID: \"+campussurveyid);",
									"    console.log(\"Campus Survey Name: \" +campussurveyname);",
									"",
									"    statecode=jsonData.value[0].statecode;",
									"    statuscode=jsonData.value[0].statuscode;",
									"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
									"    issubmitted=jsonData.value[0].cmc_issubmit;",
									"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
									"",
									"     ",
									"});",
									"",
									"pm.globals.set('gcampussurveyidnew',campussurveyid);",
									"pm.globals.set('gcampussurveynamenew',campussurveyname);",
									"",
									"var actualcancellationcomment= null;",
									"var actualissubmitted=true;",
									"var actaulcompletedorcancelleddate=pm.globals.get('timestamp');",
									"var actualstatecode=1;",
									"var actualstatuscode=175490004;",
									"",
									"",
									"pm.test(\"Validate statecode field\", function()",
									"        {",
									"            pm.expect(actualstatecode).to.equal(statecode);",
									"        });",
									"",
									"pm.test(\"Validate statuscode field\", function()",
									"        {",
									"            pm.expect(actualstatuscode).to.equal(statuscode);",
									"        });",
									"",
									"pm.test(\"Validate cancellation comment field\", function()",
									"        {",
									"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
									"        });",
									"",
									"pm.test(\"Validate is submitted field\", function()",
									"        {",
									"            pm.expect(actualissubmitted).to.equal(issubmitted);",
									"        });",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid}}' and _cmc_instructorid_value eq '{{gcontactid2}}'",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveies"
							],
							"query": [
								{
									"key": "$filter",
									"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid}}' and _cmc_instructorid_value eq '{{gcontactid2}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate the deactivated Campus survey-New",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveyid;",
									"var campussurveyname,campussurveyTemplateID,statecode,statuscode,cacellationcomment,issubmitted,instructorID,completedorcancelleddate;",
									"",
									"pm.test(\"Campus survey record with New\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"",
									"    campussurveyid = jsonData.cmc_staffsurveyid;",
									"    campussurveyname = jsonData.cmc_staffsurveyname;",
									"    console.log(\"Campus Survey ID: \"+campussurveyid);",
									"    console.log(\"Campus Survey Name: \" +campussurveyname);",
									"",
									"    statecode=jsonData.statecode;",
									"    statuscode=jsonData.statuscode;",
									"    cacellationcomment=jsonData.cmc_cancellationcomment;",
									"    issubmitted=jsonData.cmc_issubmit;",
									"    completedorcancelleddate=jsonData.cmc_completedcancelleddate;",
									"",
									"     ",
									"});",
									"",
									"pm.globals.set('gcampussurveyidnew',campussurveyid);",
									"pm.globals.set('gcampussurveynamenew',campussurveyname);",
									"",
									"var actualcancellationcomment= null;",
									"var actualissubmitted=true;",
									"var actaulcompletedorcancelleddate=null;",
									"var actualstatecode=0;",
									"var actualstatuscode=175490000;",
									"",
									"",
									"pm.test(\"Validate statecode field\", function()",
									"        {",
									"            pm.expect(actualstatecode).to.equal(statecode);",
									"        });",
									"",
									"pm.test(\"Validate statuscode field\", function()",
									"        {",
									"            pm.expect(actualstatuscode).to.equal(statuscode);",
									"        });",
									"pm.test(\"Validate is submitted field\", function()",
									"        {",
									"            pm.expect(actualissubmitted).to.equal(issubmitted);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"statecode\": 0,\r\n    \"statuscode\": 175490000\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies({{gcampussurveyidnew}})",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveies({{gcampussurveyidnew}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deactivate the campus survey with 'Cancel' status",
			"item": [
				{
					"name": "Deactivate by cancelling the campus survey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveyid;",
									"var campussurveyname,campussurveyTemplateID,statecode,statuscode,cacellationcomment,issubmitted,instructorID,completedorcancelleddate;",
									"",
									"pm.test(\"Campus survey record to cancel\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"",
									"    campussurveyid = jsonData.cmc_staffsurveyid;",
									"    campussurveyname = jsonData.cmc_staffsurveyname;",
									"    console.log(\"Campus Survey ID: \"+campussurveyid);",
									"    console.log(\"Campus Survey Name: \" +campussurveyname);",
									"",
									"    statecode=jsonData.statecode;",
									"    statuscode=jsonData.statuscode;",
									"    cacellationcomment=jsonData.cmc_cancellationcomment;",
									"    issubmitted=jsonData.cmc_issubmit;",
									"    completedorcancelleddate=jsonData.cmc_completedcancelleddate;",
									"",
									"     ",
									"});",
									"",
									"pm.globals.set('gcampussurveyidnew',campussurveyid);",
									"pm.globals.set('gcampussurveynamenew',campussurveyname);",
									"",
									"var actualcancellationcomment= \"No reason\";",
									"var actualissubmitted=true;",
									"var actaulcompletedorcancelleddate=pm.globals.get('timestamp');",
									"var actualstatecode=1;",
									"var actualstatuscode=175490003;",
									"",
									"",
									"pm.test(\"Validate statecode field\", function()",
									"        {",
									"            pm.expect(actualstatecode).to.equal(statecode);",
									"        });",
									"",
									"pm.test(\"Validate statuscode field\", function()",
									"        {",
									"            pm.expect(actualstatuscode).to.equal(statuscode);",
									"        });",
									"",
									"pm.test(\"Validate cancellation comment field\", function()",
									"        {",
									"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
									"        });",
									"",
									"pm.test(\"Validate is submitted field\", function()",
									"        {",
									"            pm.expect(actualissubmitted).to.equal(issubmitted);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"statecode\": 1,\r\n    \"statuscode\": 175490003,\r\n    \"cmc_cancellationcomment\": \"No reason\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies({{gcampussurveyidnew}})",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveies({{gcampussurveyidnew}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Activate back the campus survey with 'In-progress' status",
			"item": [
				{
					"name": "Activate by providing 'In-progress' to campus survey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveyid;",
									"var campussurveyname,campussurveyTemplateID,statecode,statuscode,cacellationcomment,issubmitted,instructorID,completedorcancelleddate;",
									"",
									"pm.test(\"Campus survey record to in-progress\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"",
									"    campussurveyid = jsonData.cmc_staffsurveyid;",
									"    campussurveyname = jsonData.cmc_staffsurveyname;",
									"    console.log(\"Campus Survey ID: \"+campussurveyid);",
									"    console.log(\"Campus Survey Name: \" +campussurveyname);",
									"",
									"    statecode=jsonData.statecode;",
									"    statuscode=jsonData.statuscode;",
									"    cacellationcomment=jsonData.cmc_cancellationcomment;",
									"    issubmitted=jsonData.cmc_issubmit;",
									"    completedorcancelleddate=jsonData.cmc_completedcancelleddate;",
									"",
									"     ",
									"});",
									"",
									"pm.globals.set('gcampussurveyidnew',campussurveyid);",
									"pm.globals.set('gcampussurveynamenew',campussurveyname);",
									"",
									"var actualcancellationcomment= null;",
									"var actualissubmitted=true;",
									"var actaulcompletedorcancelleddate=null;",
									"var actualstatecode=0;",
									"var actualstatuscode=175490001;",
									"",
									"",
									"pm.test(\"Validate statecode field\", function()",
									"        {",
									"            pm.expect(actualstatecode).to.equal(statecode);",
									"        });",
									"",
									"pm.test(\"Validate statuscode field\", function()",
									"        {",
									"            pm.expect(actualstatuscode).to.equal(statuscode);",
									"        });",
									"",
									"pm.test(\"Validate is submitted field\", function()",
									"        {",
									"            pm.expect(actualissubmitted).to.equal(issubmitted);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"statecode\": 0,\r\n    \"statuscode\": 175490001\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies({{gcampussurveyidnew}})",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveies({{gcampussurveyidnew}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deactivate and activate back with 'Overdue' status",
			"item": [
				{
					"name": "Deactivating by providing 'complete' to campus survey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveyid;",
									"var campussurveyname,campussurveyTemplateID,statecode,statuscode,cacellationcomment,issubmitted,instructorID,completedorcancelleddate;",
									"",
									"pm.test(\"Campus survey record to Complete\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"",
									"    campussurveyid = jsonData.cmc_staffsurveyid;",
									"    campussurveyname = jsonData.cmc_staffsurveyname;",
									"    console.log(\"Campus Survey ID: \"+campussurveyid);",
									"    console.log(\"Campus Survey Name: \" +campussurveyname);",
									"",
									"    statecode=jsonData.statecode;",
									"    statuscode=jsonData.statuscode;",
									"    cacellationcomment=jsonData.cmc_cancellationcomment;",
									"    issubmitted=jsonData.cmc_issubmit;",
									"    completedorcancelleddate=jsonData.cmc_completedcancelleddate;",
									"",
									"     ",
									"});",
									"",
									"pm.globals.set('gcampussurveyidnew',campussurveyid);",
									"pm.globals.set('gcampussurveynamenew',campussurveyname);",
									"",
									"var actualcancellationcomment= null;",
									"var actualissubmitted=true;",
									"var actaulcompletedorcancelleddate=pm.globals.get('timestamp');",
									"var actualstatecode=1;",
									"var actualstatuscode=175490004;",
									"",
									"",
									"pm.test(\"Validate statecode field\", function()",
									"        {",
									"            pm.expect(actualstatecode).to.equal(statecode);",
									"        });",
									"",
									"pm.test(\"Validate statuscode field\", function()",
									"        {",
									"            pm.expect(actualstatuscode).to.equal(statuscode);",
									"        });",
									"",
									"pm.test(\"Validate is submitted field\", function()",
									"        {",
									"            pm.expect(actualissubmitted).to.equal(issubmitted);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"statecode\": 1,\r\n    \"statuscode\": 175490004\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies({{gcampussurveyidnew}})",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveies({{gcampussurveyidnew}})"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate by providing 'Overdue' to campus survey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveyid;",
									"var campussurveyname,campussurveyTemplateID,statecode,statuscode,cacellationcomment,issubmitted,instructorID,completedorcancelleddate;",
									"",
									"pm.test(\"Campus survey record to Complete\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"",
									"    campussurveyid = jsonData.cmc_staffsurveyid;",
									"    campussurveyname = jsonData.cmc_staffsurveyname;",
									"    console.log(\"Campus Survey ID: \"+campussurveyid);",
									"    console.log(\"Campus Survey Name: \" +campussurveyname);",
									"",
									"    statecode=jsonData.statecode;",
									"    statuscode=jsonData.statuscode;",
									"    cacellationcomment=jsonData.cmc_cancellationcomment;",
									"    issubmitted=jsonData.cmc_issubmit;",
									"    completedorcancelleddate=jsonData.cmc_completedcancelleddate;",
									"",
									"     ",
									"});",
									"",
									"pm.globals.set('gcampussurveyidnew',campussurveyid);",
									"pm.globals.set('gcampussurveynamenew',campussurveyname);",
									"",
									"var actualcancellationcomment= null;",
									"var actualissubmitted=true;",
									"var actaulcompletedorcancelleddate=null;",
									"var actualstatecode=0;",
									"var actualstatuscode=175490002;",
									"",
									"",
									"pm.test(\"Validate statecode field\", function()",
									"        {",
									"            pm.expect(actualstatecode).to.equal(statecode);",
									"        });",
									"",
									"pm.test(\"Validate statuscode field\", function()",
									"        {",
									"            pm.expect(actualstatuscode).to.equal(statuscode);",
									"        });",
									"",
									"pm.test(\"Validate is submitted field\", function()",
									"        {",
									"            pm.expect(actualissubmitted).to.equal(issubmitted);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"statecode\": 0,\r\n    \"statuscode\": 175490002\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies({{gcampussurveyidnew}})",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveies({{gcampussurveyidnew}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Campus Survey directly and associate co-instructors to it",
			"item": [
				{
					"name": "Create Campus Survey record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveyId;",
									"pm.test(\"Campus survey\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    campussurveyId=jsonData.cmc_staffsurveyid;",
									"    var campussurveyname=jsonData.cmc_staffsurveyname;",
									"",
									"    console.log(\"Campus survey name is: \"+campussurveyname);",
									"   ",
									"    ",
									"});",
									"",
									"pm.globals.set('gcampussurveyId',campussurveyId);",
									"",
									"setTimeout(function () { }, 60000); ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionid@odata.bind\": \"/mshied_coursesections({{gcourseSectionid}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactid1}})\",\r\n    \"cmc_staffsurveyname\": \"API-Campus Survey-{{$randomInt}}\",\r\n    \"cmc_staffsurveytemplateid@odata.bind\": \"/cmc_staffsurveytemplates({{gcampussurveytemplateid3}})\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Associate co-instructors to Campus Survey record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Campus survey\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"   ",
									"   ",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n   \"Instructors\":\"[\\\"{{gcontactid2}}\\\",\\\"{{gcontactid3}}\\\",\\\"{{gcontactid4}}\\\"]\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies({{gcampussurveyId}})/Microsoft.Dynamics.CRM.cmc_AssociateDisassociateAdditionalSurveyInstructor/",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveies({{gcampussurveyId}})",
								"Microsoft.Dynamics.CRM.cmc_AssociateDisassociateAdditionalSurveyInstructor",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get associate responders for Campus survey after association",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Check the survey responders for Campus Survey\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    //var length=jsonData.cmc_staffsurvey_associateresponder;",
									"    var result =jsonData.cmc_staffsurvey_associateresponder;",
									"    var instructorId1=pm.globals.get('gcontactid1');",
									"    var instructorId2=pm.globals.get('gcontactid2');",
									"    var instructorId3=pm.globals.get('gcontactid3');",
									"    var instructorId4=pm.globals.get('gcontactid4');",
									"",
									"    if(result.length === 3)",
									"    {",
									"        for(var i=0;i<result.length ;i++)",
									"        {",
									"            if(result[i].contactid===instructorId2)",
									"            {",
									"             console.log(\"Instructor 2 is associated as expected\");",
									"            }",
									"            if(result[i].contactid===instructorId3)",
									"            {",
									"             console.log(\"Instructor 3 is associated as expected\");",
									"            }",
									"            if(result[i].contactid===instructorId4)",
									"            {",
									"             console.log(\"Instructor 4 is associated as expected\");",
									"            }",
									"       ",
									"        }     ",
									"          ",
									"    }",
									"   ",
									"    else",
									"    {",
									"            throw new Error(\"No record found\");",
									"    }",
									" ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies({{gcampussurveyId}})?$expand=cmc_staffsurvey_associateresponder",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveies({{gcampussurveyId}})"
							],
							"query": [
								{
									"key": "$expand",
									"value": "cmc_staffsurvey_associateresponder"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Dis-associate co-instructor 2 from Campus Survey record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Campus survey\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"   ",
									"   ",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n   \"Instructors\":\"[\\\"{{gcontactid3}}\\\",\\\"{{gcontactid4}}\\\"]\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies({{gcampussurveyId}})/Microsoft.Dynamics.CRM.cmc_AssociateDisassociateAdditionalSurveyInstructor/",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveies({{gcampussurveyId}})",
								"Microsoft.Dynamics.CRM.cmc_AssociateDisassociateAdditionalSurveyInstructor",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get associate responders for Campus survey after disassociation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Check the survey responders for Campus Survey\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    //var length=jsonData.cmc_staffsurvey_associateresponder;",
									"    var result =jsonData.cmc_staffsurvey_associateresponder;",
									"    var instructorId1=pm.globals.get('gcontactid1');",
									"    var instructorId2=pm.globals.get('gcontactid2');",
									"    var instructorId3=pm.globals.get('gcontactid3');",
									"    var instructorId4=pm.globals.get('gcontactid4');",
									"",
									"    if(result.length === 2)",
									"    {",
									"        for(var i=0;i<result.length ;i++)",
									"        {",
									"            if(result[i].contactid===instructorId3)",
									"            {",
									"             console.log(\"Instructor 3 is associated as expected\");",
									"            }",
									"            if(result[i].contactid===instructorId4)",
									"            {",
									"             console.log(\"Instructor 4 is associated as expected\");",
									"            }",
									"       ",
									"        }     ",
									"          ",
									"    }",
									"   ",
									"    else",
									"    {",
									"            throw new Error(\"No record found\");",
									"    }",
									" ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies({{gcampussurveyId}})?$expand=cmc_staffsurvey_associateresponder",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveies({{gcampussurveyId}})"
							],
							"query": [
								{
									"key": "$expand",
									"value": "cmc_staffsurvey_associateresponder"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Email Activity check for faculty",
			"item": [
				{
					"name": "GetToken_DCRM Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setGlobalVariable('gaccess_token', data.access_token);",
									"",
									"//pm.environment.set(\"Eaccess_token\", data.access_token);",
									"console.log(pm.globals.get(\"gaccess_token\"));",
									"",
									"//Genarate global session value",
									"",
									"var number = Math.floor(Math.random() * 1000);",
									"pm.globals.set('globalsessionvalue',number)",
									"",
									"console.log(pm.globals.get(\"globalsessionvalue\"));",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{Eadmin_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{Eadmin_secret}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{Eresource}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{Eredirectid}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{Eredirectid}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Faculty details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var extraRcord=[];",
									"pm.test(\"Get Faculty \", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var data2 = jsonData.value;    ",
									"  console.log(data2);",
									"    for(var i=0;i<data2.length;i++)",
									"    {",
									"        if((data2[i].contactid)!=\"\")",
									"            {",
									"                extraRcord.add(data2[i].contactid);",
									"            }",
									"        else",
									"            console.log(\"Contact ID : \"+ data2[i].contactid);",
									"            console.log(\"Contact full Name: \"+data2[i].fullname);",
									"            ",
									"    }",
									"console.log(extraRcord);",
									"console.log(\"Extra Record : \"+extraRcord.length);",
									" ",
									"});      ",
									"",
									"pm.globals.set('gcontactiddelfac',extraRcord);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}contacts?$filter=contains(emailaddress1,'AnkurJ@campusmgmt.com')",
							"host": [
								"{{Eresource_URL}}contacts"
							],
							"query": [
								{
									"key": "$filter",
									"value": "contains(emailaddress1,'AnkurJ@campusmgmt.com')"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete faculty contact if exsist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var gLoops=pm.globals.get(\"gcontactiddelfac\");",
									"console.log(gLoops.length);",
									"",
									"pm.test(\"Delete Contact\",function()",
									"{",
									"",
									"if((pm.response.code===200) || (pm.response.code===201) || (pm.response.code===202) || (pm.response.code===204))",
									"{",
									"if (gLoops && gLoops.length>0)",
									"{",
									"   ",
									"   postman.setNextRequest(\"Delete faculty contact if exsist\");",
									"}\t",
									"",
									"}",
									"else",
									"{",
									"console.log(\"record does not exist in the org\");",
									"}",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var  extraid =pm.globals.get(\"gcontactiddelfac\");\r",
									"var currentvalue=extraid.shift();\r",
									"console.log(currentvalue);\r",
									"\r",
									"pm.globals.set(\"g1contactiddelfac\",currentvalue);\r",
									"\r",
									"pm.globals.set(\"gcontactiddelfac\",extraid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}contacts({{g1contactiddelfac}})",
							"host": [
								"{{Eresource_URL}}contacts({{g1contactiddelfac}})"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contact with user AnkurJain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contactid,contactName;",
									"pm.test(\"Contact Ankur Jain Created\", function() ",
									"{",
									"    if((pm.response.code===412) || (pm.response.code===402) || (pm.response.code===404))",
									"    {",
									"        var jsonData1 =JSON.parse(responseBody);",
									"        var message = jsonData1.error.message;",
									"        console.log(message);",
									"    }",
									"   else ",
									"    {",
									"               ",
									"        var jsonData =JSON.parse(responseBody);",
									"        contactid = jsonData.contactid;",
									"        contactName = jsonData.fullname;",
									"        console.log(\"Contact ID is: \"+contactid);",
									"        console.log(\"Contact Name is: \"+contactName);",
									"        ",
									"    }",
									"}); ",
									"",
									"setTimeout(function () { }, 120000); ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "MSCRM.SuppressDuplicateDetection",
								"value": "false",
								"type": "text"
							},
							{
								"key": "If-None-Match",
								"value": "null",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastname\": \"Jain\",\r\n    \"firstname\": \"Ankur\",\r\n    \"mshied_contacttype\": \"494280003\",\r\n    \"emailaddress1\": \"AnkurJ@campusmgmt.com\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}contacts",
							"host": [
								"{{Eresource_URL}}contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate invitation email for faculty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Get Email Activity\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var length=jsonData.value.length;",
									"    var createdOn=pm.environment.get('timestamp');",
									"    console.log(\"Created On: \"+createdOn);",
									"",
									"    if(length>0)",
									"    {",
									"        for(var i=0;i<length ;i++)",
									"        {",
									"            if(jsonData.value[i].createdon.includes(createdOn))",
									"            {",
									"             var actualSubject=jsonData.value[i].subject;",
									"             var actualDescription=jsonData.value[i].description;",
									"",
									"             console.log(\"Email Activity for Registration invitation is created\");",
									"             console.log(\"Email Subject: \"+actualSubject);",
									"             console.log(\"Email Description: \"+actualDescription);",
									"            }",
									"                  ",
									"        }     ",
									"          ",
									"    }",
									"   ",
									"    else",
									"    {",
									"            throw new Error(\"No record found\");",
									"    }",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}emails?$count=true&$filter=contains(torecipients,'AnkurJ@campusmgmt.com') and contains(subject,'been invited')",
							"host": [
								"{{Eresource_URL}}emails"
							],
							"query": [
								{
									"key": "$count",
									"value": "true"
								},
								{
									"key": "$filter",
									"value": "contains(torecipients,'AnkurJ@campusmgmt.com') and contains(subject,'been invited')"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Courses Section for adding faculty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseSectionid,coursesectionName,courseID,location,coursedaytime;",
									"pm.test(\"Course Section  Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseSectionid = jsonData.mshied_coursesectionid;",
									"    coursesectionName = jsonData.mshied_name;",
									"    courseID=jsonData._mshied_courseid_value;",
									"    location=jsonData.mshied_location;",
									"    coursedaytime=jsonData.mshied_coursedaytime;",
									"  ",
									" var courseid=pm.globals.get(\"gcourseid\");",
									"    ",
									"     pm.test(\"course associated to course section\", function()",
									"        {",
									"            pm.expect(courseid).to.equal(courseID);",
									"        });",
									"    ",
									"    //verify the course section autoname",
									"    var coursename=pm.globals.get('gcoursename1');",
									"    var concatenatedname=coursename+' '+'-'+' '+location+' '+'-'+' '+coursedaytime;",
									"    console.log(\"concatenatedname: \"+concatenatedname);",
									"  ",
									"        pm.test(\"course section autoname workflow is matching\", function()",
									"        {",
									"            pm.expect(coursesectionName).to.equal(concatenatedname);",
									"        });",
									"    ",
									"",
									"});",
									"",
									"pm.globals.set('gcourseSectionid111', courseSectionid);",
									"console.log('Course Section ID'+courseSectionid);",
									"pm.globals.set('coursesectionName111',coursesectionName);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mshied_AcademicPeriodId@odata.bind\": \"/mshied_academicperiods({{gacademicperiodid}})\",\r\n    \"mshied_CourseId@odata.bind\": \"/mshied_courses({{gcourseid}})\",\r\n    \"mshied_location\": \"{{$randomInt}}\",\r\n    \"mshied_coursedaytime\": \"{{$randomDateFuture}}\"\r\n\r\n \r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_coursesections",
							"host": [
								"{{Eresource_URL}}mshied_coursesections"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Faculty details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contactid,contactName;",
									"pm.test(\"Get Contact\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    contactid = jsonData.value[0].contactid;",
									"    contactName = jsonData.value[0].fullname;",
									"    ",
									"});",
									"",
									" pm.globals.set('gcontactidemailact',contactid);",
									" console.log(\"Contact ID is: \"+contactid);",
									" console.log(\"Contact Name is: \"+contactName);",
									" pm.globals.set('contactNameemailact',contactName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}contacts?$filter=contains(emailaddress1,'AnkurJ@campusmgmt.com')",
							"host": [
								"{{Eresource_URL}}contacts"
							],
							"query": [
								{
									"key": "$filter",
									"value": "contains(emailaddress1,'AnkurJ@campusmgmt.com')"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add faculty to Course Section 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var courseInstructorID,contactID,courseSectionID,isPrimaryInstructor;",
									"pm.test(\"Course Instructor Associated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    courseInstructorID = jsonData.cmc_courseinstructorid;",
									"    contactID = jsonData._cmc_instructorid_value;",
									"    courseSectionID=jsonData._cmc_coursesectionid_value;",
									"    isPrimaryInstructor=jsonData.cmc_isprimaryinstructor;",
									"",
									"    var mainCourseSectionID=pm.globals.get(\"gcourseSectionid111\");",
									"    var mainContactID=pm.globals.get('gcontactidemailact');",
									"    ",
									"  pm.test(\"Validate Course Instructor record associated correctly to Course section\", function()",
									"        {",
									"            pm.expect(mainCourseSectionID).to.equal(courseSectionID);",
									"        });",
									"});",
									"",
									"pm.globals.set('gcourseInstructorID11a', courseInstructorID);",
									"console.log('Course Instructor ID 11a'+courseInstructorID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_coursesectionId@odata.bind\": \"/mshied_coursesections({{gcourseSectionid111}})\",\r\n    \"cmc_instructorid@odata.bind\": \"/contacts({{gcontactidemailact}})\",\r\n    \"cmc_roleid@odata.bind\": \"/cmc_titles({{gtitleID1}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_courseinstructors",
							"host": [
								"{{Eresource_URL}}cmc_courseinstructors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign CST to Course Section 1 with role type Mentor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var staffSurveyResponse;",
									"pm.test(\"Campus Survey Template assigned to Course Section\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([204,201,202,200]);",
									"    ",
									"    var jsonData =JSON.parse(responseBody);",
									"    staffSurveyResponse = jsonData.staffSurveyResponse;",
									"    var staffSurveyResponse1 = staffSurveyResponse;",
									"    ",
									"    var result=(JSON.parse(staffSurveyResponse).failedStaffCourses.length);",
									"    ",
									"    if (result > 0)",
									"    {",
									"",
									"        throw new Error(\"Problem in Assgining Campus survey template to Course section\");",
									"             ",
									"    }",
									"    else",
									"    {",
									"        console.log('Campus survey template is Assigned Successfully');",
									"    }",
									"    ",
									"});",
									"",
									"",
									"setTimeout(function () { }, 50000); ",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"CourseSections\":\n\t[{\"@odata.type\":\"Microsoft.Dynamics.CRM.mshied_coursesection\",\"mshied_coursesectionid\":\"{{gcourseSectionid111}}\"}],\n\t\"CreateSurveyForAllInstructors\": false,\n\t\"Roles\":\n\t[{\"@odata.type\": \"Microsoft.Dynamics.CRM.cmc_title\", \"cmc_titleid\": \"{{gtitleID1}}\"}],\n    \"StudentGroup\": null\n\n\t\n\t\n\t\n}\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveytemplates({{gcampussurveytemplateid1}})/Microsoft.Dynamics.CRM.cmc_CreateStaffSurveyFromStaffSurveyTemplate",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveytemplates({{gcampussurveytemplateid1}})",
								"Microsoft.Dynamics.CRM.cmc_CreateStaffSurveyFromStaffSurveyTemplate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get campus survey name after assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var campussurveyid;",
									"var campussurveyname,campussurveyTemplateID,startdate,duedate,cacellationcomment,issubmitted,instructorID,completedorcancelleddate,engagecampussurvey;",
									"",
									"pm.test(\"Campus survey record after assignment\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"",
									"    campussurveyid = jsonData.value[0].cmc_staffsurveyid;",
									"    campussurveyname = jsonData.value[0].cmc_staffsurveyname;",
									"",
									"    console.log(\"Campus Survey ID: \"+campussurveyid);",
									"    console.log(\"Campus Survey Name: \" +campussurveyname);",
									"",
									"    campussurveyTemplateID=jsonData.value[0]._cmc_staffsurveytemplateid_value;",
									"    startdate=jsonData.value[0].cmc_startdate;",
									"    duedate=jsonData.value[0].cmc_duedate;",
									"    cacellationcomment=jsonData.value[0].cmc_cancellationcomment;",
									"    issubmitted=jsonData.value[0].cmc_issubmit;",
									"    instructorID=jsonData.value[0]._cmc_instructorid_value;",
									"    completedorcancelleddate=jsonData.value[0].cmc_completedcancelleddate;",
									"    engagecampussurvey=jsonData.value[0].cmc_engagecampussurveyid;",
									"",
									"     ",
									"});",
									"",
									"pm.globals.set('gcampussurveyid111',campussurveyid);",
									"pm.globals.set('gcampussurveyname111',campussurveyname);",
									"",
									"var actualcampussurveytemplateID=pm.globals.get('gcampussurveytemplateid1');",
									"var dateFromResponse = new Date(pm.environment.get('timestamp'));",
									"console.log(\"dateFromResponse\"+dateFromResponse);",
									"",
									"var actualcancellationcomment= null;",
									"var actualissubmitted=false;",
									"var actualInstructorID=pm.globals.get('gcontactidemailact');",
									"var actaulcompletedorcancelleddate=null;",
									"",
									"",
									"//verify the Campus survey autoname",
									"    var campussurveyTemplateName=pm.globals.get('campussurveytemplatename1');",
									"    var contactName=pm.globals.get('contactNameemailact');",
									"    var coursesectionname=pm.globals.get('coursesectionName111');",
									"    var concatenatedname=campussurveyTemplateName+' '+'-'+' '+contactName+' '+'-'+' '+coursesectionname;",
									"    console.log(\"concatenatedname: \"+concatenatedname);",
									"  ",
									"        pm.test(\"Campus Survey autoname workflow is matching\", function()",
									"        {",
									"            pm.expect(campussurveyname).to.equal(concatenatedname);",
									"        });",
									"",
									"pm.test(\"Validate campus survey template field\", function()",
									"        {",
									"            pm.expect(actualcampussurveytemplateID).to.equal(campussurveyTemplateID);",
									"        });",
									"",
									"",
									"pm.test(\"Validate cancellation comment field\", function()",
									"        {",
									"            pm.expect(actualcancellationcomment).to.equal(cacellationcomment);",
									"        });",
									"",
									"pm.test(\"Validate is submitted field\", function()",
									"        {",
									"            pm.expect(actualissubmitted).to.equal(issubmitted);",
									"        });",
									"",
									"pm.test(\"Validate Instructor ID field\", function()",
									"        {",
									"            pm.expect(actualInstructorID).to.equal(instructorID);",
									"        });",
									"",
									"pm.test(\"Validate is Completed or cancelled date field\", function()",
									"        {",
									"            pm.expect(actaulcompletedorcancelleddate).to.equal(completedorcancelleddate);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"pm.environment.set(\"timestampEndDate\", moment().add(11, 'days').format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							}
						],
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/cmc_staffsurveies?$filter=_cmc_coursesectionid_value eq '{{gcourseSectionid111}}' and _cmc_instructorid_value eq '{{gcontactidemailact}}'",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"cmc_staffsurveies"
							],
							"query": [
								{
									"key": "$filter",
									"value": "_cmc_coursesectionid_value eq '{{gcourseSectionid111}}' and _cmc_instructorid_value eq '{{gcontactidemailact}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate campus survey assignment email for faculty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Get Email Activity\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    ",
									"    var campusSurveyName=pm.globals.get('gcampussurveyname111');",
									"    console.log(\"Campus survey name is: \"+campusSurveyName);",
									"",
									"    var emailSubject='Notification'+' '+'-'+' '+campusSurveyName;",
									"    console.log(\"email subject name after assignment: \"+emailSubject);",
									"    ",
									"    var length=jsonData.value.length;",
									"    if(length>0)",
									"    {",
									"        for(var i=0;i<length ;i++)",
									"        {",
									"            if(jsonData.value[i].subject.includes(emailSubject))",
									"            {",
									"             var actualSubject=jsonData.value[i].subject;",
									"             var actualDescription=jsonData.value[i].description;",
									"",
									"             console.log(\"Email Activity for Campus Survey Assignment is created\");",
									"             console.log(\"Email Subject: \"+actualSubject);",
									"             console.log(\"Email Description: \"+actualDescription);",
									"            }",
									"                  ",
									"        }     ",
									"          ",
									"    }",
									"   ",
									"    else",
									"    {",
									"            throw new Error(\"No record found\");",
									"    }",
									"   ",
									"    ",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}emails?$count=true&$filter=contains(description,'Hi Ankur Jain,')",
							"host": [
								"{{Eresource_URL}}emails"
							],
							"query": [
								{
									"key": "$count",
									"value": "true"
								},
								{
									"key": "$filter",
									"value": "contains(description,'Hi Ankur Jain,')"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}