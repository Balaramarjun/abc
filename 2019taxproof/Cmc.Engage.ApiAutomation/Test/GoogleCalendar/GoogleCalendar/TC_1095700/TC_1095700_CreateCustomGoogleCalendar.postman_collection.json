{
	"info": {
		"_postman_id": "55d587d1-bc3b-4b2c-8a3b-ba08092c0b43",
		"name": "TC_1095700_CreateCustomGoogleCalendar",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Persona-Roles",
			"item": [
				{
					"name": "GetToken_DCRMAPI-System Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setGlobalVariable('gaccess_token', data.access_token);",
									"",
									"//pm.environment.set(\"Eaccess_token\", data.access_token);",
									"console.log(pm.globals.get(\"gaccess_token\"));",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{Esystemadmin_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{Esystemadmin_secret}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{Eresource}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{Eredirectid}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{Eredirectid}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUser - DCRM API -System Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var userid,fullname;",
									"pm.test(\"GetUserID\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    userid = jsonData.value[0].systemuserid;",
									"    fullname=jsonData.value[0].fullname;",
									"",
									"    console.log(\"Application User name: \" +fullname);",
									"    ",
									"});",
									"pm.globals.set('guserid1',userid);",
									"console.log('Systemuser:'+userid);",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}systemusers?$filter=internalemailaddress eq 'sysadmin@api.com'",
							"host": [
								"{{Eresource_URL}}systemusers"
							],
							"query": [
								{
									"key": "$filter",
									"value": "internalemailaddress eq 'sysadmin@api.com'"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SetGoogleIntegrationConfig",
			"item": [
				{
					"name": "FetchConfiguration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var syncapptswithgooglecalendar;",
									"var syncapptattachmentswithgooglecalendar;",
									"var googlesendeventnotifications;",
									"var configurationid;",
									"",
									"pm.test(\"Google Calender Default Configuration IVP\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    ",
									"    ",
									"    syncapptswithgooglecalendar = jsonData.value [0].cmc_googlesyncappointments;",
									"    syncapptattachmentswithgooglecalendar = jsonData.value [0].cmc_syncapptattachmentswithgooglecalendar;",
									"    googlesendeventnotifications = jsonData.value [0].cmc_googlesendeventnotifications;",
									"    configurationid = jsonData.value [0].cmc_configurationid;",
									"     googlecalendarname= jsonData.value [0].cmc_googlecalendarname",
									"    ",
									"    console.log('Sync Appointment with Google Calendar is: ' +syncapptswithgooglecalendar);",
									"    console.log('Sync Appointment Attachments with Google Calendar is: ' +syncapptattachmentswithgooglecalendar);",
									"    console.log('Google Send Event Notifications is: ' +googlesendeventnotifications);",
									"    console.log('Configuration ID is: ' +configurationid);",
									"",
									"    ",
									"});",
									" pm.globals.set(\"gconfigurationid\",configurationid);",
									" pm.globals.set(\"ggooglecalendarname\",googlecalendarname);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_configurations",
							"host": [
								"{{Eresource_URL}}cmc_configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "SetSyncAppointmentConfiguration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var syncapptswithgooglecalendar;",
									"var syncapptattachmentswithgooglecalendar;",
									"var googlesendeventnotifications;",
									"",
									"",
									"pm.test(\"Google Calender Default Configuration IVP\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    ",
									"    ",
									"    syncapptswithgooglecalendar = jsonData.cmc_googlesyncappointments;",
									"    syncapptattachmentswithgooglecalendar = jsonData.cmc_syncapptattachmentswithgooglecalendar;",
									"    googlesendeventnotifications = jsonData.cmc_googlesendeventnotifications;",
									"   ",
									"   ",
									"    ",
									"    console.log('Sync Appointment with Google Calendar is: ' +syncapptswithgooglecalendar);",
									"    console.log('Sync Appointment Attachments with Google Calendar is: ' +syncapptattachmentswithgooglecalendar);",
									"    console.log('Google Send Event Notifications is: ' +googlesendeventnotifications);",
									"",
									"    if(syncapptswithgooglecalendar === 393310000)",
									"    {",
									"    console.log(\"Default Configuration for Google Integration is Correct\");",
									"    }",
									"    else",
									"    {",
									"    console.log(\"Default Configuration for Google Integration is Incorrect\");",
									"    throw new Error(\"Default Configuration for Google Integration is Incorrect\");",
									"    }",
									"    ",
									"});",
									" ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cmc_googlecalendarname\": \"AbhiTest{{$randomInt}}\",\n\"cmc_googlesendeventnotifications\": 393310000,\n\"cmc_syncapptattachmentswithgooglecalendar\": true\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_configurations({{gconfigurationid}})",
							"host": [
								"{{Eresource_URL}}cmc_configurations({{gconfigurationid}})"
							]
						}
					},
					"response": []
				},
				{
					"name": "ValidateConfigurationSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var syncapptswithgooglecalendar;",
									"var syncapptattachmentswithgooglecalendar;",
									"var googlesendeventnotifications;",
									"",
									"pm.test(\"Google Calender Default Configuration IVP\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    ",
									"    ",
									"    ",
									"    googlesendeventnotifications = jsonData.value [0].cmc_googlesendeventnotifications;",
									"    ",
									"    ",
									"    console.log('Google Send Event Notifications is: ' +googlesendeventnotifications);",
									"",
									"    if(googlesendeventnotifications === 393310000)",
									"    {",
									"    console.log(\"Default Configuration for Google Integration is Correct\");",
									"    }",
									"    else",
									"    {",
									"    console.log(\"Default Configuration for Google Integration is Incorrect\");",
									"    throw new Error(\"Default Configuration for Google Integration is Incorrect\");",
									"    }",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_configurations",
							"host": [
								"{{Eresource_URL}}cmc_configurations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AppointmentOwner",
			"item": [
				{
					"name": "GetUser - DCRM Faculty/Instructor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var userid,fullname;",
									"pm.test(\"GetUserID\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    userid = jsonData.value[0].systemuserid;",
									"    fullname=jsonData.value[0].fullname;",
									"",
									"    console.log(\"Application User name: \" +fullname);",
									"    ",
									"});",
									"pm.globals.set('guserid5',userid);",
									"console.log('Systemuser:'+userid);",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}systemusers?$filter=internalemailaddress eq 'bill@engageuniversity.org'",
							"host": [
								"{{Eresource_URL}}systemusers"
							],
							"query": [
								{
									"key": "$filter",
									"value": "internalemailaddress eq 'bill@engageuniversity.org'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EnableGoogleSyncAppointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var userid;",
									"pm.test(\"Enable Googel Sync Appointment to this Appointment Owner \", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    ",
									"    var status=jsonData.cmc_googlesyncappointments;",
									"    console.log(\"Googel Sync Appointment Status: \" +status);",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n\"cmc_googlesyncappointments\": true,\r\n\"internalemailaddress\": \"bill@engageuniversity.org\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}systemusers({{guserid5}})",
							"host": [
								"{{Eresource_URL}}systemusers({{guserid5}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CreateAppointment and Verify",
			"item": [
				{
					"name": "Create Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contactid;",
									"pm.test(\"Contact Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"  contactid  = jsonData.contactid ;",
									"",
									"});",
									"",
									"  pm.globals.set('ggmailcontact',contactid);",
									"  "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"emailaddress1\": \"testgmail@gmail.com\",\r\n    \"followemail\": true,\r\n    \"firstname\": \"API\",\r\n    \"lastname\": \"Test-{{globalsessionvalue}}\",\r\n    \"mshied_contacttype\": \"494280003\",\r\n    \"mshied_firstgeneration\": false,\r\n    \"mshied_isdeceased\": false,\r\n    \"mshied_legacy\": false,\r\n    \"preferredcontactmethodcode\": 1\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}contacts",
							"host": [
								"{{Eresource_URL}}contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateAppointment in Engage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var appointmentid;",
									"var appointmentsubject;",
									"var scheduledstart;",
									"var scheduledend;",
									"var appointmentlocation;",
									"var appointmentdescription;",
									"pm.test(\"Appointment Activity Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    appointmentid = jsonData.activityid;",
									"  ",
									"  console.log(\"Appointment:\" ,appointmentid);",
									"  ",
									"   appointmentsubject = jsonData.subject;",
									"   console.log(\"Sub:\" ,appointmentsubject);",
									"",
									"    appointmentlocation = jsonData.location;",
									"    console.log(\"appointmentlocation:\" ,appointmentlocation);",
									"",
									"    appointmentdescription = jsonData.description;",
									"    console.log(\"appointmentdescription:\" ,appointmentdescription);",
									"",
									"   scheduledend = jsonData.scheduledend;",
									"   console.log(\"scheduledend:\" ,scheduledend);",
									"",
									"   scheduledstart = jsonData.scheduledstart;",
									"   console.log(\"scheduledstart:\" ,scheduledstart);",
									"",
									"});",
									"",
									"  pm.globals.set('gappointmentid',appointmentid);",
									"  pm.globals.set('gscheduledstart',scheduledstart);",
									"  pm.globals.set('gscheduledend',scheduledend);",
									"  pm.globals.set('gappointmentdescription',appointmentdescription);",
									"  pm.globals.set('gappointmentlocation',appointmentlocation);",
									"  pm.globals.set('gappointmentsubject',appointmentsubject);",
									"  ",
									"",
									"",
									"console.log(pm.globals.get(\"gappointmentid\"));",
									"",
									"  setTimeout(function(){},60000);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"subject\": \"AbhiTTestgoogleAPI{{$randomInt}}\",\r\n \"location\": \"AppointmentLoc-{{$randomCity}}\",\r\n \"description\": \"AbhiT Test Description{{$randomInt}}\",\r\n \"scheduledstart\": \"2025-11-19T13:00:00.000Z\",\r\n \"scheduledend\": \"2025-11-19T13:30:00.000Z\",\r\n  \"ownerid@odata.bind\": \"/systemusers({{guserid5}})\",\r\n \"prioritycode\": 1,\r\n\r\n \"appointment_activity_parties\"  : [\r\n        {\r\n            \"partyid_contact@odata.bind\" : \"/contacts({{ggmailcontact}})\",\r\n            \"participationtypemask\" : 5\r\n        }]\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}/appointments",
							"host": [
								"{{Eresource_URL}}"
							],
							"path": [
								"appointments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTokenfromGoogle",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.environment.get('get_google_token_script'));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GetTokenfromGoogle\", function() \r",
									"{\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"    var jsonData =JSON.parse(responseBody);\r",
									"\r",
									"  \r",
									"});\r",
									"\r",
									"setTimeout(function(){},10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true,
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "https://www.googleapis.com/calendar/v3/users/me/calendarList",
							"protocol": "https",
							"host": [
								"www",
								"googleapis",
								"com"
							],
							"path": [
								"calendar",
								"v3",
								"users",
								"me",
								"calendarList"
							]
						},
						"description": "This request creates a signed JWT using the `jwt_secret` variable and encodes the JWT data as base64. It then sets the signed and encoded JWT as `Bearer` token in the `Authorization` header."
					},
					"response": []
				},
				{
					"name": "Get cmc_googleeventid from Engage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var googleeventid;",
									"var appointmentsubject;",
									"pm.test(\"Get Google Event ID \", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"  googleeventid = jsonData.cmc_googleeventid;",
									"  ",
									"  console.log(\"googleeventid:\" ,googleeventid);",
									"  ",
									"  ",
									"});",
									"",
									"pm.globals.set('ggoogleeventid',googleeventid);",
									"console.log(pm.globals.get(\"gappointmentid\"));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}appointments({{gappointmentid}})",
							"host": [
								"{{Eresource_URL}}appointments({{gappointmentid}})"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Appointment from Google",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Calendar.Events.list(calendarId).items[0].id\r",
									"\r",
									"var googleeventid, summary, description, location, creator, startdate, enddate, organizer, optional;\r",
									"\r",
									"pm.test(\"Get Event  from Gooogle Calender\", function () {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"  googleeventid = jsonData.id;\r",
									"  summary = jsonData.summary;\r",
									"  description = jsonData.description;\r",
									"  location = jsonData.location;\r",
									"  creator = jsonData.creator.email;\r",
									"  startdate = jsonData.start.dateTime;\r",
									"  enddate = jsonData.end.dateTime;\r",
									"  organizer = jsonData.attendees[0].email;\r",
									"  optional = jsonData.attendees[1].email;\r",
									"\r",
									"  console.log(\"googleeventid:\", googleeventid);\r",
									"  console.log(\"summary:\", summary);\r",
									"  console.log(\"location:\", location);\r",
									"  console.log(\"creator:\", creator);\r",
									"  console.log(\"startdate:\", startdate);\r",
									"  console.log(\"enddate:\", enddate);\r",
									"  console.log(\"organizer:\", organizer);\r",
									"  console.log(\"optional:\", optional);\r",
									"\r",
									"  var gappointmentid= pm.globals.get(\"gappointmentid\");\r",
									"  var gscheduledstart= pm.globals.get(\"gscheduledstart\");\r",
									"  var gscheduledend =pm.globals.get(\"gscheduledend\");\r",
									"  var gappointmentdescription=pm.globals.get(\"gappointmentdescription\");\r",
									"  var gappointmentlocation=pm.globals.get(\"gappointmentlocation\");\r",
									"  var gappointmentsubject=pm.globals.get(\"gappointmentsubject\");\r",
									"  var ggoogleeventid=pm.globals.get(\"ggoogleeventid\");\r",
									"  \r",
									"\r",
									"  console.log(\"Engagelocation: \" +gappointmentlocation);\r",
									"  console.log(\"Engagedescription: \" +gappointmentdescription);\r",
									"  console.log(\"Engagelocation :\" +gappointmentlocation);\r",
									"  console.log(\"Engage Startdate :\" +gscheduledstart);\r",
									"  console.log(\"Engage Enddate: \" +gscheduledend);\r",
									"  console.log(\"EngageSubject: \" +gappointmentsubject);\r",
									"\r",
									"  pm.test(\"Validate Location\", function()\r",
									"        {\r",
									"            pm.expect(gappointmentlocation).to.equal(location);\r",
									"        });\r",
									" \r",
									"pm.test(\"Validate Subject\", function()\r",
									"        {\r",
									"            pm.expect(gappointmentsubject).to.equal(summary);\r",
									"        });\r",
									"pm.test(\"Validate Description\", function()\r",
									"        {\r",
									"            pm.expect(gappointmentdescription).to.equal(description);\r",
									"        });\r",
									"pm.test(\"Validate googleeventid\", function()\r",
									"        {\r",
									"            pm.expect(ggoogleeventid).to.equal(googleeventid);\r",
									"        });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true,
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://www.googleapis.com/calendar/v3/calendars/primary/events/{{ggoogleeventid}}",
							"protocol": "https",
							"host": [
								"www",
								"googleapis",
								"com"
							],
							"path": [
								"calendar",
								"v3",
								"calendars",
								"primary",
								"events",
								"{{ggoogleeventid}}"
							]
						},
						"description": "This request creates a signed JWT using the `jwt_secret` variable and encodes the JWT data as base64. It then sets the signed and encoded JWT as `Bearer` token in the `Authorization` header."
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Calendar name and Appointment",
			"item": [
				{
					"name": "UpdateCustomCalendarNameConfiguration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var syncapptswithgooglecalendar;",
									"var syncapptattachmentswithgooglecalendar;",
									"var googlesendeventnotifications;",
									"var googlecalendarname;",
									"",
									"",
									"pm.test(\"Google Calender Default Configuration IVP\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    ",
									"    ",
									"    syncapptswithgooglecalendar = jsonData.cmc_googlesyncappointments;",
									"    syncapptattachmentswithgooglecalendar = jsonData.cmc_syncapptattachmentswithgooglecalendar;",
									"    googlesendeventnotifications = jsonData.cmc_googlesendeventnotifications;",
									"   googlecalendarname=jsonData.cmc_googlecalendarname;",
									"    ",
									"    console.log('Sync Appointment with Google Calendar is: ' +syncapptswithgooglecalendar);",
									"    console.log('Sync Appointment Attachments with Google Calendar is: ' +syncapptattachmentswithgooglecalendar);",
									"    console.log('Google Send Event Notifications is: ' +googlesendeventnotifications);",
									"console.log(' Google Calendar name is: ' +syncapptattachmentswithgooglecalendar);",
									"    console.log('Google Send Event Notifications is: ' +googlecalendarname);",
									"    if(syncapptswithgooglecalendar === 393310000)",
									"    {",
									"    console.log(\"Default Configuration for Google Integration is Correct\");",
									"    }",
									"    else",
									"    {",
									"    console.log(\"Default Configuration for Google Integration is Incorrect\");",
									"    throw new Error(\"Default Configuration for Google Integration is Incorrect\");",
									"    }",
									"    ",
									"});",
									"",
									"pm.globals.set('ggooglecalendarname',googlecalendarname);",
									" ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cmc_googlecalendarname\": \"NewCalendarName{{$randomInt}}\"\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_configurations({{gconfigurationid}})",
							"host": [
								"{{Eresource_URL}}cmc_configurations({{gconfigurationid}})"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Description of appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var appointmentid;",
									"var appointmentsubject;",
									"var scheduledstart;",
									"var scheduledend;",
									"var appointmentlocation;",
									"var appointmentdescription;",
									"pm.test(\"Appointment Activity Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    appointmentid = jsonData.activityid;",
									"  ",
									"  console.log(\"Appointment:\" ,appointmentid);",
									"",
									"",
									"    appointmentdescription = jsonData.description;",
									"    console.log(\"appointmentdescription:\" ,appointmentdescription);",
									"",
									"",
									"",
									"});",
									"",
									"  pm.globals.set('gappointmentid1',appointmentid);",
									"  pm.globals.set('gappointmentdescription1',appointmentdescription);",
									"  ",
									"",
									"",
									"console.log(pm.globals.get(\"gappointmentid1\"));",
									"",
									"  setTimeout(function(){},60000);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n \"description\": \"Updated Test Description{{$randomInt}}\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}/appointments({{gappointmentid}})",
							"host": [
								"{{Eresource_URL}}"
							],
							"path": [
								"appointments({{gappointmentid}})"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cmc_googleeventid from Engage for second appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var googleeventid;",
									"var appointmentsubject;",
									"pm.test(\"Get Google Event ID \", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"  googleeventid = jsonData.cmc_googleeventid;",
									"  ",
									"  console.log(\"googleeventid1:\" ,googleeventid);",
									"  ",
									"  ",
									"});",
									"",
									"pm.globals.set('ggoogleeventid1',googleeventid);",
									"console.log(pm.globals.get(\"gappointmentid1\"));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}appointments({{gappointmentid1}})",
							"host": [
								"{{Eresource_URL}}appointments({{gappointmentid1}})"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Appointment from Google",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var googleeventid, summary, description, location, creator, startdate, enddate, organizer, optional;\r",
									"\r",
									"pm.test(\"Get Event  from Gooogle Calender\", function () {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"  googleeventid = jsonData.id;\r",
									"  summary = jsonData.summary;\r",
									"  description = jsonData.description;\r",
									"  location = jsonData.location;\r",
									"  creator = jsonData.creator.email;\r",
									"  startdate = jsonData.start.dateTime;\r",
									"  enddate = jsonData.end.dateTime;\r",
									"  organizer = jsonData.attendees[0].email;\r",
									"  optional = jsonData.attendees[1].email;\r",
									"\r",
									"  console.log(\"googleeventid:\", googleeventid);\r",
									"  console.log(\"summary:\", summary);\r",
									"  console.log(\"location:\", location);\r",
									"  console.log(\"creator:\", creator);\r",
									"  console.log(\"startdate:\", startdate);\r",
									"  console.log(\"enddate:\", enddate);\r",
									"  console.log(\"organizer:\", organizer);\r",
									"  console.log(\"optional:\", optional);\r",
									"\r",
									"  var gappointmentid= pm.globals.get(\"gappointmentid1\");\r",
									"  var gappointmentdescription=pm.globals.get(\"gappointmentdescription1\");\r",
									"  var ggoogleeventid=pm.globals.get(\"ggoogleeventid1\");\r",
									"  \r",
									"  console.log(\"Engagedescription: \" +gappointmentdescription);\r",
									"  \r",
									"\r",
									"pm.test(\"Validate Description\", function()\r",
									"        {\r",
									"            pm.expect(gappointmentdescription).to.equal(description);\r",
									"        });\r",
									"pm.test(\"Validate googleeventid\", function()\r",
									"        {\r",
									"            pm.expect(ggoogleeventid).to.equal(googleeventid);\r",
									"        });\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true,
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "https://www.googleapis.com/calendar/v3/calendars/primary/events/{{ggoogleeventid1}}",
							"protocol": "https",
							"host": [
								"www",
								"googleapis",
								"com"
							],
							"path": [
								"calendar",
								"v3",
								"calendars",
								"primary",
								"events",
								"{{ggoogleeventid1}}"
							]
						},
						"description": "This request creates a signed JWT using the `jwt_secret` variable and encodes the JWT data as base64. It then sets the signed and encoded JWT as `Bearer` token in the `Authorization` header."
					},
					"response": []
				},
				{
					"name": "UpdatingDefaultPrimaryCalendarConfiguration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updating Default Configuration Value\", function() \r",
									"{\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cmc_googlesyncappointments\": \"393310000\",\n    \"cmc_googlesendeventnotifications\": \"393310001\",\n    \"cmc_syncapptattachmentswithgooglecalendar\": true\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_configurations({{gconfigurationid}})",
							"host": [
								"{{Eresource_URL}}cmc_configurations({{gconfigurationid}})"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}