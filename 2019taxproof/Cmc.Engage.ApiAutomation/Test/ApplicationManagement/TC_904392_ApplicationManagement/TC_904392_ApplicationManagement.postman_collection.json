{
	"info": {
		"_postman_id": "6702b19a-3672-4e50-b9cc-bc862f153ed7",
		"name": "TC_904392_ApplicationManagement",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Persona - Application Admin",
			"item": [
				{
					"name": "GetToken_DCRM Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setGlobalVariable('gaccess_token', data.access_token);",
									"",
									"//pm.environment.set(\"Eaccess_token\", data.access_token);",
									"console.log(pm.globals.get(\"gaccess_token\"));",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{Eadmin_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{Eadmin_secret}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{Eresource}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{Eredirectid}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{Eredirectid}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUser - DCRM Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var userid,fullname;",
									"pm.test(\"GetUserID\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    userid = jsonData.value[0].systemuserid;",
									"    fullname=jsonData.value[0].fullname;",
									"",
									"    console.log(\"Application User name: \" +fullname);",
									"    ",
									"});",
									"pm.globals.set('gownerid',userid);",
									"console.log('Systemuser:'+userid);",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}systemusers?$filter=internalemailaddress eq 'admin@api.com'",
							"host": [
								"{{Eresource_URL}}systemusers"
							],
							"query": [
								{
									"key": "$filter",
									"value": "internalemailaddress eq 'admin@api.com'"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Contact with Test Score",
			"item": [
				{
					"name": "Get SourceCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var sourceCategoryid;",
									"",
									"pm.test(\"Source category record Fetched\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    sourceCategoryid = jsonData.value[0].cmc_sourcecategoryid;",
									"    var sourceCategoryName = jsonData.value[0].cmc_sourcecategoryname;",
									"    console.log('SourceCategory Name is: ' + sourceCategoryName);",
									"",
									"});",
									"",
									"pm.globals.set('gsourceCategoryid', sourceCategoryid);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}cmc_sourcecategories",
							"host": [
								"{{Eresource_URL}}cmc_sourcecategories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SourceMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var sourceMethodid;",
									"",
									"pm.test(\"Source Method record Fetched\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    sourceMethodid = jsonData.value[0].cmc_sourcemethodid;",
									"    var sourceMethodName = jsonData.value[0].cmc_sourcemethodname;",
									"    console.log('SourceMethod Name is: ' + sourceMethodName);",
									"",
									"});",
									"",
									"pm.globals.set('gsourceMethodid', sourceMethodid);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}cmc_sourcemethods",
							"host": [
								"{{Eresource_URL}}cmc_sourcemethods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contact_id;",
									"pm.test(\"Contact Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    contact_id = jsonData.contactid;",
									"    var firstname = jsonData.firstname;",
									"    console.log('Contact:' +firstname);",
									"    ",
									"});",
									"pm.globals.set('gcontactid',contact_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"firstname\": \"ContactTC904392{{$randomFirstName}}\",\r\n\t\"lastname\": \"Contactlast{{$randomLastName}}\",\r\n\t\"mshied_contacttype\": \"494280011\",\r\n\t\"cmc_sourcecategoryid@odata.bind\": \"/cmc_sourcecategories({{gsourceCategoryid}})\",\r\n\t\"cmc_sourcemethodid@odata.bind\": \"/cmc_sourcemethods({{gsourceMethodid}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}contacts",
							"host": [
								"{{Eresource_URL}}contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SAT Test Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var satid;",
									"var Testtypename;",
									"pm.test(\"get SAT id\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    satid = jsonData.value[0].mshied_testtypeid;",
									"    Testtypename = jsonData.value[0].mshied_name;",
									"  ",
									"    console.log('TesttypeID:'+satid);",
									"    console.log('Testtype:'+Testtypename);",
									"});",
									"pm.globals.set('gsatid',satid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}mshied_testtypes?$select=mshied_testtypeid,mshied_name &$filter=mshied_name eq 'SAT'",
							"host": [
								"{{Eresource_URL}}mshied_testtypes"
							],
							"query": [
								{
									"key": "$select",
									"value": "mshied_testtypeid,mshied_name "
								},
								{
									"key": "$filter",
									"value": "mshied_name eq 'SAT'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create TestScoreSAT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var SATtestscoreid;",
									"",
									"",
									"pm.test(\"SAT TestScore Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    SATtestscoreid = jsonData.mshied_testscoreid;",
									"    console.log('SAT test score id: '+SATtestscoreid);",
									"});",
									"pm.globals.set('gSATtestscore',SATtestscoreid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cmc_includeinscorecalculations\": true,\n    \"cmc_sourceofrecord\": 175490000,\n    \"mshied_StudentID@odata.bind\": \"/contacts({{gcontactid}})\",\n    \"mshied_TestTypeId@odata.bind\": \"/mshied_testtypes({{gsatid}})\",\n    \"mshied_satessayanalysis\": 5,\n    \"mshied_satessayreading\": 6,\n    \"mshied_satessaywriting\": 7,\n    \"mshied_satevidencebasedreadingandwritingsection\": 225,\n    \"mshied_satmathsection\": 201,\n    \"mshied_sattotalscore\": 1100,\n    \"mshied_testdate\": \"2020-08-06T18:30:00.000Z\",\n    \"mshied_testlocation\": \"Bangalore\",\n    \"mshied_testsource\": 494280004\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_testscores",
							"host": [
								"{{Eresource_URL}}mshied_testscores"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ACT Test Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var actid;",
									"var Testtypename;",
									"pm.test(\"Get ACT id\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    actid = jsonData.value[0].mshied_testtypeid;",
									"    Testtypename = jsonData.value[0].mshied_name;",
									"    ",
									"     console.log('TesttypeID:'+actid);",
									"    console.log('Testtype:'+Testtypename);",
									"});",
									"pm.globals.set('gactid',actid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var current_timestamp = new Date();",
									"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}mshied_testtypes?$select=mshied_testtypeid,mshied_name &$filter=mshied_name eq 'ACT'",
							"host": [
								"{{Eresource_URL}}mshied_testtypes"
							],
							"query": [
								{
									"key": "$select",
									"value": "mshied_testtypeid,mshied_name "
								},
								{
									"key": "$filter",
									"value": "mshied_name eq 'ACT'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create TestScore ACT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var ACTtestscoreid;",
									" var testscorevalue;",
									" ",
									"pm.test(\"ACT TestScore Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    ACTtestscoreid = jsonData.mshied_testscoreid;",
									"    console.log('ACT test score id: '+ACTtestscoreid);",
									"",
									"    ",
									"});",
									"",
									"",
									"pm.globals.set('gACTtestscore',ACTtestscoreid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"mshied_StudentID@odata.bind\":\"/contacts({{gcontactid}})\",\n\"mshied_TestTypeId@odata.bind\": \"/mshied_testtypes({{gactid}})\",\n\"mshied_actela\": 20,\n\"mshied_actenglish\": 12,\n\"mshied_actmath\": 11,\n\"mshied_actreading\": 12,\n\"mshied_actscience\": 11,\n\"mshied_actstem\": 32,\n\"mshied_actwriting\": 10,\n\"mshied_testdate\": \"2020-08-12T18:30:00.000Z\",\n\"mshied_testlocation\": \"bangalore\",\n\"mshied_testsource\": 494280003\n    \n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_testscores",
							"host": [
								"{{Eresource_URL}}mshied_testscores"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Application Creation",
			"item": [
				{
					"name": "Create Academic period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var academicperiodid;",
									"",
									"pm.test(\"Academicperiodid Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    academicperiodid = jsonData.mshied_academicperiodid;",
									"    var mshied_name=jsonData.mshied_name;",
									"    console.log('Academic period name is: '+mshied_name);",
									"    var mshied_code=jsonData.mshied_code;",
									"    console.log('Code is: ' +mshied_code);",
									" ",
									"});",
									"",
									"",
									"",
									"pm.globals.set('gacademicperiodid',academicperiodid);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
									"pm.environment.set(\"timestampEndDate\", moment().add(100, 'days').format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mshied_code\": \"{{$randomInt}}GG{{$randomInt}}{{$randomInt}}AC1\",\n    \"mshied_enddate\": \"{{timestampEndDate}}\",\n    \"mshied_startdate\": \"{{timestamp}}\",\n    \"mshied_name\": \"Academicperiod904392{{$randomInt}}\"\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_academicperiods",
							"host": [
								"{{Eresource_URL}}mshied_academicperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Program One",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var programid;",
									"pm.test(\"Get Program\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    programid = jsonData.mshied_programid; ",
									"    console.log('Program 1 created: '+programid);",
									"});",
									"pm.globals.set('gprogramid1', programid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mshied_code\": \"{{$randomInt}}Qcode{{$randomInt}}{{$randomInt}}\",\n    \"mshied_name\": \"program-904392{{$randomInt}}\"\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_programs",
							"host": [
								"{{Eresource_URL}}mshied_programs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Programs Two",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var programid;",
									"pm.test(\"Get Program\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    programid = jsonData.mshied_programid; ",
									"     console.log('Program 2 created: '+programid);",
									"});",
									"pm.globals.set('gprogramid2', programid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mshied_code\": \"{{$randomInt}}Ecode{{$randomInt}}{{$randomInt}}\",\n    \"mshied_name\": \"Program904392{{$randomInt}}\"\n    \n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_programs",
							"host": [
								"{{Eresource_URL}}mshied_programs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Programs Three",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var programid;",
									"pm.test(\"Get Program\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    programid = jsonData.mshied_programid; ",
									"     console.log('Program 3 created: '+programid);",
									"});",
									"pm.globals.set('gprogramid3', programid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mshied_code\": \"{{$randomInt}}04392{{$randomInt}}{{$randomInt}}\",\n    \"mshied_name\": \"Program904392{{$randomInt}}\"\n    \n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_programs",
							"host": [
								"{{Eresource_URL}}mshied_programs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Programs Four",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var programid;",
									"pm.test(\"Get Program\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    programid = jsonData.mshied_programid; ",
									"    console.log('Program 4 created: '+programid);",
									"});",
									"pm.globals.set('gprogramid4', programid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mshied_code\": \"{{$randomInt}}{{$randomInt}}Wco{{$randomInt}}\",\n    \"mshied_name\": \"Program904392{{$randomInt}}\"\n    \n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_programs",
							"host": [
								"{{Eresource_URL}}mshied_programs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Application Period 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var AppPerID;",
									"var AppPerName;",
									"",
									"pm.test(\"Application Period is Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    AppPerID = jsonData.cmc_applicationperiodid;",
									"    console.log('Application Period ID is: ' +AppPerID);",
									"    ",
									"    AppPerName = jsonData.cmc_applicationperiodname;",
									"    console.log('Application Period 1 name is: ' +AppPerName);",
									"});",
									"",
									"pm.globals.set('gAppPerName',AppPerName);",
									" pm.globals.set('gAppPerID',AppPerID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cmc_applicationperiodname\": \"{{$randomInt}}{{$randomInt}} Applicationper-1-904392 {{$randomInt}}{{$randomInt}}\",\n    \"cmc_AcademicPeriodId@odata.bind\": \"/mshied_academicperiods({{gacademicperiodid}})\"\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationperiods",
							"host": [
								"{{Eresource_URL}}cmc_applicationperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Application Period 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var AppPerID;",
									"var AppPerName;",
									"",
									"pm.test(\"Application Period is Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    AppPerID = jsonData.cmc_applicationperiodid;",
									"    console.log('Application Period ID is: ' +AppPerID);",
									"    ",
									"    AppPerName = jsonData.cmc_applicationperiodname;",
									"    console.log('Application Period 2 name is: ' +AppPerName);",
									"});",
									"pm.globals.set('gAppPerName2',AppPerName);",
									" pm.globals.set('gAppPerID2',AppPerID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cmc_applicationperiodname\": \"{{$randomInt}}{{$randomInt}} Applicationper-2-904392 {{$randomInt}}{{$randomInt}}\",\n    \"cmc_AcademicPeriodId@odata.bind\": \"/mshied_academicperiods({{gacademicperiodid}})\"\n \n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationperiods",
							"host": [
								"{{Eresource_URL}}cmc_applicationperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Application Period 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var AppPerID;",
									"var AppPerName;",
									"",
									"pm.test(\"Application Period is Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    AppPerID = jsonData.cmc_applicationperiodid;",
									"    console.log('Application Period ID is: ' +AppPerID);",
									"    ",
									"    AppPerName = jsonData.cmc_applicationperiodname;",
									"    console.log('Application Period 3 name is: ' +AppPerName);",
									"});",
									"",
									"pm.globals.set('gAppPerName3',AppPerName);",
									" pm.globals.set('gAppPerID3',AppPerID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cmc_applicationperiodname\": \"{{$randomInt}}{{$randomInt}}Applicationperiodd3-904392 {{$randomInt}}{{$randomInt}}\",\n    \"cmc_AcademicPeriodId@odata.bind\": \"/mshied_academicperiods({{gacademicperiodid}})\"\n \n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationperiods",
							"host": [
								"{{Eresource_URL}}cmc_applicationperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Application Period 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var AppPerID;",
									"var AppPerName;",
									"",
									"pm.test(\"Application Period is Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    AppPerID = jsonData.cmc_applicationperiodid;",
									"    console.log('Application Period ID is: ' +AppPerID);",
									"    ",
									"    AppPerName = jsonData.cmc_applicationperiodname;",
									"    console.log('Application Period 4 name is: ' +AppPerName);",
									"});",
									"pm.globals.set('gAppPerName4',AppPerName);",
									" pm.globals.set('gAppPerID4',AppPerID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cmc_applicationperiodname\": \"{{$randomInt}}{{$randomInt}} Applicationperiod-4-904392 {{$randomInt}}{{$randomInt}}\",\n    \"cmc_AcademicPeriodId@odata.bind\": \"/mshied_academicperiods({{gacademicperiodid}})\"\n \n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationperiods",
							"host": [
								"{{Eresource_URL}}cmc_applicationperiods"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Application Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var appTypeId;",
									"var appTypeName;",
									"",
									"pm.test(\"Application Type is Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    appTypeId = jsonData.cmc_applicationtypeid;",
									"    console.log('Application Type ID is: ' +appTypeId);",
									"    appTypeName=jsonData.cmc_applicationtypename;",
									"    console.log('Application Type name is: ' +appTypeName);",
									"});",
									"pm.globals.set('gAppTypeID',appTypeId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"cmc_applicationtypename\":\"ApplicationType904392{{$randomInt}}\",\r\n\t\"cmc_applicationgroup\": 175490001\r\n}\r\n"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationtypes",
							"host": [
								"{{Eresource_URL}}cmc_applicationtypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Program1 to Application Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Adding Program 1 record To Application Type\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([204,201,202,200]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var ProgName =jsonData.mshied_name;",
									"    console.log('Program that is added to Application Type 1 is:' +ProgName);",
									"    ",
									"  ",
									"});",
									"",
									"//setTimeout(function(){}, 25000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"description": " ",
								"key": "OData-Version",
								"value": "4.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n                \r\n                     \"@odata.id\":\"{{Eresource_URL}}mshied_programs({{gprogramid1}})\"\r\n}\r\n           \r\n\r\n "
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationtypes({{gAppTypeID}})/cmc_cmc_applicationtype_mshied_program/$ref",
							"host": [
								"{{Eresource_URL}}cmc_applicationtypes({{gAppTypeID}})"
							],
							"path": [
								"cmc_cmc_applicationtype_mshied_program",
								"$ref"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Program2 to Application Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Adding Program 2 record To Application Type\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([204,201,202,200]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var ProgName =jsonData.mshied_name;",
									"    console.log('Program that is added to Application Type 2 is:' +ProgName);",
									"    ",
									"  ",
									"});",
									"",
									"//setTimeout(function(){}, 25000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"description": " ",
								"key": "OData-Version",
								"value": "4.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n                \r\n                     \"@odata.id\":\"{{Eresource_URL}}mshied_programs({{gprogramid2}})\"\r\n}\r\n           \r\n\r\n "
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationtypes({{gAppTypeID}})/cmc_cmc_applicationtype_mshied_program/$ref",
							"host": [
								"{{Eresource_URL}}cmc_applicationtypes({{gAppTypeID}})"
							],
							"path": [
								"cmc_cmc_applicationtype_mshied_program",
								"$ref"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Program3 to Application Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Adding Program 3 record To Application Type\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([204,201,202,200]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var ProgName =jsonData.mshied_name;",
									"    console.log('Program that is added to Application Type 3 is:' +ProgName);",
									"    ",
									"  ",
									"});",
									"",
									"//setTimeout(function(){}, 25000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"description": " ",
								"key": "OData-Version",
								"value": "4.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n                \r\n                     \"@odata.id\":\"{{Eresource_URL}}mshied_programs({{gprogramid3}})\"\r\n}\r\n           \r\n\r\n "
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationtypes({{gAppTypeID}})/cmc_cmc_applicationtype_mshied_program/$ref",
							"host": [
								"{{Eresource_URL}}cmc_applicationtypes({{gAppTypeID}})"
							],
							"path": [
								"cmc_cmc_applicationtype_mshied_program",
								"$ref"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Program4 to Application Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Adding Program 3 record To Application Type\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([204,201,202,200]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var ProgName =jsonData.mshied_name;",
									"    console.log('Program that is added to Application 4 Type is:' +ProgName);",
									"    ",
									"  ",
									"});",
									"",
									"//setTimeout(function(){}, 25000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"description": " ",
								"key": "OData-Version",
								"value": "4.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n                \r\n                     \"@odata.id\":\"{{Eresource_URL}}mshied_programs({{gprogramid4}})\"\r\n}\r\n           \r\n\r\n "
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationtypes({{gAppTypeID}})/cmc_cmc_applicationtype_mshied_program/$ref",
							"host": [
								"{{Eresource_URL}}cmc_applicationtypes({{gAppTypeID}})"
							],
							"path": [
								"cmc_cmc_applicationtype_mshied_program",
								"$ref"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Requirement Definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requirementdefinition_id;",
									"var applicationreqdefname;",
									"",
									"pm.test(\"Requirement Definition is created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    requirementdefinition_id = jsonData.cmc_applicationrequirementdefinitionid;",
									"    applicationreqdefname = jsonData.cmc_applicationrequirementdefinitionname;",
									"    console.log('RequirementDefinition:' +applicationreqdefname);",
									"    ",
									"});",
									"pm.globals.set('grequirementdefname',applicationreqdefname);",
									"pm.globals.set('grequirementdefinitionid',requirementdefinition_id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"cmc_applicationrequirementdefinitionname\":\"req def904392 {{$randomInt}}\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationrequirementdefinitions",
							"host": [
								"{{Eresource_URL}}cmc_applicationrequirementdefinitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Application Definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var applicationdefinitionid;",
									"var applicationdefname;",
									"",
									"pm.test(\"Application Definition Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"   applicationdefinitionid = jsonData.cmc_applicationdefinitionid;",
									"   applicationdefname=jsonData.cmc_applicationdefinitionname",
									"   console.log('Application definition created: '+applicationdefname);",
									" ",
									"});",
									"",
									"pm.globals.set('gappdefid',applicationdefinitionid);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"cmc_applicationdefinitionname\": \"applicationdefname904392{{$randomInt}}\",\r\n\"cmc_requirementdefinitionid@odata.bind\": \"/cmc_applicationrequirementdefinitions({{grequirementdefinitionid}})\",\r\n\"cmc_statusoncompletion\": 175490008,\r\n\"cmc_statusoncreate\": 175490000,\r\n\"cmc_statusonsave\": 175490001,\r\n\"cmc_statusonsubmit\": 175490001\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationdefinitions",
							"host": [
								"{{Eresource_URL}}cmc_applicationdefinitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Application Definition Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var applicationdefinitionverid, applicationdefinitionvername;",
									"",
									"pm.test(\"Application Definition Version Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    applicationdefinitionverid = jsonData.cmc_applicationdefinitionversionid;",
									"    applicationdefinitionvername = jsonData.cmc_applicationdefinitionversionname;",
									"    console.log(\"Application Definition version name is: \" + applicationdefinitionvername);",
									"});",
									"",
									"pm.globals.set('gappdefverid1', applicationdefinitionverid);",
									"pm.globals.set('gapplicationdefinitionvername1', applicationdefinitionvername);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_applicationdefinitionversionname\": \"{{$randomInt}}{{$randomInt}}ApplicationDef904392{{$randomInt}}\",\r\n    \"cmc_applicationtype@odata.bind\": \"/cmc_applicationtypes({{gAppTypeID}})\",\r\n    \"cmc_applicationdefinitionid@odata.bind\": \"/cmc_applicationdefinitions({{gappdefid}})\",\r\n    \"cmc_createlifecycle\": false\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationdefinitionversions",
							"host": [
								"{{Eresource_URL}}cmc_applicationdefinitionversions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Application Definition Version Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var applicationdefinitionverdetailid, applicationdefinitionverdetname;",
									"",
									"pm.test(\"Application Definition Version detail Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    applicationdefinitionverdetailid = jsonData.cmc_applicationdefinitionversiondetailid;",
									"    applicationdefinitionverdetname = jsonData.cmc_applicationdefinitionversiondetailname;",
									"    console.log(\"Application Definition version name is: \" + applicationdefinitionverdetname);",
									"});",
									"",
									"pm.globals.set('gappdefverdetid1', applicationdefinitionverdetailid);",
									"pm.globals.set('gapplicationdefinitionverdetname1', applicationdefinitionverdetname);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"pm.environment.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
									"pm.environment.set(\"timestampEndDate\", moment().add(100, 'days').format(\"YYYY-MM-DD\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"cmc_applicationdefinitionversion@odata.bind\": \"/cmc_applicationdefinitionversions({{gappdefverid1}})\",\r\n\"cmc_applicationperiod@odata.bind\": \"/cmc_applicationperiods({{gAppPerID}})\",\r\n\"cmc_enddate\": \"{{timestampEndDate}}\",\r\n\"cmc_startdate\": \"{{timestamp}}\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationdefinitionversiondetails",
							"host": [
								"{{Eresource_URL}}cmc_applicationdefinitionversiondetails"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Application Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var applicationRegId;",
									"",
									"pm.test(\"Application Registration Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    applicationRegId = jsonData.cmc_applicationregistrationid;",
									"    var applicationRegName = jsonData.cmc_applicationregistration;",
									"    console.log(\"Application Registration name is: \" +applicationRegName);",
									"    pm.globals.set('gapplicationRegName1', applicationRegName);",
									"});",
									"",
									" pm.globals.set('gapplicationRegId1', applicationRegId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"cmc_contactid@odata.bind\": \"/contacts({{gcontactid}})\",\r\n\"cmc_applicationdefinitionversionid@odata.bind\": \"/cmc_applicationdefinitionversions({{gappdefverid1}})\",\r\n\"cmc_applicationstatus\": 175490000,\r\n\"cmc_applicationsubmitted\": false\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationregistrations",
							"host": [
								"{{Eresource_URL}}cmc_applicationregistrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Application One",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var applicationId;",
									"",
									"pm.test(\"Application Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    applicationId = jsonData.cmc_applicationid;",
									"    var applicationName = jsonData.cmc_applicationname;",
									"    console.log(\"Application name is: \" + applicationName);",
									"",
									"   ",
									"    pm.globals.set('gapplicationName1', applicationName);",
									"",
									"});",
									"",
									" pm.globals.set('gapplicationId1', applicationId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"cmc_contactid@odata.bind\": \"/contacts({{gcontactid}})\",\r\n\"cmc_programid@odata.bind\": \"/mshied_programs({{gprogramid1}})\",\r\n\"cmc_applicationperiodid@odata.bind\": \"/cmc_applicationperiods({{gAppPerID}})\",\r\n\"cmc_applicationregistration@odata.bind\": \"/cmc_applicationregistrations({{gapplicationRegId1}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applications",
							"host": [
								"{{Eresource_URL}}cmc_applications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Scenario 1- (ACT,SAT,IELTS)",
			"item": [
				{
					"name": "Get Requirements Check Application One",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Requirements\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    if(jsonData.value.length <= 0)",
									"    {",
									"       console.log(\"Records not present\");",
									"    }",
									"    else",
									"    {",
									"        throw new Error(\"Record present\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationrequirements?$filter= _cmc_applicationid_value eq '{{gapplicationId1}}'",
							"host": [
								"{{Eresource_URL}}cmc_applicationrequirements"
							],
							"query": [
								{
									"key": "$filter",
									"value": " _cmc_applicationid_value eq '{{gapplicationId1}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Reuirement Definition Detail with SAT SIS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var appreqdefdetid1;",
									"",
									"",
									"pm.test(\"Application Requirment Definition Detail Created SAT SIS\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    appreqdefdetid1 = jsonData.cmc_applicationrequirementdefinitiondetailid;",
									"     console.log(\"requirement definition detail Sat SIS created\"+appreqdefdetid1);",
									"",
									" ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_applicationrequirementdefinition@odata.bind\": \"/cmc_applicationrequirementdefinitions({{grequirementdefinitionid}})\",\r\n    \"cmc_requirementtype\": 175490003,\r\n    \"cmc_testscoretype@odata.bind\": \"/mshied_testtypes({{gsatid}})\",\r\n    \"cmc_testsourcetype\": 494280004\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationrequirementdefinitiondetails",
							"host": [
								"{{Eresource_URL}}cmc_applicationrequirementdefinitiondetails"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Reuirement Definition Detail with SAT Official",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var appreqdefdetid1;",
									"",
									"",
									"pm.test(\"Application Requirment Definition Detail Created SAT official\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    appreqdefdetid1 = jsonData.cmc_applicationrequirementdefinitiondetailid;",
									"     console.log(\"requirement definition detail Sat Official created\"+appreqdefdetid1);",
									"  ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_applicationrequirementdefinition@odata.bind\": \"/cmc_applicationrequirementdefinitions({{grequirementdefinitionid}})\",\r\n    \"cmc_requirementtype\": 175490003,\r\n    \"cmc_testscoretype@odata.bind\": \"/mshied_testtypes({{gsatid}})\",\r\n    \"cmc_testsourcetype\": 494280003\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationrequirementdefinitiondetails",
							"host": [
								"{{Eresource_URL}}cmc_applicationrequirementdefinitiondetails"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Reuirement Definition Detail with ACT Self Reported",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var appreqdefdetid;",
									"",
									"",
									"pm.test(\"Application Requirment Definition Detail Created ACT self reported\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    appreqdefdetid = jsonData.cmc_applicationrequirementdefinitiondetailid;",
									"   console.log(\"requirement definition detail ACT SelfReported\"+appreqdefdetid);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"cmc_applicationrequirementdefinition@odata.bind\": \"/cmc_applicationrequirementdefinitions({{grequirementdefinitionid}})\",\r\n\"cmc_requirementtype\": 175490003,\r\n\"cmc_testscoretype@odata.bind\": \"/mshied_testtypes({{gactid}})\",\r\n\"cmc_testsourcetype\": 494280003\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationrequirementdefinitiondetails",
							"host": [
								"{{Eresource_URL}}cmc_applicationrequirementdefinitiondetails"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get IELTS Test Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var ieltsid;",
									"var testtypename;",
									"pm.test(\"Get IELTS id\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    ieltsid = jsonData.value[0].mshied_testtypeid;",
									"    testtypename = jsonData.value[0].mshied_name;",
									"    ",
									"     console.log('TesttypeID:'+ieltsid);",
									"    console.log('Testtype:'+testtypename);",
									"});",
									"pm.globals.set('gieltsid',ieltsid);",
									"pm.globals.set('gieltstypename',testtypename);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}mshied_testtypes?$select=mshied_testtypeid,mshied_name &$filter=mshied_name eq 'IELTS'",
							"host": [
								"{{Eresource_URL}}mshied_testtypes"
							],
							"query": [
								{
									"key": "$select",
									"value": "mshied_testtypeid,mshied_name "
								},
								{
									"key": "$filter",
									"value": "mshied_name eq 'IELTS'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Reuirement Definition Detail with IELTS Official transcript",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var appreqdefdetid;",
									"",
									"pm.test(\"Application Requirment Definition Detail Created IELTS official\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    appreqdefdetid = jsonData.cmc_applicationrequirementdefinitiondetailid;",
									"  console.log(\"requirement definition detail IELTS official created\"+appreqdefdetid);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"cmc_applicationrequirementdefinition@odata.bind\": \"/cmc_applicationrequirementdefinitions({{grequirementdefinitionid}})\",\r\n\"cmc_requirementtype\": 175490003,\r\n\"cmc_testscoretype@odata.bind\": \"/mshied_testtypes({{gieltsid}})\",\r\n\"cmc_testsourcetype\": 494280004\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationrequirementdefinitiondetails",
							"host": [
								"{{Eresource_URL}}cmc_applicationrequirementdefinitiondetails"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check Application Requirement",
			"item": [
				{
					"name": "Create Application Two",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var applicationId;",
									"",
									"pm.test(\"Application Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    applicationId = jsonData.cmc_applicationid;",
									"    var applicationName = jsonData.cmc_applicationname;",
									"    console.log(\"Application 2 name is: \" + applicationName);",
									"",
									"   ",
									"    pm.globals.set('gapplicationName2', applicationName);",
									"",
									"});",
									"",
									" pm.globals.set('gapplicationId2', applicationId);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n\"cmc_applicationstatus\": 175490001,\r\n\"cmc_contactid@odata.bind\": \"/contacts({{gcontactid}})\",\r\n\"cmc_programid@odata.bind\": \"/mshied_programs({{gprogramid2}})\",\r\n\"cmc_applicationperiodid@odata.bind\": \"/cmc_applicationperiods({{gAppPerID2}})\",\r\n\"cmc_applicationregistration@odata.bind\": \"/cmc_applicationregistrations({{gapplicationRegId1}})\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applications",
							"host": [
								"{{Eresource_URL}}cmc_applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Requirements Check Application two",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Get Requirements\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var length=jsonData.value.length;",
									"    if(length > 0)",
									"    {",
									"        for(var i=0;i<length ;i++)",
									"        {",
									"             if((jsonData.value[i].cmc_applicationrequirementname==\"Test Score-SAT \")&&(jsonData.value[i].cmc_requirementstatus==175490001))",
									"            {",
									"             console.log(\" SAT Records present.\");",
									"            }",
									"            if((jsonData.value[i].cmc_applicationrequirementname==\"Test Score-ACT \")&&(jsonData.value[i].cmc_requirementstatus==175490001))",
									"            {",
									"                console.log(\" ACT Record present.\");",
									"            }",
									"            if((jsonData.value[i].cmc_applicationrequirementname==\"Test Score\")&&(jsonData.value[i].cmc_requirementstatus==175490000))",
									"           {",
									"                console.log(\" IELTS Record present.\");",
									"           }",
									"        ",
									"        }     ",
									"          ",
									"    }",
									"   ",
									"    else",
									"    {",
									"        throw new Error(\"No records were present\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationrequirements?$filter= _cmc_applicationid_value eq '{{gapplicationId2}}'",
							"host": [
								"{{Eresource_URL}}cmc_applicationrequirements"
							],
							"query": [
								{
									"key": "$filter",
									"value": " _cmc_applicationid_value eq '{{gapplicationId2}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create TestScore IELTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var ieltstestscoreid;",
									" ",
									"pm.test(\"Ielts TestScore Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    ieltstestscoreid = jsonData.mshied_testscoreid;",
									"    console.log('IELTS test score id: '+ieltstestscoreid);",
									"    ",
									"});",
									"",
									"",
									"pm.globals.set('gIELTStestscore',ieltstestscoreid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var current_timestamp = new Date();\r",
									"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mshied_StudentID@odata.bind\": \"/contacts({{gcontactid}})\",\n    \"mshied_TestTypeId@odata.bind\": \"/mshied_testtypes({{gieltsid}})\",\n    \"cmc_sourceofrecord\": 175490000,\n    \"mshied_ieltscefr\": 494280001,\n    \"mshied_ieltslistening\": 4,\n    \"mshied_ieltsoverallbandscore\": 4,\n    \"mshied_ieltsreading\": 5,\n    \"mshied_ieltsspeakingscore\": 7,\n    \"mshied_ieltswriting\": 6,\n    \"mshied_testdate\": \"{{current_timestamp}}\",\n    \"mshied_testlocation\": \"bangalore\",\n    \"mshied_testsource\": 494280004\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_testscores",
							"host": [
								"{{Eresource_URL}}mshied_testscores"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Requirements Check application for ielts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Get Requirements\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var length=jsonData.value.length;",
									"    if(length > 0)",
									"    {",
									"        for(var i=0;i<length ;i++)",
									"        {",
									"             if(jsonData.value[i].cmc_applicationrequirementname==\"Test Score-SAT \")",
									"            {",
									"             console.log(\" SAT Records present.\");",
									"            }",
									"            if(jsonData.value[i].cmc_applicationrequirementname==\"Test Score-ACT \")",
									"            {",
									"                console.log(\" ACT Record present.\");",
									"            }",
									"            if((jsonData.value[i].cmc_applicationrequirementname==\"Test Score-IELTS \")&&(jsonData.value[i].cmc_requirementstatus==175490001))",
									"           {",
									"                console.log(\" IELTS Record present.\");",
									"           }",
									"        ",
									"        }     ",
									"          ",
									"    }",
									"   ",
									"    else",
									"    {",
									"        ",
									"        throw new Error(\"No record found\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationrequirements?$filter= _cmc_applicationid_value eq '{{gapplicationId2}}'",
							"host": [
								"{{Eresource_URL}}cmc_applicationrequirements"
							],
							"query": [
								{
									"key": "$filter",
									"value": " _cmc_applicationid_value eq '{{gapplicationId2}}'"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Scenario 2- (GRE)",
			"item": [
				{
					"name": "Get GRE Test Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var greid;",
									"var Testtypename;",
									"pm.test(\"Get GRE id\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    greid = jsonData.value[0].mshied_testtypeid;",
									"    Testtypename = jsonData.value[0].mshied_name;",
									"    ",
									"     console.log('TesttypeID:'+greid);",
									"    console.log('Testtype:'+Testtypename);",
									"});",
									"pm.globals.set('ggreid',greid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}mshied_testtypes?$select=mshied_testtypeid,mshied_name &$filter=mshied_name eq 'GRE'",
							"host": [
								"{{Eresource_URL}}mshied_testtypes"
							],
							"query": [
								{
									"key": "$select",
									"value": "mshied_testtypeid,mshied_name "
								},
								{
									"key": "$filter",
									"value": "mshied_name eq 'GRE'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Reuirement Definition Detail with GRE Official Transcript",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var appreqdefdetid;",
									"",
									"pm.test(\"Application Requirment Definition Detail Created (General)\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    appreqdefdetid = jsonData.cmc_applicationrequirementdefinitiondetailid;",
									"  console.log(\"requirement definition detail GRE official created\"+appreqdefdetid);",
									"});",
									"",
									"pm.globals.set('gappreqdefdetid',appreqdefdetid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_applicationrequirementdefinition@odata.bind\": \"/cmc_applicationrequirementdefinitions({{grequirementdefinitionid}})\",\r\n    \"cmc_requirementtype\": 175490003,\r\n    \"cmc_testscoretype@odata.bind\": \"/mshied_testtypes({{ggreid}})\",\r\n    \"cmc_testsourcetype\": 494280003\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationrequirementdefinitiondetails",
							"host": [
								"{{Eresource_URL}}cmc_applicationrequirementdefinitiondetails"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create TestScore GRE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var GREtestscoreid;",
									" ",
									"pm.test(\"GRE TestScore Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    GREtestscoreid = jsonData.mshied_testscoreid;",
									"    console.log('GRE test score id: '+GREtestscoreid);",
									"    ",
									"    ",
									"});",
									"",
									"",
									"pm.globals.set('gGREtestscore',GREtestscoreid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var current_timestamp = new Date();\r",
									"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mshied_StudentID@odata.bind\": \"/contacts({{gcontactid}})\",\n    \"mshied_TestTypeId@odata.bind\": \"/mshied_testtypes({{ggreid}})\",\n    \"cmc_sourceofrecord\": 175490000,\n    \"mshied_greanalyticalreasoning\": 4,\n    \"mshied_grequantitativereasoning\": 134,\n    \"mshied_gretotalscore\": 300,\n    \"mshied_greverbalreasoning\": 136,\n    \"mshied_testdate\": \"{{current_timestamp}}\",\n    \"mshied_testlocation\": \"banaglore\",\n    \"mshied_testsource\": 494280003\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_testscores",
							"host": [
								"{{Eresource_URL}}mshied_testscores"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Application Three",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var applicationId;",
									"",
									"pm.test(\"Application Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    applicationId = jsonData.cmc_applicationid;",
									"    var applicationName = jsonData.cmc_applicationname;",
									"    console.log(\"Application name is: \" + applicationName);",
									"",
									"   ",
									"    pm.globals.set('gapplicationName3', applicationName);",
									"",
									"});",
									"",
									" pm.globals.set('gapplicationId3', applicationId);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n\"cmc_applicationstatus\": 175490001,\r\n\"cmc_contactid@odata.bind\": \"/contacts({{gcontactid}})\",\r\n\"cmc_programid@odata.bind\": \"/mshied_programs({{gprogramid3}})\",\r\n\"cmc_applicationperiodid@odata.bind\": \"/cmc_applicationperiods({{gAppPerID3}})\",\r\n\"cmc_applicationregistration@odata.bind\": \"/cmc_applicationregistrations({{gapplicationRegId1}})\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applications",
							"host": [
								"{{Eresource_URL}}cmc_applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Requirements Check Application three",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Get Requirements\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var length=jsonData.value.length;",
									"    if(length > 0)",
									"    {",
									"        for(var i=0;i<length ;i++)",
									"        {",
									"             if(jsonData.value[i].cmc_applicationrequirementname==\"Test Score-SAT \")",
									"            {",
									"             console.log(\" SAT Records present.\");",
									"            }",
									"            if(jsonData.value[i].cmc_applicationrequirementname==\"Test Score-ACT \")",
									"            {",
									"                console.log(\" ACT Record present.\");",
									"            }",
									"            if((jsonData.value[i].cmc_applicationrequirementname==\"Test Score-IELTS \")&&(jsonData.value[0].cmc_requirementstatus==175490001))",
									"           {",
									"                console.log(\" IELTS Record present.\");",
									"           }",
									"",
									"            if(jsonData.value[i].cmc_applicationrequirementname==\"Test Score\")",
									"           {",
									"                console.log(\" GRE Record present.\");",
									"           }",
									"        ",
									"        }     ",
									"          ",
									"    }",
									"   ",
									"    else",
									"    {",
									"       ",
									"        throw new Error(\"No record found\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationrequirements?$filter= _cmc_applicationid_value eq '{{gapplicationId3}}'",
							"host": [
								"{{Eresource_URL}}cmc_applicationrequirements"
							],
							"query": [
								{
									"key": "$filter",
									"value": " _cmc_applicationid_value eq '{{gapplicationId3}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update GRE  Test Source",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var GREtestscoreid;",
									" ",
									"pm.test(\"GRE TestScore Updated\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    GREtestscoreid = jsonData.mshied_testscoreid;",
									"    console.log('GRE test score id: '+GREtestscoreid);",
									"    ",
									"    ",
									"});",
									"",
									"",
									"pm.globals.set('gGREtestscore',GREtestscoreid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mshied_testsource\": 494280004\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_testscores({{ggreid}})",
							"host": [
								"{{Eresource_URL}}mshied_testscores({{ggreid}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Scenario 3 - (TOEFL)",
			"item": [
				{
					"name": "Get TOEFL Test Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var toeflid;",
									"var Testtypename;",
									"pm.test(\"Get TOEFL id\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    toeflid = jsonData.value[0].mshied_testtypeid;",
									"    Testtypename = jsonData.value[0].mshied_name;",
									"    ",
									"     console.log('TesttypeID:'+toeflid);",
									"    console.log('Testtype:'+Testtypename);",
									"});",
									"pm.globals.set('gtoeflid',toeflid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}mshied_testtypes?$select=mshied_testtypeid,mshied_name &$filter=mshied_name eq 'TOEFL'",
							"host": [
								"{{Eresource_URL}}mshied_testtypes"
							],
							"query": [
								{
									"key": "$select",
									"value": "mshied_testtypeid,mshied_name "
								},
								{
									"key": "$filter",
									"value": "mshied_name eq 'TOEFL'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create TestScore TOEFL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var TOEFLtestscoreid;",
									"",
									"pm.test(\"TOEFL TestScore Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    TOEFLtestscoreid = jsonData.mshied_testscoreid;",
									"    console.log('TOEFL test score id: '+TOEFLtestscoreid);",
									"   ",
									"    ",
									"});",
									"",
									"",
									"pm.globals.set('gTOEFLtestscore',TOEFLtestscoreid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var current_timestamp = new Date();",
									"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mshied_StudentID@odata.bind\": \"/contacts({{gcontactid}})\",\n    \"mshied_TestTypeId@odata.bind\": \"/mshied_testtypes({{gactid}})\",\n    \"cmc_sourceofrecord\": 175490000,\n    \"mshied_testdate\": \"{{current_timestamp}}\",\n    \"mshied_testlocation\": \"bangalore\",\n    \"mshied_testsource\": 494280004,\n    \"mshied_toefllisteningsection\": 11,\n    \"mshied_toeflreadingsection\": 12,\n    \"mshied_toeflspeakingsection\": 13,\n    \"mshied_toefltotalscore\": 100,\n    \"mshied_toeflwritingsection\": 11\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}mshied_testscores",
							"host": [
								"{{Eresource_URL}}mshied_testscores"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Application Four",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var applicationId;",
									"",
									"pm.test(\"Application Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
									"    var jsonData = JSON.parse(responseBody);",
									"    applicationId = jsonData.cmc_applicationid;",
									"    var applicationName = jsonData.cmc_applicationname;",
									"    console.log(\"Application 4 name is: \" + applicationName);",
									"",
									"",
									"    pm.globals.set('gapplicationName4', applicationName);",
									"",
									"});",
									"",
									"pm.globals.set('gapplicationId4', applicationId);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n\"cmc_applicationstatus\": 175490001,\r\n\"cmc_contactid@odata.bind\": \"/contacts({{gcontactid}})\",\r\n\"cmc_programid@odata.bind\": \"/mshied_programs({{gprogramid4}})\",\r\n\"cmc_applicationperiodid@odata.bind\": \"/cmc_applicationperiods({{gAppPerID4}})\",\r\n\"cmc_applicationregistration@odata.bind\": \"/cmc_applicationregistrations({{gapplicationRegId1}})\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applications",
							"host": [
								"{{Eresource_URL}}cmc_applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Requirements check application four",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Get Requirements\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var length=jsonData.value.length;",
									"    if(length > 0)",
									"    {",
									"        for(var i=0;i<length ;i++)",
									"        {",
									"             if(jsonData.value[i].cmc_applicationrequirementname==\"Test Score-SAT \")",
									"            {",
									"             console.log(\" SAT Records present.\");",
									"            }",
									"            if(jsonData.value[i].cmc_applicationrequirementname==\"Test Score-ACT \")",
									"            {",
									"                console.log(\" ACT Record present.\");",
									"            }",
									"            if((jsonData.value[i].cmc_applicationrequirementname==\"Test Score-IELTS \")&&(jsonData.value[0].cmc_requirementstatus==175490001))",
									"           {",
									"                console.log(\" IELTS Record present.\");",
									"           }",
									"",
									"            if(jsonData.value[i].cmc_applicationrequirementname==\"Test Score\")",
									"           {",
									"                console.log(\" GRE Record present.\");",
									"           }",
									"",
									"            if(jsonData.value[i].cmc_applicationrequirementname!=\"Test Score-TOEFL \")",
									"           {",
									"                console.log(\" toefl Record not present.\");",
									"           }",
									"        ",
									"        }     ",
									"          ",
									"    }",
									"   ",
									"    else",
									"    {",
									"      ",
									"        throw new Error(\"No record found\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationrequirements?$filter= _cmc_applicationid_value eq '{{gapplicationId4}}'",
							"host": [
								"{{Eresource_URL}}cmc_applicationrequirements"
							],
							"query": [
								{
									"key": "$filter",
									"value": " _cmc_applicationid_value eq '{{gapplicationId4}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Reuirement Definition Detail For TOEFl 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var appreqdefdetid;",
									"",
									"pm.test(\"Application Requirment Definition Detail Created Tofel\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    appreqdefdetid = jsonData.cmc_applicationrequirementdefinitiondetailid;",
									" console.log(\"requirement definition detail TOEFL created\"+appreqdefdetid);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_applicationrequirementdefinition@odata.bind\": \"/cmc_applicationrequirementdefinitions({{grequirementdefinitionid}})\",\r\n    \"cmc_requirementtype\": 175490003,\r\n    \"cmc_conditional\": false,\r\n    \"cmc_testscoretype@odata.bind\": \"/mshied_testtypes({{gtoeflid}})\",\r\n    \"cmc_testsourcetype\": 494280003\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationrequirementdefinitiondetails",
							"host": [
								"{{Eresource_URL}}cmc_applicationrequirementdefinitiondetails"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Reuirement Definition Detail For TOEFl 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var appreqdefdetid;",
									"",
									"pm.test(\"Application Requirment Definition Detail Created (General)\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    appreqdefdetid = jsonData.cmc_applicationrequirementdefinitiondetailid;",
									" console.log(\"requirement definition detail TOEFL created\"+appreqdefdetid);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var current_timestamp = new Date();\r",
									"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cmc_applicationrequirementdefinition@odata.bind\": \"/cmc_applicationrequirementdefinitions({{grequirementdefinitionid}})\",\r\n    \"cmc_conditional\": true,\r\n    \"cmc_name\": null,\r\n    \"cmc_requirementdeadline\": \"{{current_timestamp}}\",\r\n    \"cmc_requirementrequired\": true,\r\n    \"cmc_requirementtype\": 175490003,\r\n    \"cmc_statusonsubmit\": 175490001,\r\n    \"cmc_testscoretype@odata.bind\": \"/mshied_testtypes({{gtoeflid}})\",\r\n    \"cmc_testsourcetype\": 494280004\r\n}"
						},
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationrequirementdefinitiondetails",
							"host": [
								"{{Eresource_URL}}cmc_applicationrequirementdefinitiondetails"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Requirements check application for toefl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Get Requirements\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var length=jsonData.value.length;",
									"    if(length > 0)",
									"    {",
									"        for(var i=0;i<length ;i++)",
									"        {",
									"             if(jsonData.value[i].cmc_applicationrequirementname==\"Test Score-SAT \")",
									"            {",
									"             console.log(\" SAT Records present.\");",
									"            }",
									"            if(jsonData.value[i].cmc_applicationrequirementname==\"Test Score-ACT \")",
									"            {",
									"                console.log(\" ACT Record present.\");",
									"            }",
									"            if((jsonData.value[i].cmc_applicationrequirementname==\"Test Score-IELTS \")&&(jsonData.value[0].cmc_requirementstatus==175490001))",
									"           {",
									"                console.log(\" IELTS Record present.\");",
									"           }",
									"",
									"            if(jsonData.value[i].cmc_applicationrequirementname==\"Test Score\")",
									"           {",
									"                console.log(\" GRE Record present.\");",
									"           }",
									"",
									"            if(jsonData.value[i].cmc_applicationrequirementname==\"Test Score-TOEFL\")",
									"           {",
									"                console.log(\" toefl Record present.\");",
									"           }",
									"        ",
									"        }     ",
									"          ",
									"    }",
									"   ",
									"    else",
									"    {",
									"       ",
									"        throw new Error(\"No record found\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							}
						],
						"url": {
							"raw": "{{Eresource_URL}}cmc_applicationrequirements?$filter= _cmc_applicationid_value eq '{{gapplicationId4}}'",
							"host": [
								"{{Eresource_URL}}cmc_applicationrequirements"
							],
							"query": [
								{
									"key": "$filter",
									"value": " _cmc_applicationid_value eq '{{gapplicationId4}}'"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}