{
	"info": {
		"_postman_id": "638c1e9f-bfc8-4d6d-bea2-02d10cda2277",
		"name": "TC_1385574_GeocodeValidationForValidAddress",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Disable GeocodeAddress plugins",
			"item": [
				{
					"name": "GetToken_DCRM SysAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setGlobalVariable('gaccess_token', data.access_token);",
									"",
									"//pm.environment.set(\"Eaccess_token\", data.access_token);",
									"console.log(pm.globals.get(\"gaccess_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{Esystemadmin_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{Esystemadmin_secret}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{Eresource}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{Eredirectid}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{Eredirectid}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable-GeocodeAddressPlugin: Create of customeraddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deactivating GeocodeAddressPlugin: Create of customeraddress\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var pluginId = jsonData.sdkmessageprocessingstepid;",
									"    var pluginName = jsonData.name;",
									"    console.log('pluginName: '+pluginName);",
									" ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "MSCRM.SuppressDuplicateDetection",
								"type": "text",
								"value": "false"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"statuscode\": 2,\r\n    \"statecode\": 1\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/sdkmessageprocessingsteps(4ec78a4f-4a53-e811-a95a-000d3af28587)",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"sdkmessageprocessingsteps(4ec78a4f-4a53-e811-a95a-000d3af28587)"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable-GeocodeAddressPlugin: Update of customeraddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deactivating GeocodeAddressPlugin: Update of customeraddress\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var pluginId = jsonData.sdkmessageprocessingstepid;",
									"    var pluginName = jsonData.name;",
									"    console.log('pluginName: '+pluginName);",
									" ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "MSCRM.SuppressDuplicateDetection",
								"type": "text",
								"value": "false"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"statuscode\": 2,\r\n    \"statecode\": 1\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/sdkmessageprocessingsteps(9c94e673-4a53-e811-a95c-000d3af28a0d)",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"sdkmessageprocessingsteps(9c94e673-4a53-e811-a95c-000d3af28a0d)"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Valid Address - All data",
			"item": [
				{
					"name": "GetToken_DCRM Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setGlobalVariable('gaccess_token', data.access_token);",
									"console.log(pm.globals.get(\"gaccess_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{Eadmin_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{Eadmin_secret}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{Eresource}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{Eredirectid}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{Eredirectid}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contact 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contact_id;",
									"pm.test(\"Contact Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    contact_id = jsonData.contactid;",
									"    var fullname = jsonData.fullname;",
									"    console.log('Contact:' +contact_id);",
									"    console.log('fullname:' +fullname);",
									"    ",
									"});",
									"",
									"pm.globals.set(\"gcontactid1\",contact_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"ContactGeo1{{$randomFirstName}}{{$randomInt}}\",\r\n    \"lastname\": \"ContLast1{{$randomLastName}}{{$randomInt}}\",\r\n    \"mshied_contacttype\":\"494280011\",\r\n    \"cmc_sourcecategoryid@odata.bind\":\"/contacts(379733e4-142b-e811-a965-000d3a11e605)\",\r\n    \"cmc_sourcemethodid@odata.bind\":\"/contacts(827ff116-142b-e811-a965-000d3a11e605)\"\r\n   \r\n}\r\n\r\n  \r\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/contacts",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Valid Address - All data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created New Address for Contact\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var engage_addressnumber=jsonData.addressnumber;",
									"    var engage_geocordinates=jsonData.cmc_geocoordinates;",
									"    var engage_country=jsonData.cmc_countryregion;",
									"    var engage_state=jsonData.cmc_state;",
									"    var engage_city=jsonData.city;",
									"    var engage_line1=jsonData.line1;",
									"    var engage_line2=jsonData.line2;",
									"    var engage_line3=jsonData.line3;",
									"    var engage_postalcode=jsonData.postalcode;",
									"    var engage_addresstypecode=jsonData.addresstypecode;",
									"    var engage_mailtype=jsonData.mshied_mailtype;",
									"    var engage_latitude=jsonData.latitude;",
									"    var engage_longitude=jsonData.longitude;",
									"    var customeraddressid=jsonData.customeraddressid;",
									"    ",
									"    pm.globals.set('gcustomeraddressid1',customeraddressid);",
									"    pm.globals.set('gLHS_addressnumber1',engage_addressnumber);",
									"    pm.globals.set('gLHS_geocordinates1',engage_geocordinates);",
									"    pm.globals.set('gLHS_country1',engage_country);",
									"    pm.globals.set('gLHS_state1',engage_state);",
									"    pm.globals.set('gLHS_city1',engage_city);",
									"    pm.globals.set('gLHS_1line1',engage_line1);",
									"    pm.globals.set('gLHS_2line1',engage_line2);",
									"    pm.globals.set('gLHS_3line1',engage_line3);",
									"    pm.globals.set('gLHS_postalcode1',engage_postalcode);",
									"    pm.globals.set('gLHS_addresstypecode1',engage_addresstypecode);",
									"    pm.globals.set('gLHS_mailtype1',engage_mailtype);",
									"    pm.globals.set('gLHS_latitude1',engage_latitude);",
									"    pm.globals.set('gLHS_longitude1',engage_longitude);",
									"",
									"    console.log(\"customeraddressid: \"+customeraddressid);",
									"    console.log(\"engage_addressnumber: \"+engage_addressnumber);",
									"    console.log(\"engage_geocordinates: \"+engage_geocordinates);",
									"    console.log(\"engage_country: \"+engage_country);",
									"    console.log(\"engage_state: \"+engage_state);",
									"    console.log(\"engage_city: \"+engage_city);",
									"    console.log(\"engage_line1: \"+engage_line1);",
									"    console.log(\"engage_line2: \"+engage_line2);",
									"    console.log(\"engage_line3: \"+engage_line3);  ",
									"    console.log(\"engage_postalcode: \"+engage_postalcode); ",
									"    console.log(\"engage_addresstypecode: \"+engage_addresstypecode); ",
									"    console.log(\"engage_mailtype: \"+engage_mailtype);  ",
									"    console.log(\"engage_latitude: \"+engage_latitude);",
									"    console.log(\"engage_longitude: \"+engage_longitude);",
									"",
									"});",
									"",
									"setTimeout(function(){}, 85000);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"addresstypecode\":\"3\",\r\n    \"mshied_mailtype\": 494280000,\r\n    \"cmc_countryregion\": \"175490231\",\r\n    \"cmc_state\": \"175490282\",\r\n    \"line1\": \"Street1\",\r\n    \"postalcode\": \"331{{$randomInt}}\",\r\n    \"line2\": \"street2\",\r\n    \"line3\": \"street3\",\r\n    \"city\": \"Miami\",\r\n    \"cmc_county\": \"175490027\",\r\n\t\"parentid_contact@odata.bind\": \"/contacts({{gcontactid1}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/customeraddresses",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"customeraddresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Lat, long and geocordinates for Valid Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fetching the Customer address record\", function() \r",
									"{\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"    var jsonData =JSON.parse(responseBody);\r",
									"\r",
									"    //Data from RHS [Post Azure function run]\r",
									"    var RHS_addressnumber=jsonData.addressnumber;\r",
									"    var RHS_geocordinates=jsonData.cmc_geocoordinates;\r",
									"    var RHS_country=jsonData.cmc_countryregion;\r",
									"    var RHS_state=jsonData.cmc_state;\r",
									"    var RHS_city=jsonData.city;\r",
									"    var RHS_line1=jsonData.line1;\r",
									"    var RHS_line2=jsonData.line2;\r",
									"    var RHS_line3=jsonData.line3;\r",
									"    var RHS_postalcode=jsonData.postalcode;\r",
									"    var RHS_addresstypecode=jsonData.addresstypecode;\r",
									"    var RHS_mailtype=jsonData.mshied_mailtype;\r",
									"    var RHS_latitude=jsonData.latitude;\r",
									"    var RHS_longitude=jsonData.longitude;\r",
									"\r",
									"    console.log(\"RHS_addressnumber: \"+RHS_addressnumber);\r",
									"    console.log(\"RHS_geocordinates: \"+RHS_geocordinates);\r",
									"    console.log(\"RHS_country: \"+RHS_country);\r",
									"    console.log(\"RHS_state: \"+RHS_state);\r",
									"    console.log(\"RHS_city: \"+RHS_city);\r",
									"    console.log(\"RHS_line1: \"+RHS_line1);\r",
									"    console.log(\"RHS_line2: \"+RHS_line2);\r",
									"    console.log(\"RHS_line3: \"+RHS_line3);  \r",
									"    console.log(\"RHS_postalcode: \"+RHS_postalcode); \r",
									"    console.log(\"RHS_addresstypecode: \"+RHS_addresstypecode); \r",
									"    console.log(\"RHS_mailtype: \"+RHS_mailtype);  \r",
									"    console.log(\"RHS_latitude: \"+RHS_latitude); \r",
									"    console.log(\"RHS_longitude: \"+RHS_longitude); \r",
									"\r",
									"    //Data from LHS\r",
									"    var LHS_addressnumber1=pm.globals.get(\"gLHS_addressnumber1\");\r",
									"    var LHS_geocordinates1=pm.globals.get(\"gLHS_geocordinates1\");\r",
									"    var LHS_country1=pm.globals.get(\"gLHS_country1\");\r",
									"    var LHS_state1=pm.globals.get(\"gLHS_state1\");\r",
									"    var LHS_city1=pm.globals.get(\"gLHS_city1\");\r",
									"    var LHS_1line1=pm.globals.get(\"gLHS_1line1\");\r",
									"    var LHS_2line1=pm.globals.get(\"gLHS_2line1\");\r",
									"    var LHS_3line1=pm.globals.get(\"gLHS_3line1\");\r",
									"    var LHS_postalcode1=pm.globals.get(\"gLHS_postalcode1\");\r",
									"    var LHS_addresstypecode1=pm.globals.get(\"gLHS_addresstypecode1\");\r",
									"    var LHS_mailtype1=pm.globals.get(\"gLHS_mailtype1\");\r",
									"    var LHS_latitude1=pm.globals.set(\"gLHS_latitude1\");\r",
									"    var LHS_longitude1=pm.globals.set(\"gLHS_longitude1\");\r",
									"\r",
									"    console.log(\"LHS_addressnumber1: \"+LHS_addressnumber1);\r",
									"    console.log(\"LHS_geocordinates1: \"+LHS_geocordinates1);\r",
									"    console.log(\"LHS_country1: \"+LHS_country1);\r",
									"    console.log(\"LHS_state1: \"+LHS_state1);\r",
									"    console.log(\"LHS_city1: \"+LHS_city1);\r",
									"    console.log(\"LHS_1line1: \"+LHS_1line1);\r",
									"    console.log(\"LHS_2line1: \"+LHS_2line1);\r",
									"    console.log(\"LHS_3line1: \"+LHS_3line1);  \r",
									"    console.log(\"LHS_postalcode1: \"+LHS_postalcode1); \r",
									"    console.log(\"LHS_addresstypecode1: \"+LHS_addresstypecode1); \r",
									"    console.log(\"LHS_mailtype1: \"+LHS_mailtype1);\r",
									"    console.log(\"LHS_latitude1: \"+LHS_latitude1);\r",
									"    console.log(\"LHS_longitude1: \"+LHS_longitude1);\r",
									"\r",
									"    //Address number check\r",
									"    pm.test(\"Address number field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_addressnumber).to.equal(1);\r",
									"            \r",
									"        });\r",
									"\r",
									"   //Geocordinates check\r",
									"    pm.test(\"Geocordinates field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_geocordinates).to.equal(1);\r",
									"        });\r",
									"\r",
									"    //Country check\r",
									"    pm.test(\"country field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_country1).to.equal(RHS_country);\r",
									"        });\r",
									"\r",
									"    //State check\r",
									"    pm.test(\"State field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_state1).to.equal(RHS_state);\r",
									"        });\r",
									"    \r",
									"    //City check \r",
									"    pm.test(\"City field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_city1).to.equal(RHS_city);\r",
									"        });\r",
									"    \r",
									"    //Line1 check\r",
									"    pm.test(\"Line 1 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_1line1).to.equal(RHS_line1);\r",
									"        });\r",
									"\r",
									"    //Line2 check\r",
									"    pm.test(\"Line 2 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_2line1).to.equal(RHS_line2);\r",
									"        });\r",
									"\r",
									"    //Line3 check\r",
									"    pm.test(\"Line 3 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_3line1).to.equal(RHS_line3);\r",
									"        });\r",
									"    \r",
									"    //Postalcode check\r",
									"    pm.test(\"Postalcode field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_postalcode1).to.equal(RHS_postalcode);\r",
									"        });\r",
									"\r",
									"    //AddressTypeCode check\r",
									"    pm.test(\"AddressTypeCode field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_addresstypecode1).to.equal(RHS_addresstypecode);\r",
									"        });\r",
									"    \r",
									"    //Mailtype check\r",
									"    pm.test(\"Mailtype field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_mailtype1).to.equal(RHS_mailtype);\r",
									"        });\r",
									"\r",
									"    //Latitude check\r",
									"    pm.test(\"Latitude field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_latitude).not.eql(null);\r",
									"        });\r",
									"    \r",
									"    //Longitude check\r",
									"    pm.test(\"Longitude field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_longitude).not.eql(null);\r",
									"        });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/customeraddresses({{gcustomeraddressid1}})",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"customeraddresses({{gcustomeraddressid1}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Valid Address - no Line2 and line3",
			"item": [
				{
					"name": "Create Contact 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contact_id;",
									"pm.test(\"Contact Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    contact_id = jsonData.contactid;",
									"    var fullname = jsonData.fullname;",
									"    console.log('Contact:' +contact_id);",
									"    console.log('fullname:' +fullname);",
									"    ",
									"});",
									"",
									"pm.globals.set(\"gcontactid2\",contact_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"ContactGeo2{{$randomFirstName}}{{$randomInt}}\",\r\n    \"lastname\": \"ContLast2{{$randomLastName}}{{$randomInt}}\",\r\n    \"mshied_contacttype\": \"494280002\"\r\n   \r\n}\r\n\r\n  \r\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/contacts",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Valid Address - no Line2 and line3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created New Address for Contact 2\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var engage_addressnumber=jsonData.addressnumber;",
									"    var engage_geocordinates=jsonData.cmc_geocoordinates;",
									"    var engage_country=jsonData.cmc_countryregion;",
									"    var engage_state=jsonData.cmc_state;",
									"    var engage_city=jsonData.city;",
									"    var engage_line1=jsonData.line1;",
									"    var engage_line2=jsonData.line2;",
									"    var engage_line3=jsonData.line3;",
									"    var engage_postalcode=jsonData.postalcode;",
									"    var engage_addresstypecode=jsonData.addresstypecode;",
									"    var engage_mailtype=jsonData.mshied_mailtype;",
									"    var engage_latitude=jsonData.latitude;",
									"    var engage_longitude=jsonData.longitude;",
									"    var customeraddressid=jsonData.customeraddressid;",
									"",
									"    pm.globals.set('gcustomeraddressid2',customeraddressid);",
									"    pm.globals.set('gLHS_addressnumber2',engage_addressnumber);",
									"    pm.globals.set('gLHS_geocordinates2',engage_geocordinates);",
									"    pm.globals.set('gLHS_country2',engage_country);",
									"    pm.globals.set('gLHS_state2',engage_state);",
									"    pm.globals.set('gLHS_city2',engage_city);",
									"    pm.globals.set('gLHS_1line2',engage_line1);",
									"    pm.globals.set('gLHS_2line2',engage_line2);",
									"    pm.globals.set('gLHS_3line2',engage_line3);",
									"    pm.globals.set('gLHS_postalcode2',engage_postalcode);",
									"    pm.globals.set('gLHS_addresstypecode2',engage_addresstypecode);",
									"    pm.globals.set('gLHS_mailtype2',engage_mailtype);",
									"    pm.globals.set('gLHS_latitude2',engage_latitude);",
									"    pm.globals.set('gLHS_longitude2',engage_longitude);",
									"",
									"    console.log(\"customeraddressid: \"+customeraddressid);",
									"    console.log(\"engage_addressnumber: \"+engage_addressnumber);",
									"    console.log(\"engage_geocordinates: \"+engage_geocordinates);",
									"    console.log(\"engage_country: \"+engage_country);",
									"    console.log(\"engage_state: \"+engage_state);",
									"    console.log(\"engage_city: \"+engage_city);",
									"    console.log(\"engage_line1: \"+engage_line1);",
									"    console.log(\"engage_line2: \"+engage_line2);",
									"    console.log(\"engage_line3: \"+engage_line3);  ",
									"    console.log(\"engage_postalcode: \"+engage_postalcode); ",
									"    console.log(\"engage_addresstypecode: \"+engage_addresstypecode); ",
									"    console.log(\"engage_mailtype: \"+engage_mailtype);  ",
									"    console.log(\"engage_latitude: \"+engage_latitude);",
									"    console.log(\"engage_longitude: \"+engage_longitude);",
									"",
									"});",
									"",
									"setTimeout(function(){}, 85000);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t   \"addresstypecode\":\"3\",\r\n        \"mshied_mailtype\": 494280000,\r\n        \"cmc_countryregion\": \"175490231\",\r\n        \"cmc_state\": \"175490282\",\r\n        \"line1\": \"Street1\",\r\n        \"postalcode\": \"331{{$randomInt}}\",\r\n        \"city\": \"Texas\",\r\n        \"cmc_county\": \"175490027\",\r\n\t   \"parentid_contact@odata.bind\": \"/contacts({{gcontactid2}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/customeraddresses",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"customeraddresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Lat, long and geocordinates for Valid Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fetching the Customer address record\", function() \r",
									"{\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"    var jsonData =JSON.parse(responseBody);\r",
									"\r",
									"    //Data from RHS [Post Azure function run]\r",
									"    var RHS_addressnumber=jsonData.addressnumber;\r",
									"    var RHS_geocordinates=jsonData.cmc_geocoordinates;\r",
									"    var RHS_country=jsonData.cmc_countryregion;\r",
									"    var RHS_state=jsonData.cmc_state;\r",
									"    var RHS_city=jsonData.city;\r",
									"    var RHS_line1=jsonData.line1;\r",
									"    var RHS_line2=jsonData.line2;\r",
									"    var RHS_line3=jsonData.line3;\r",
									"    var RHS_postalcode=jsonData.postalcode;\r",
									"    var RHS_addresstypecode=jsonData.addresstypecode;\r",
									"    var RHS_mailtype=jsonData.mshied_mailtype;\r",
									"    var RHS_latitude=jsonData.latitude;\r",
									"    var RHS_longitude=jsonData.longitude;\r",
									"\r",
									"    console.log(\"RHS_addressnumber: \"+RHS_addressnumber);\r",
									"    console.log(\"RHS_geocordinates: \"+RHS_geocordinates);\r",
									"    console.log(\"RHS_country: \"+RHS_country);\r",
									"    console.log(\"RHS_state: \"+RHS_state);\r",
									"    console.log(\"RHS_city: \"+RHS_city);\r",
									"    console.log(\"RHS_line1: \"+RHS_line1);\r",
									"    console.log(\"RHS_line2: \"+RHS_line2);\r",
									"    console.log(\"RHS_line3: \"+RHS_line3);  \r",
									"    console.log(\"RHS_postalcode: \"+RHS_postalcode); \r",
									"    console.log(\"RHS_addresstypecode: \"+RHS_addresstypecode); \r",
									"    console.log(\"RHS_mailtype: \"+RHS_mailtype); \r",
									"    console.log(\"RHS_latitude: \"+RHS_latitude); \r",
									"    console.log(\"RHS_longitude: \"+RHS_longitude);  \r",
									"\r",
									"    //Data from LHS\r",
									"    var LHS_addressnumber1=pm.globals.get(\"gLHS_addressnumber2\");\r",
									"    var LHS_geocordinates1=pm.globals.get(\"gLHS_geocordinates2\");\r",
									"    var LHS_country1=pm.globals.get(\"gLHS_country2\");\r",
									"    var LHS_state1=pm.globals.get(\"gLHS_state2\");\r",
									"    var LHS_city1=pm.globals.get(\"gLHS_city2\");\r",
									"    var LHS_1line1=pm.globals.get(\"gLHS_1line2\");\r",
									"    var LHS_2line1=pm.globals.get(\"gLHS_2line2\");\r",
									"    var LHS_3line1=pm.globals.get(\"gLHS_3line2\");\r",
									"    var LHS_postalcode1=pm.globals.get(\"gLHS_postalcode2\");\r",
									"    var LHS_addresstypecode1=pm.globals.get(\"gLHS_addresstypecode2\");\r",
									"    var LHS_mailtype1=pm.globals.get(\"gLHS_mailtype2\");\r",
									"    var LHS_latitude1=pm.globals.set(\"gLHS_latitude2\");\r",
									"    var LHS_longitude1=pm.globals.set(\"gLHS_longitude2\");\r",
									"\r",
									"    console.log(\"LHS_addressnumber1: \"+LHS_addressnumber1);\r",
									"    console.log(\"LHS_geocordinates1: \"+LHS_geocordinates1);\r",
									"    console.log(\"LHS_country1: \"+LHS_country1);\r",
									"    console.log(\"LHS_state1: \"+LHS_state1);\r",
									"    console.log(\"LHS_city1: \"+LHS_city1);\r",
									"    console.log(\"LHS_1line1: \"+LHS_1line1);\r",
									"    console.log(\"LHS_2line1: \"+LHS_2line1);\r",
									"    console.log(\"LHS_3line1: \"+LHS_3line1);  \r",
									"    console.log(\"LHS_postalcode1: \"+LHS_postalcode1); \r",
									"    console.log(\"LHS_addresstypecode1: \"+LHS_addresstypecode1); \r",
									"    console.log(\"LHS_mailtype1: \"+LHS_mailtype1);\r",
									"    console.log(\"LHS_latitude1: \"+LHS_latitude1);\r",
									"    console.log(\"LHS_longitude1: \"+LHS_longitude1);\r",
									"\r",
									"    //Address number check\r",
									"    pm.test(\"Address number field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_addressnumber).to.equal(1);\r",
									"            \r",
									"        });\r",
									"\r",
									"   //Geocordinates check\r",
									"    pm.test(\"Geocordinates field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_geocordinates).to.equal(1);\r",
									"        });\r",
									"\r",
									"    //Country check\r",
									"    pm.test(\"country field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_country1).to.equal(RHS_country);\r",
									"        });\r",
									"\r",
									"    //State check\r",
									"    pm.test(\"State field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_state1).to.equal(RHS_state);\r",
									"        });\r",
									"    \r",
									"    //City check \r",
									"    pm.test(\"City field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_city1).to.equal(RHS_city);\r",
									"        });\r",
									"    \r",
									"    //Line1 check\r",
									"    pm.test(\"Line 1 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_1line1).to.equal(RHS_line1);\r",
									"        });\r",
									"\r",
									"    //Line2 check\r",
									"    pm.test(\"Line 2 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_2line1).to.equal(RHS_line2);\r",
									"        });\r",
									"\r",
									"    //Line3 check\r",
									"    pm.test(\"Line 3 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_3line1).to.equal(RHS_line3);\r",
									"        });\r",
									"    \r",
									"    //Postalcode check\r",
									"    pm.test(\"Postalcode field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_postalcode1).to.equal(RHS_postalcode);\r",
									"        });\r",
									"\r",
									"    //AddressTypeCode check\r",
									"    pm.test(\"AddressTypeCode field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_addresstypecode1).to.equal(RHS_addresstypecode);\r",
									"        });\r",
									"    \r",
									"    //Mailtype check\r",
									"    pm.test(\"Mailtype field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_mailtype1).to.equal(RHS_mailtype);\r",
									"        });\r",
									"    \r",
									"    //Latitude check\r",
									"    pm.test(\"Latitude field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_latitude).not.eql(null);\r",
									"        });\r",
									"    \r",
									"    //Longitude check\r",
									"    pm.test(\"Longitude field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_longitude).not.eql(null);\r",
									"        });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/customeraddresses({{gcustomeraddressid2}})",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"customeraddresses({{gcustomeraddressid2}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Valid Address - country and state",
			"item": [
				{
					"name": "Create Contact 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contact_id;",
									"pm.test(\"Contact Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    contact_id = jsonData.contactid;",
									"    var fullname = jsonData.fullname;",
									"    console.log('Contact:' +contact_id);",
									"    console.log('fullname:' +fullname);",
									"    ",
									"});",
									"",
									"pm.globals.set(\"gcontactid3\",contact_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"ContactGeo3{{$randomFirstName}}{{$randomInt}}\",\r\n    \"lastname\": \"ContLast3{{$randomLastName}}{{$randomInt}}\",\r\n    \"mshied_contacttype\": \"494280002\"\r\n   \r\n}\r\n\r\n  \r\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/contacts",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Valid Address - country and state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created New Address for Contact 3\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var engage_addressnumber=jsonData.addressnumber;",
									"    var engage_geocordinates=jsonData.cmc_geocoordinates;",
									"    var engage_country=jsonData.cmc_countryregion;",
									"    var engage_state=jsonData.cmc_state;",
									"    var engage_city=jsonData.city;",
									"    var engage_line1=jsonData.line1;",
									"    var engage_line2=jsonData.line2;",
									"    var engage_line3=jsonData.line3;",
									"    var engage_postalcode=jsonData.postalcode;",
									"    var engage_addresstypecode=jsonData.addresstypecode;",
									"    var engage_mailtype=jsonData.mshied_mailtype;",
									"    var engage_latitude=jsonData.latitude;",
									"    var engage_longitude=jsonData.longitude;",
									"    var customeraddressid=jsonData.customeraddressid;",
									"",
									"    pm.globals.set('gcustomeraddressid3',customeraddressid);",
									"    pm.globals.set('gLHS_addressnumber3',engage_addressnumber);",
									"    pm.globals.set('gLHS_geocordinates3',engage_geocordinates);",
									"    pm.globals.set('gLHS_country3',engage_country);",
									"    pm.globals.set('gLHS_state3',engage_state);",
									"    pm.globals.set('gLHS_city3',engage_city);",
									"    pm.globals.set('gLHS_1line3',engage_line1);",
									"    pm.globals.set('gLHS_2line3',engage_line2);",
									"    pm.globals.set('gLHS_3line3',engage_line3);",
									"    pm.globals.set('gLHS_postalcode3',engage_postalcode);",
									"    pm.globals.set('gLHS_addresstypecode3',engage_addresstypecode);",
									"    pm.globals.set('gLHS_mailtype3',engage_mailtype);",
									"    pm.globals.set('gLHS_latitude3',engage_latitude);",
									"    pm.globals.set('gLHS_longitude3',engage_longitude);",
									"",
									"    console.log(\"customeraddressid: \"+customeraddressid);",
									"    console.log(\"engage_addressnumber: \"+engage_addressnumber);",
									"    console.log(\"engage_geocordinates: \"+engage_geocordinates);",
									"    console.log(\"engage_country: \"+engage_country);",
									"    console.log(\"engage_state: \"+engage_state);",
									"    console.log(\"engage_city: \"+engage_city);",
									"    console.log(\"engage_line1: \"+engage_line1);",
									"    console.log(\"engage_line2: \"+engage_line2);",
									"    console.log(\"engage_line3: \"+engage_line3);  ",
									"    console.log(\"engage_postalcode: \"+engage_postalcode); ",
									"    console.log(\"engage_addresstypecode: \"+engage_addresstypecode); ",
									"    console.log(\"engage_mailtype: \"+engage_mailtype);  ",
									"    console.log(\"engage_latitude: \"+engage_latitude);",
									"    console.log(\"engage_longitude: \"+engage_longitude);",
									"",
									"});",
									"",
									"setTimeout(function(){}, 85000);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"addresstypecode\":\"3\",\r\n    \"mshied_mailtype\": 494280000,\r\n    \"cmc_countryregion\": \"175490231\",\r\n    \"cmc_state\": \"175490296\",\r\n\t\"parentid_contact@odata.bind\": \"/contacts({{gcontactid3}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/customeraddresses",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"customeraddresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Lat, long and geocordinates for Valid Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fetching the Customer address record\", function() \r",
									"{\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"    var jsonData =JSON.parse(responseBody);\r",
									"\r",
									"    //Data from RHS [Post Azure function run]\r",
									"    var RHS_addressnumber=jsonData.addressnumber;\r",
									"    var RHS_geocordinates=jsonData.cmc_geocoordinates;\r",
									"    var RHS_country=jsonData.cmc_countryregion;\r",
									"    var RHS_state=jsonData.cmc_state;\r",
									"    var RHS_city=jsonData.city;\r",
									"    var RHS_line1=jsonData.line1;\r",
									"    var RHS_line2=jsonData.line2;\r",
									"    var RHS_line3=jsonData.line3;\r",
									"    var RHS_postalcode=jsonData.postalcode;\r",
									"    var RHS_addresstypecode=jsonData.addresstypecode;\r",
									"    var RHS_mailtype=jsonData.mshied_mailtype;\r",
									"    var RHS_latitude=jsonData.latitude;\r",
									"    var RHS_longitude=jsonData.longitude;\r",
									"\r",
									"    console.log(\"RHS_addressnumber: \"+RHS_addressnumber);\r",
									"    console.log(\"RHS_geocordinates: \"+RHS_geocordinates);\r",
									"    console.log(\"RHS_country: \"+RHS_country);\r",
									"    console.log(\"RHS_state: \"+RHS_state);\r",
									"    console.log(\"RHS_city: \"+RHS_city);\r",
									"    console.log(\"RHS_line1: \"+RHS_line1);\r",
									"    console.log(\"RHS_line2: \"+RHS_line2);\r",
									"    console.log(\"RHS_line3: \"+RHS_line3);  \r",
									"    console.log(\"RHS_postalcode: \"+RHS_postalcode); \r",
									"    console.log(\"RHS_addresstypecode: \"+RHS_addresstypecode); \r",
									"    console.log(\"RHS_mailtype: \"+RHS_mailtype); \r",
									"    console.log(\"RHS_latitude: \"+RHS_latitude); \r",
									"    console.log(\"RHS_longitude: \"+RHS_longitude);  \r",
									"\r",
									"    //Data from LHS\r",
									"    var LHS_addressnumber1=pm.globals.get(\"gLHS_addressnumber3\");\r",
									"    var LHS_geocordinates1=pm.globals.get(\"gLHS_geocordinates3\");\r",
									"    var LHS_country1=pm.globals.get(\"gLHS_country3\");\r",
									"    var LHS_state1=pm.globals.get(\"gLHS_state3\");\r",
									"    var LHS_city1=pm.globals.get(\"gLHS_city3\");\r",
									"    var LHS_1line1=pm.globals.get(\"gLHS_1line3\");\r",
									"    var LHS_2line1=pm.globals.get(\"gLHS_2line3\");\r",
									"    var LHS_3line1=pm.globals.get(\"gLHS_3line3\");\r",
									"    var LHS_postalcode1=pm.globals.get(\"gLHS_postalcode3\");\r",
									"    var LHS_addresstypecode1=pm.globals.get(\"gLHS_addresstypecode3\");\r",
									"    var LHS_mailtype1=pm.globals.get(\"gLHS_mailtype3\");\r",
									"    var LHS_latitude1=pm.globals.set(\"gLHS_latitude3\");\r",
									"    var LHS_longitude1=pm.globals.set(\"gLHS_longitude3\");\r",
									"\r",
									"    console.log(\"LHS_addressnumber1: \"+LHS_addressnumber1);\r",
									"    console.log(\"LHS_geocordinates1: \"+LHS_geocordinates1);\r",
									"    console.log(\"LHS_country1: \"+LHS_country1);\r",
									"    console.log(\"LHS_state1: \"+LHS_state1);\r",
									"    console.log(\"LHS_city1: \"+LHS_city1);\r",
									"    console.log(\"LHS_1line1: \"+LHS_1line1);\r",
									"    console.log(\"LHS_2line1: \"+LHS_2line1);\r",
									"    console.log(\"LHS_3line1: \"+LHS_3line1);  \r",
									"    console.log(\"LHS_postalcode1: \"+LHS_postalcode1); \r",
									"    console.log(\"LHS_addresstypecode1: \"+LHS_addresstypecode1); \r",
									"    console.log(\"LHS_mailtype1: \"+LHS_mailtype1);\r",
									"    console.log(\"LHS_latitude1: \"+LHS_latitude1);\r",
									"    console.log(\"LHS_longitude1: \"+LHS_longitude1);\r",
									"\r",
									"    //Address number check\r",
									"    pm.test(\"Address number field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_addressnumber).to.equal(1);\r",
									"            \r",
									"        });\r",
									"\r",
									"   //Geocordinates check\r",
									"    pm.test(\"Geocordinates field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_geocordinates).to.equal(1);\r",
									"        });\r",
									"\r",
									"    //Country check\r",
									"    pm.test(\"country field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_country1).to.equal(RHS_country);\r",
									"        });\r",
									"\r",
									"    //State check\r",
									"    pm.test(\"State field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_state1).to.equal(RHS_state);\r",
									"        });\r",
									"    \r",
									"    //City check \r",
									"    pm.test(\"City field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_city1).to.equal(RHS_city);\r",
									"        });\r",
									"    \r",
									"    //Line1 check\r",
									"    pm.test(\"Line 1 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_1line1).to.equal(RHS_line1);\r",
									"        });\r",
									"\r",
									"    //Line2 check\r",
									"    pm.test(\"Line 2 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_2line1).to.equal(RHS_line2);\r",
									"        });\r",
									"\r",
									"    //Line3 check\r",
									"    pm.test(\"Line 3 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_3line1).to.equal(RHS_line3);\r",
									"        });\r",
									"    \r",
									"    //Postalcode check\r",
									"    pm.test(\"Postalcode field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_postalcode1).to.equal(RHS_postalcode);\r",
									"        });\r",
									"\r",
									"    //AddressTypeCode check\r",
									"    pm.test(\"AddressTypeCode field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_addresstypecode1).to.equal(RHS_addresstypecode);\r",
									"        });\r",
									"    \r",
									"    //Mailtype check\r",
									"    pm.test(\"Mailtype field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_mailtype1).to.equal(RHS_mailtype);\r",
									"        });\r",
									"    \r",
									"    //Latitude check\r",
									"    pm.test(\"Latitude field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_latitude).not.eql(null);\r",
									"        });\r",
									"    \r",
									"    //Longitude check\r",
									"    pm.test(\"Longitude field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_longitude).not.eql(null);\r",
									"        });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/customeraddresses({{gcustomeraddressid3}})",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"customeraddresses({{gcustomeraddressid3}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Valid Address -  only city",
			"item": [
				{
					"name": "Create Contact 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contact_id;",
									"pm.test(\"Contact Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    contact_id = jsonData.contactid;",
									"    var fullname = jsonData.fullname;",
									"    console.log('Contact:' +contact_id);",
									"    console.log('fullname:' +fullname);",
									"    ",
									"});",
									"",
									"pm.globals.set(\"gcontactid4\",contact_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"ContactGeo4{{$randomFirstName}}{{$randomInt}}\",\r\n    \"lastname\": \"ContLast4{{$randomLastName}}{{$randomInt}}\",\r\n    \"mshied_contacttype\": \"494280002\"\r\n   \r\n}\r\n\r\n  \r\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/contacts",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Valid Address -  only city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created New Address for Contact 4\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var engage_addressnumber=jsonData.addressnumber;",
									"    var engage_geocordinates=jsonData.cmc_geocoordinates;",
									"    var engage_country=jsonData.cmc_countryregion;",
									"    var engage_state=jsonData.cmc_state;",
									"    var engage_city=jsonData.city;",
									"    var engage_line1=jsonData.line1;",
									"    var engage_line2=jsonData.line2;",
									"    var engage_line3=jsonData.line3;",
									"    var engage_postalcode=jsonData.postalcode;",
									"    var engage_addresstypecode=jsonData.addresstypecode;",
									"    var engage_mailtype=jsonData.mshied_mailtype;",
									"    var engage_latitude=jsonData.latitude;",
									"    var engage_longitude=jsonData.longitude;",
									"    var customeraddressid=jsonData.customeraddressid;",
									"",
									"    pm.globals.set('gcustomeraddressid4',customeraddressid);",
									"    pm.globals.set('gLHS_addressnumber4',engage_addressnumber);",
									"    pm.globals.set('gLHS_geocordinates4',engage_geocordinates);",
									"    pm.globals.set('gLHS_country4',engage_country);",
									"    pm.globals.set('gLHS_state4',engage_state);",
									"    pm.globals.set('gLHS_city4',engage_city);",
									"    pm.globals.set('gLHS_1line4',engage_line1);",
									"    pm.globals.set('gLHS_2line4',engage_line2);",
									"    pm.globals.set('gLHS_3line4',engage_line3);",
									"    pm.globals.set('gLHS_postalcode4',engage_postalcode);",
									"    pm.globals.set('gLHS_addresstypecode4',engage_addresstypecode);",
									"    pm.globals.set('gLHS_mailtype4',engage_mailtype);",
									"    pm.globals.set('gLHS_latitude4',engage_latitude);",
									"    pm.globals.set('gLHS_longitude4',engage_longitude);",
									"",
									"    console.log(\"customeraddressid: \"+customeraddressid);",
									"    console.log(\"engage_addressnumber: \"+engage_addressnumber);",
									"    console.log(\"engage_geocordinates: \"+engage_geocordinates);",
									"    console.log(\"engage_country: \"+engage_country);",
									"    console.log(\"engage_state: \"+engage_state);",
									"    console.log(\"engage_city: \"+engage_city);",
									"    console.log(\"engage_line1: \"+engage_line1);",
									"    console.log(\"engage_line2: \"+engage_line2);",
									"    console.log(\"engage_line3: \"+engage_line3);  ",
									"    console.log(\"engage_postalcode: \"+engage_postalcode); ",
									"    console.log(\"engage_addresstypecode: \"+engage_addresstypecode); ",
									"    console.log(\"engage_mailtype: \"+engage_mailtype);  ",
									"    console.log(\"engage_latitude: \"+engage_latitude);",
									"    console.log(\"engage_longitude: \"+engage_longitude);",
									"",
									"});",
									"",
									"setTimeout(function(){}, 85000);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"addresstypecode\":\"3\",\r\n    \"mshied_mailtype\": 494280000,\r\n    \"city\": \"New York\",\r\n\t\"parentid_contact@odata.bind\": \"/contacts({{gcontactid4}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/customeraddresses",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"customeraddresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Lat, long and geocordinates for Valid Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fetching the Customer address record\", function() \r",
									"{\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"    var jsonData =JSON.parse(responseBody);\r",
									"\r",
									"    //Data from RHS [Post Azure function run]\r",
									"    var RHS_addressnumber=jsonData.addressnumber;\r",
									"    var RHS_geocordinates=jsonData.cmc_geocoordinates;\r",
									"    var RHS_country=jsonData.cmc_countryregion;\r",
									"    var RHS_state=jsonData.cmc_state;\r",
									"    var RHS_city=jsonData.city;\r",
									"    var RHS_line1=jsonData.line1;\r",
									"    var RHS_line2=jsonData.line2;\r",
									"    var RHS_line3=jsonData.line3;\r",
									"    var RHS_postalcode=jsonData.postalcode;\r",
									"    var RHS_addresstypecode=jsonData.addresstypecode;\r",
									"    var RHS_mailtype=jsonData.mshied_mailtype;\r",
									"    var RHS_latitude=jsonData.latitude;\r",
									"    var RHS_longitude=jsonData.longitude;\r",
									"\r",
									"    console.log(\"RHS_addressnumber: \"+RHS_addressnumber);\r",
									"    console.log(\"RHS_geocordinates: \"+RHS_geocordinates);\r",
									"    console.log(\"RHS_country: \"+RHS_country);\r",
									"    console.log(\"RHS_state: \"+RHS_state);\r",
									"    console.log(\"RHS_city: \"+RHS_city);\r",
									"    console.log(\"RHS_line1: \"+RHS_line1);\r",
									"    console.log(\"RHS_line2: \"+RHS_line2);\r",
									"    console.log(\"RHS_line3: \"+RHS_line3);  \r",
									"    console.log(\"RHS_postalcode: \"+RHS_postalcode); \r",
									"    console.log(\"RHS_addresstypecode: \"+RHS_addresstypecode); \r",
									"    console.log(\"RHS_mailtype: \"+RHS_mailtype); \r",
									"    console.log(\"RHS_latitude: \"+RHS_latitude); \r",
									"    console.log(\"RHS_longitude: \"+RHS_longitude);  \r",
									"\r",
									"    //Data from LHS\r",
									"    var LHS_addressnumber1=pm.globals.get(\"gLHS_addressnumber4\");\r",
									"    var LHS_geocordinates1=pm.globals.get(\"gLHS_geocordinates4\");\r",
									"    var LHS_country1=pm.globals.get(\"gLHS_country4\");\r",
									"    var LHS_state1=pm.globals.get(\"gLHS_state4\");\r",
									"    var LHS_city1=pm.globals.get(\"gLHS_city4\");\r",
									"    var LHS_1line1=pm.globals.get(\"gLHS_1line4\");\r",
									"    var LHS_2line1=pm.globals.get(\"gLHS_2line4\");\r",
									"    var LHS_3line1=pm.globals.get(\"gLHS_3line4\");\r",
									"    var LHS_postalcode1=pm.globals.get(\"gLHS_postalcode4\");\r",
									"    var LHS_addresstypecode1=pm.globals.get(\"gLHS_addresstypecode4\");\r",
									"    var LHS_mailtype1=pm.globals.get(\"gLHS_mailtype4\");\r",
									"    var LHS_latitude1=pm.globals.set(\"gLHS_latitude4\");\r",
									"    var LHS_longitude1=pm.globals.set(\"gLHS_longitude4\");\r",
									"\r",
									"    console.log(\"LHS_addressnumber1: \"+LHS_addressnumber1);\r",
									"    console.log(\"LHS_geocordinates1: \"+LHS_geocordinates1);\r",
									"    console.log(\"LHS_country1: \"+LHS_country1);\r",
									"    console.log(\"LHS_state1: \"+LHS_state1);\r",
									"    console.log(\"LHS_city1: \"+LHS_city1);\r",
									"    console.log(\"LHS_1line1: \"+LHS_1line1);\r",
									"    console.log(\"LHS_2line1: \"+LHS_2line1);\r",
									"    console.log(\"LHS_3line1: \"+LHS_3line1);  \r",
									"    console.log(\"LHS_postalcode1: \"+LHS_postalcode1); \r",
									"    console.log(\"LHS_addresstypecode1: \"+LHS_addresstypecode1); \r",
									"    console.log(\"LHS_mailtype1: \"+LHS_mailtype1);\r",
									"    console.log(\"LHS_latitude1: \"+LHS_latitude1);\r",
									"    console.log(\"LHS_longitude1: \"+LHS_longitude1);\r",
									"\r",
									"    //Address number check\r",
									"    pm.test(\"Address number field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_addressnumber).to.equal(1);\r",
									"            \r",
									"        });\r",
									"\r",
									"   //Geocordinates check\r",
									"    pm.test(\"Geocordinates field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_geocordinates).to.equal(1);\r",
									"        });\r",
									"\r",
									"    //Country check\r",
									"    pm.test(\"country field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_country1).to.equal(RHS_country);\r",
									"        });\r",
									"\r",
									"    //State check\r",
									"    pm.test(\"State field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_state1).to.equal(RHS_state);\r",
									"        });\r",
									"    \r",
									"    //City check \r",
									"    pm.test(\"City field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_city1).to.equal(RHS_city);\r",
									"        });\r",
									"    \r",
									"    //Line1 check\r",
									"    pm.test(\"Line 1 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_1line1).to.equal(RHS_line1);\r",
									"        });\r",
									"\r",
									"    //Line2 check\r",
									"    pm.test(\"Line 2 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_2line1).to.equal(RHS_line2);\r",
									"        });\r",
									"\r",
									"    //Line3 check\r",
									"    pm.test(\"Line 3 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_3line1).to.equal(RHS_line3);\r",
									"        });\r",
									"    \r",
									"    //Postalcode check\r",
									"    pm.test(\"Postalcode field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_postalcode1).to.equal(RHS_postalcode);\r",
									"        });\r",
									"\r",
									"    //AddressTypeCode check\r",
									"    pm.test(\"AddressTypeCode field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_addresstypecode1).to.equal(RHS_addresstypecode);\r",
									"        });\r",
									"    \r",
									"    //Mailtype check\r",
									"    pm.test(\"Mailtype field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_mailtype1).to.equal(RHS_mailtype);\r",
									"        });\r",
									"    \r",
									"    //Latitude check\r",
									"    pm.test(\"Latitude field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_latitude).not.eql(null);\r",
									"        });\r",
									"    \r",
									"    //Longitude check\r",
									"    pm.test(\"Longitude field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_longitude).not.eql(null);\r",
									"        });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/customeraddresses({{gcustomeraddressid4}})",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"customeraddresses({{gcustomeraddressid4}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Valid Address - only Street and city details",
			"item": [
				{
					"name": "Create Contact 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contact_id;",
									"pm.test(\"Contact Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    contact_id = jsonData.contactid;",
									"    var fullname = jsonData.fullname;",
									"    console.log('Contact:' +contact_id);",
									"    console.log('fullname:' +fullname);",
									"    ",
									"});",
									"",
									"pm.globals.set(\"gcontactid5\",contact_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"ContactGeo5{{$randomFirstName}}{{$randomInt}}\",\r\n    \"lastname\": \"ContLast5{{$randomLastName}}{{$randomInt}}\",\r\n    \"mshied_contacttype\": \"494280002\"\r\n   \r\n}\r\n\r\n  \r\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/contacts",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Valid Address - only Street and city details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created New Address for Contact 5\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var engage_addressnumber=jsonData.addressnumber;",
									"    var engage_geocordinates=jsonData.cmc_geocoordinates;",
									"    var engage_country=jsonData.cmc_countryregion;",
									"    var engage_state=jsonData.cmc_state;",
									"    var engage_city=jsonData.city;",
									"    var engage_line1=jsonData.line1;",
									"    var engage_line2=jsonData.line2;",
									"    var engage_line3=jsonData.line3;",
									"    var engage_postalcode=jsonData.postalcode;",
									"    var engage_addresstypecode=jsonData.addresstypecode;",
									"    var engage_mailtype=jsonData.mshied_mailtype;",
									"    var engage_latitude=jsonData.latitude;",
									"    var engage_longitude=jsonData.longitude;",
									"    var customeraddressid=jsonData.customeraddressid;",
									"",
									"    pm.globals.set('gcustomeraddressid5',customeraddressid);",
									"    pm.globals.set('gLHS_addressnumber5',engage_addressnumber);",
									"    pm.globals.set('gLHS_geocordinates5',engage_geocordinates);",
									"    pm.globals.set('gLHS_country5',engage_country);",
									"    pm.globals.set('gLHS_state5',engage_state);",
									"    pm.globals.set('gLHS_city5',engage_city);",
									"    pm.globals.set('gLHS_1line5',engage_line1);",
									"    pm.globals.set('gLHS_2line5',engage_line2);",
									"    pm.globals.set('gLHS_3line5',engage_line3);",
									"    pm.globals.set('gLHS_postalcode5',engage_postalcode);",
									"    pm.globals.set('gLHS_addresstypecode5',engage_addresstypecode);",
									"    pm.globals.set('gLHS_mailtype5',engage_mailtype);",
									"    pm.globals.set('gLHS_latitude5',engage_latitude);",
									"    pm.globals.set('gLHS_longitude5',engage_longitude);",
									"",
									"    console.log(\"customeraddressid: \"+customeraddressid);",
									"    console.log(\"engage_addressnumber: \"+engage_addressnumber);",
									"    console.log(\"engage_geocordinates: \"+engage_geocordinates);",
									"    console.log(\"engage_country: \"+engage_country);",
									"    console.log(\"engage_state: \"+engage_state);",
									"    console.log(\"engage_city: \"+engage_city);",
									"    console.log(\"engage_line1: \"+engage_line1);",
									"    console.log(\"engage_line2: \"+engage_line2);",
									"    console.log(\"engage_line3: \"+engage_line3);  ",
									"    console.log(\"engage_postalcode: \"+engage_postalcode); ",
									"    console.log(\"engage_addresstypecode: \"+engage_addresstypecode); ",
									"    console.log(\"engage_mailtype: \"+engage_mailtype);  ",
									"    console.log(\"engage_latitude: \"+engage_latitude);",
									"    console.log(\"engage_longitude: \"+engage_longitude);",
									"",
									"});",
									"",
									"setTimeout(function(){}, 85000);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"addresstypecode\":\"3\",\r\n    \"mshied_mailtype\": 494280000,\r\n    \"line1\": \"Street1\",\r\n    \"line2\": \"street2\",\r\n    \"line3\": \"street3\",\r\n    \"city\": \"Chicago\",\r\n\t\"parentid_contact@odata.bind\": \"/contacts({{gcontactid5}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/customeraddresses",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"customeraddresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Lat, long and geocordinates for Valid Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fetching the Customer address record\", function() \r",
									"{\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"    var jsonData =JSON.parse(responseBody);\r",
									"\r",
									"    //Data from RHS [Post Azure function run]\r",
									"    var RHS_addressnumber=jsonData.addressnumber;\r",
									"    var RHS_geocordinates=jsonData.cmc_geocoordinates;\r",
									"    var RHS_country=jsonData.cmc_countryregion;\r",
									"    var RHS_state=jsonData.cmc_state;\r",
									"    var RHS_city=jsonData.city;\r",
									"    var RHS_line1=jsonData.line1;\r",
									"    var RHS_line2=jsonData.line2;\r",
									"    var RHS_line3=jsonData.line3;\r",
									"    var RHS_postalcode=jsonData.postalcode;\r",
									"    var RHS_addresstypecode=jsonData.addresstypecode;\r",
									"    var RHS_mailtype=jsonData.mshied_mailtype;\r",
									"    var RHS_latitude=jsonData.latitude;\r",
									"    var RHS_longitude=jsonData.longitude;\r",
									"\r",
									"    console.log(\"RHS_addressnumber: \"+RHS_addressnumber);\r",
									"    console.log(\"RHS_geocordinates: \"+RHS_geocordinates);\r",
									"    console.log(\"RHS_country: \"+RHS_country);\r",
									"    console.log(\"RHS_state: \"+RHS_state);\r",
									"    console.log(\"RHS_city: \"+RHS_city);\r",
									"    console.log(\"RHS_line1: \"+RHS_line1);\r",
									"    console.log(\"RHS_line2: \"+RHS_line2);\r",
									"    console.log(\"RHS_line3: \"+RHS_line3);  \r",
									"    console.log(\"RHS_postalcode: \"+RHS_postalcode); \r",
									"    console.log(\"RHS_addresstypecode: \"+RHS_addresstypecode); \r",
									"    console.log(\"RHS_mailtype: \"+RHS_mailtype); \r",
									"    console.log(\"RHS_latitude: \"+RHS_latitude); \r",
									"    console.log(\"RHS_longitude: \"+RHS_longitude);  \r",
									"\r",
									"    //Data from LHS\r",
									"    var LHS_addressnumber1=pm.globals.get(\"gLHS_addressnumber5\");\r",
									"    var LHS_geocordinates1=pm.globals.get(\"gLHS_geocordinates5\");\r",
									"    var LHS_country1=pm.globals.get(\"gLHS_country5\");\r",
									"    var LHS_state1=pm.globals.get(\"gLHS_state5\");\r",
									"    var LHS_city1=pm.globals.get(\"gLHS_city5\");\r",
									"    var LHS_1line1=pm.globals.get(\"gLHS_1line5\");\r",
									"    var LHS_2line1=pm.globals.get(\"gLHS_2line5\");\r",
									"    var LHS_3line1=pm.globals.get(\"gLHS_3line5\");\r",
									"    var LHS_postalcode1=pm.globals.get(\"gLHS_postalcode5\");\r",
									"    var LHS_addresstypecode1=pm.globals.get(\"gLHS_addresstypecode5\");\r",
									"    var LHS_mailtype1=pm.globals.get(\"gLHS_mailtype5\");\r",
									"    var LHS_latitude1=pm.globals.set(\"gLHS_latitude5\");\r",
									"    var LHS_longitude1=pm.globals.set(\"gLHS_longitude5\");\r",
									"\r",
									"    console.log(\"LHS_addressnumber1: \"+LHS_addressnumber1);\r",
									"    console.log(\"LHS_geocordinates1: \"+LHS_geocordinates1);\r",
									"    console.log(\"LHS_country1: \"+LHS_country1);\r",
									"    console.log(\"LHS_state1: \"+LHS_state1);\r",
									"    console.log(\"LHS_city1: \"+LHS_city1);\r",
									"    console.log(\"LHS_1line1: \"+LHS_1line1);\r",
									"    console.log(\"LHS_2line1: \"+LHS_2line1);\r",
									"    console.log(\"LHS_3line1: \"+LHS_3line1);  \r",
									"    console.log(\"LHS_postalcode1: \"+LHS_postalcode1); \r",
									"    console.log(\"LHS_addresstypecode1: \"+LHS_addresstypecode1); \r",
									"    console.log(\"LHS_mailtype1: \"+LHS_mailtype1);\r",
									"    console.log(\"LHS_latitude1: \"+LHS_latitude1);\r",
									"    console.log(\"LHS_longitude1: \"+LHS_longitude1);\r",
									"\r",
									"    //Address number check\r",
									"    pm.test(\"Address number field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_addressnumber).to.equal(1);\r",
									"            \r",
									"        });\r",
									"\r",
									"   //Geocordinates check\r",
									"    pm.test(\"Geocordinates field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_geocordinates).to.equal(1);\r",
									"        });\r",
									"\r",
									"    //Country check\r",
									"    pm.test(\"country field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_country1).to.equal(RHS_country);\r",
									"        });\r",
									"\r",
									"    //State check\r",
									"    pm.test(\"State field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_state1).to.equal(RHS_state);\r",
									"        });\r",
									"    \r",
									"    //City check \r",
									"    pm.test(\"City field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_city1).to.equal(RHS_city);\r",
									"        });\r",
									"    \r",
									"    //Line1 check\r",
									"    pm.test(\"Line 1 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_1line1).to.equal(RHS_line1);\r",
									"        });\r",
									"\r",
									"    //Line2 check\r",
									"    pm.test(\"Line 2 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_2line1).to.equal(RHS_line2);\r",
									"        });\r",
									"\r",
									"    //Line3 check\r",
									"    pm.test(\"Line 3 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_3line1).to.equal(RHS_line3);\r",
									"        });\r",
									"    \r",
									"    //Postalcode check\r",
									"    pm.test(\"Postalcode field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_postalcode1).to.equal(RHS_postalcode);\r",
									"        });\r",
									"\r",
									"    //AddressTypeCode check\r",
									"    pm.test(\"AddressTypeCode field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_addresstypecode1).to.equal(RHS_addresstypecode);\r",
									"        });\r",
									"    \r",
									"    //Mailtype check\r",
									"    pm.test(\"Mailtype field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_mailtype1).to.equal(RHS_mailtype);\r",
									"        });\r",
									"    \r",
									"    //Latitude check\r",
									"    pm.test(\"Latitude field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_latitude).not.eql(null);\r",
									"        });\r",
									"    \r",
									"    //Longitude check\r",
									"    pm.test(\"Longitude field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_longitude).not.eql(null);\r",
									"        });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/customeraddresses({{gcustomeraddressid5}})",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"customeraddresses({{gcustomeraddressid5}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Valid Address - incorrect address",
			"item": [
				{
					"name": "Create Contact 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var contact_id;",
									"pm.test(\"Contact Created\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    contact_id = jsonData.contactid;",
									"    var fullname = jsonData.fullname;",
									"    console.log('Contact:' +contact_id);",
									"    console.log('fullname:' +fullname);",
									"    ",
									"});",
									"",
									"pm.globals.set(\"gcontactid6\",contact_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"ContactGeo6{{$randomFirstName}}{{$randomInt}}\",\r\n    \"lastname\": \"ContLast6{{$randomLastName}}{{$randomInt}}\",\r\n    \"mshied_contacttype\": \"494280002\"\r\n   \r\n}\r\n\r\n  \r\n"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/contacts",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Valid Address - incorrect address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created New Address for Contact 6\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var engage_addressnumber=jsonData.addressnumber;",
									"    var engage_geocordinates=jsonData.cmc_geocoordinates;",
									"    var engage_country=jsonData.cmc_countryregion;",
									"    var engage_state=jsonData.cmc_state;",
									"    var engage_city=jsonData.city;",
									"    var engage_line1=jsonData.line1;",
									"    var engage_line2=jsonData.line2;",
									"    var engage_line3=jsonData.line3;",
									"    var engage_postalcode=jsonData.postalcode;",
									"    var engage_addresstypecode=jsonData.addresstypecode;",
									"    var engage_mailtype=jsonData.mshied_mailtype;",
									"    var engage_latitude=jsonData.latitude;",
									"    var engage_longitude=jsonData.longitude;",
									"    var customeraddressid=jsonData.customeraddressid;",
									"",
									"    pm.globals.set('gcustomeraddressid6',customeraddressid);",
									"    pm.globals.set('gLHS_addressnumber6',engage_addressnumber);",
									"    pm.globals.set('gLHS_geocordinates6',engage_geocordinates);",
									"    pm.globals.set('gLHS_country6',engage_country);",
									"    pm.globals.set('gLHS_state6',engage_state);",
									"    pm.globals.set('gLHS_city6',engage_city);",
									"    pm.globals.set('gLHS_1line6',engage_line1);",
									"    pm.globals.set('gLHS_2line6',engage_line2);",
									"    pm.globals.set('gLHS_3line6',engage_line3);",
									"    pm.globals.set('gLHS_postalcode6',engage_postalcode);",
									"    pm.globals.set('gLHS_addresstypecode6',engage_addresstypecode);",
									"    pm.globals.set('gLHS_mailtype6',engage_mailtype);",
									"    pm.globals.set('gLHS_latitude6',engage_latitude);",
									"    pm.globals.set('gLHS_longitude6',engage_longitude);",
									"",
									"    console.log(\"customeraddressid: \"+customeraddressid);",
									"    console.log(\"engage_addressnumber: \"+engage_addressnumber);",
									"    console.log(\"engage_geocordinates: \"+engage_geocordinates);",
									"    console.log(\"engage_country: \"+engage_country);",
									"    console.log(\"engage_state: \"+engage_state);",
									"    console.log(\"engage_city: \"+engage_city);",
									"    console.log(\"engage_line1: \"+engage_line1);",
									"    console.log(\"engage_line2: \"+engage_line2);",
									"    console.log(\"engage_line3: \"+engage_line3);  ",
									"    console.log(\"engage_postalcode: \"+engage_postalcode); ",
									"    console.log(\"engage_addresstypecode: \"+engage_addresstypecode); ",
									"    console.log(\"engage_mailtype: \"+engage_mailtype);  ",
									"    console.log(\"engage_latitude: \"+engage_latitude);",
									"    console.log(\"engage_longitude: \"+engage_longitude);",
									"",
									"});",
									"",
									"setTimeout(function(){}, 85000);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"addresstypecode\":\"3\",\r\n    \"mshied_mailtype\": 494280000,\r\n    \"cmc_countryregion\": \"175490231\",\r\n    \"cmc_state\": \"175490282\",\r\n    \"line1\": \"Street1{}\",   \r\n    \"line2\": \"street2{}\",\r\n    \"line3\": \"street3{}\",\r\n    \"city\": \"Houston{}\",\r\n    \"cmc_county\": \"175490027\",\r\n    \"postalcode\": \"331{{$randomInt}}\",\r\n\t\"parentid_contact@odata.bind\": \"/contacts({{gcontactid6}})\"\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/customeraddresses",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"customeraddresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Lat, long and geocordinates for Valid Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fetching the Customer address record\", function() \r",
									"{\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"    var jsonData =JSON.parse(responseBody);\r",
									"\r",
									"    //Data from RHS [Post Azure function run]\r",
									"    var RHS_addressnumber=jsonData.addressnumber;\r",
									"    var RHS_geocordinates=jsonData.cmc_geocoordinates;\r",
									"    var RHS_country=jsonData.cmc_countryregion;\r",
									"    var RHS_state=jsonData.cmc_state;\r",
									"    var RHS_city=jsonData.city;\r",
									"    var RHS_line1=jsonData.line1;\r",
									"    var RHS_line2=jsonData.line2;\r",
									"    var RHS_line3=jsonData.line3;\r",
									"    var RHS_postalcode=jsonData.postalcode;\r",
									"    var RHS_addresstypecode=jsonData.addresstypecode;\r",
									"    var RHS_mailtype=jsonData.mshied_mailtype;\r",
									"    var RHS_latitude=jsonData.latitude;\r",
									"    var RHS_longitude=jsonData.longitude;\r",
									"\r",
									"    console.log(\"RHS_addressnumber: \"+RHS_addressnumber);\r",
									"    console.log(\"RHS_geocordinates: \"+RHS_geocordinates);\r",
									"    console.log(\"RHS_country: \"+RHS_country);\r",
									"    console.log(\"RHS_state: \"+RHS_state);\r",
									"    console.log(\"RHS_city: \"+RHS_city);\r",
									"    console.log(\"RHS_line1: \"+RHS_line1);\r",
									"    console.log(\"RHS_line2: \"+RHS_line2);\r",
									"    console.log(\"RHS_line3: \"+RHS_line3);  \r",
									"    console.log(\"RHS_postalcode: \"+RHS_postalcode); \r",
									"    console.log(\"RHS_addresstypecode: \"+RHS_addresstypecode); \r",
									"    console.log(\"RHS_mailtype: \"+RHS_mailtype); \r",
									"    console.log(\"RHS_latitude: \"+RHS_latitude); \r",
									"    console.log(\"RHS_longitude: \"+RHS_longitude);  \r",
									"\r",
									"    //Data from LHS\r",
									"    var LHS_addressnumber1=pm.globals.get(\"gLHS_addressnumber6\");\r",
									"    var LHS_geocordinates1=pm.globals.get(\"gLHS_geocordinates6\");\r",
									"    var LHS_country1=pm.globals.get(\"gLHS_country6\");\r",
									"    var LHS_state1=pm.globals.get(\"gLHS_state6\");\r",
									"    var LHS_city1=pm.globals.get(\"gLHS_city6\");\r",
									"    var LHS_1line1=pm.globals.get(\"gLHS_1line6\");\r",
									"    var LHS_2line1=pm.globals.get(\"gLHS_2line6\");\r",
									"    var LHS_3line1=pm.globals.get(\"gLHS_3line6\");\r",
									"    var LHS_postalcode1=pm.globals.get(\"gLHS_postalcode6\");\r",
									"    var LHS_addresstypecode1=pm.globals.get(\"gLHS_addresstypecode6\");\r",
									"    var LHS_mailtype1=pm.globals.get(\"gLHS_mailtype6\");\r",
									"    var LHS_latitude1=pm.globals.set(\"gLHS_latitude6\");\r",
									"    var LHS_longitude1=pm.globals.set(\"gLHS_longitude6\");\r",
									"\r",
									"    console.log(\"LHS_addressnumber1: \"+LHS_addressnumber1);\r",
									"    console.log(\"LHS_geocordinates1: \"+LHS_geocordinates1);\r",
									"    console.log(\"LHS_country1: \"+LHS_country1);\r",
									"    console.log(\"LHS_state1: \"+LHS_state1);\r",
									"    console.log(\"LHS_city1: \"+LHS_city1);\r",
									"    console.log(\"LHS_1line1: \"+LHS_1line1);\r",
									"    console.log(\"LHS_2line1: \"+LHS_2line1);\r",
									"    console.log(\"LHS_3line1: \"+LHS_3line1);  \r",
									"    console.log(\"LHS_postalcode1: \"+LHS_postalcode1); \r",
									"    console.log(\"LHS_addresstypecode1: \"+LHS_addresstypecode1); \r",
									"    console.log(\"LHS_mailtype1: \"+LHS_mailtype1);\r",
									"    console.log(\"LHS_latitude1: \"+LHS_latitude1);\r",
									"    console.log(\"LHS_longitude1: \"+LHS_longitude1);\r",
									"\r",
									"    //Address number check\r",
									"    pm.test(\"Address number field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_addressnumber).to.equal(1);\r",
									"            \r",
									"        });\r",
									"\r",
									"   //Geocordinates check\r",
									"    pm.test(\"Geocordinates field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_geocordinates).to.equal(1);\r",
									"        });\r",
									"\r",
									"    //Country check\r",
									"    pm.test(\"country field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_country1).to.equal(RHS_country);\r",
									"        });\r",
									"\r",
									"    //State check\r",
									"    pm.test(\"State field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_state1).to.equal(RHS_state);\r",
									"        });\r",
									"    \r",
									"    //City check \r",
									"    pm.test(\"City field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_city1).to.equal(RHS_city);\r",
									"        });\r",
									"    \r",
									"    //Line1 check\r",
									"    pm.test(\"Line 1 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_1line1).to.equal(RHS_line1);\r",
									"        });\r",
									"\r",
									"    //Line2 check\r",
									"    pm.test(\"Line 2 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_2line1).to.equal(RHS_line2);\r",
									"        });\r",
									"\r",
									"    //Line3 check\r",
									"    pm.test(\"Line 3 field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_3line1).to.equal(RHS_line3);\r",
									"        });\r",
									"    \r",
									"    //Postalcode check\r",
									"    pm.test(\"Postalcode field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_postalcode1).to.equal(RHS_postalcode);\r",
									"        });\r",
									"\r",
									"    //AddressTypeCode check\r",
									"    pm.test(\"AddressTypeCode field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_addresstypecode1).to.equal(RHS_addresstypecode);\r",
									"        });\r",
									"    \r",
									"    //Mailtype check\r",
									"    pm.test(\"Mailtype field value check\", function()\r",
									"        {\r",
									"            pm.expect(LHS_mailtype1).to.equal(RHS_mailtype);\r",
									"        });\r",
									"    \r",
									"    //Latitude check\r",
									"    pm.test(\"Latitude field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_latitude).not.eql(null);\r",
									"        });\r",
									"    \r",
									"    //Longitude check\r",
									"    pm.test(\"Longitude field value check\", function()\r",
									"        {\r",
									"            pm.expect(RHS_longitude).not.eql(null);\r",
									"        });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "OData-Version",
								"value": "4.0"
							},
							{
								"key": "OData-MaxVersion",
								"value": "4.0"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/customeraddresses({{gcustomeraddressid6}})",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"customeraddresses({{gcustomeraddressid6}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enable GeocodeAddress plugins",
			"item": [
				{
					"name": "GetToken_DCRM SysAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setGlobalVariable('gaccess_token', data.access_token);",
									"",
									"//pm.environment.set(\"Eaccess_token\", data.access_token);",
									"console.log(pm.globals.get(\"gaccess_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{Esystemadmin_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{Esystemadmin_secret}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{Eresource}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{Eredirectid}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{Eredirectid}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable-GeocodeAddressPlugin: Create of customeraddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Activating GeocodeAddressPlugin: Create of customeraddress\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var pluginId = jsonData.sdkmessageprocessingstepid;",
									"    var pluginName = jsonData.name;",
									"    console.log('pluginName: '+pluginName);",
									" ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "MSCRM.SuppressDuplicateDetection",
								"type": "text",
								"value": "false"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"statuscode\": 1,\r\n    \"statecode\": 0\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/sdkmessageprocessingsteps(4ec78a4f-4a53-e811-a95a-000d3af28587)",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"sdkmessageprocessingsteps(4ec78a4f-4a53-e811-a95a-000d3af28587)"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable-GeocodeAddressPlugin: Update of customeraddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Activating GeocodeAddressPlugin: Update of customeraddress\", function() ",
									"{",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"    var jsonData =JSON.parse(responseBody);",
									"    var pluginId = jsonData.sdkmessageprocessingstepid;",
									"    var pluginName = jsonData.name;",
									"    console.log('pluginName: '+pluginName);",
									" ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Prefer",
								"value": "return=representation"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gaccess_token}}"
							},
							{
								"key": "MSCRM.SuppressDuplicateDetection",
								"type": "text",
								"value": "false"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"statuscode\": 1,\r\n    \"statecode\": 0\r\n}"
						},
						"url": {
							"raw": "{{Eresource}}api/data/{{Eversion}}/sdkmessageprocessingsteps(9c94e673-4a53-e811-a95c-000d3af28a0d)",
							"host": [
								"{{Eresource}}api"
							],
							"path": [
								"data",
								"{{Eversion}}",
								"sdkmessageprocessingsteps(9c94e673-4a53-e811-a95c-000d3af28a0d)"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}